module backend.c;

import backend.base;
import helpers;
macro import cx.macros.listcomprehension;

class CBackend : Backend {
    this() { }
    override CBackendModule createModule(Platform platform, BackendLocation loc, bool forMacro) {
        return new CBackendModule(platform);
    }
}

struct Global {
    string name;
    string type;
}

// TODO: Global[auto~] globals;
struct Globals
{
    Global[] globals;
    int used;
    void add(Global global) {
        if (globals.length == 0) globals = new Global[](1);
        if (used == globals.length) {
            auto copy = new Global[](globals.length * 2);
            for (int i <- 0 .. globals.length)
                copy[i] = globals[i];
            globals = copy;
        }
        globals[used] = global;
        used += 1;
    }
    Global[] array() {
        return this.globals[0 .. this.used];
    }
}

extern(C) void cxruntime_file_write(string file, string content);
extern(C) void cxruntime_system(string command);
extern(C) void cxruntime_dlcall(string soname, string name, void* arg);

class CBackendModule : BackendModule {
    LineWriter output;
    Platform platform;

    int literalId;
    Globals globals;

    this(Platform platform) {
        this.output = new LineWriter;
        this.platform = platform;
        this.output.print("#include <stdlib.h>");
        this.output.print("#include <string.h>");
        defineCIntrinsics(this, platform);
    }

    override bool declared(string name) {
        auto globals = this.globals.array;
        for (int i <- 0 .. globals.length)
            if (globals[i].name == name) return true;
        return false;
    }

    override void declare(string name, BackendType ret, BackendType[] args)
    {
        if (this.declared(name)) return;
        if (name == "memcpy" || name == "malloc" || name == "calloc"
            || name == "strlen" || name == "realpath") return; // in header
        mut string argstr = "(";
        for (int i <- 0 .. args.length) {
            if (i) argstr ~= ", ";
            argstr ~= typeFmt(this, args[i]) ~ " arg" ~ itoa(i);
        }
        argstr ~= ")";
        string retstr = typeFmt(this, ret);
        this.output.print(retstr ~ " " ~ name ~ argstr ~ ";");
        this.globals.add(Global(name, typeFmt(this, new BackendFunctionPointerType(ret, args))));
    }

    override BackendFunction define(
        string name, string decoration, BackendType ret, BackendType[] args, BackendLocation loc)
    {
        mut string name = name; // TODO mut string name
        if (name == "main") name = "_main"; // TODO mangle
        this.globals.add(Global(name, typeFmt(this, new BackendFunctionPointerType(ret, args))));
        return new CBackendFunction(this, name, ret, args);
    }
    override void declareSymbolList(string name, size_t length)
    {
        string globalDecl = "void *" ~ name ~ "[" ~ ltoa(length) ~ "]";
        this.output.print("extern " ~ globalDecl ~ ";");
        this.globals.add(Global(name, ""));
    }
    override void defineSymbolList(string name, string[] symbols)
    {
        mut string symbolList;
        for (int i <- 0 .. symbols.length) {
            if (i) symbolList ~= ", ";
            symbolList ~= "(void*) " ~ symbols[i];
        }
        string globalDecl = "void *" ~ name ~ "[" ~ ltoa(symbols.length) ~ "]";
        this.output.print(globalDecl ~ " = { " ~ symbolList ~ "};");
        this.globals.add(Global(name, ""));
    }
    string nextLiteral() {
        string res = "@str" ~ itoa(this.literalId);
        this.literalId = this.literalId + 1;
        return res;
    }
}

string typeMangle(BackendType type) {
    if (type.instanceOf(BackendLongType)) return "l";
    if (type.instanceOf(BackendIntType)) return "i";
    if (type.instanceOf(BackendShortType)) return "s";
    if (type.instanceOf(BackendCharType)) return "c";
    if (type.instanceOf(BackendFloatType)) return "f";
    if (type.instanceOf(BackendVoidType)) return "v";
    auto backendSpacerType = type.instanceOf(BackendSpacerType);
    // sure?
    if (backendSpacerType) return "U" ~ ltoa(backendSpacerType.size_);
    auto backendPointerType = type.instanceOf(BackendPointerType);
    if (backendPointerType) {
        return "P" ~ typeMangle(backendPointerType.target);
    }
    auto backendStructType = type.instanceOf(BackendStructType);
    if (backendStructType) {
        mut string mangle = "S" ~ ltoa(backendStructType.members.length);
        for (int i <- 0 .. backendStructType.members.length) {
            mangle ~= typeMangle(backendStructType.members[i]);
        }
        return mangle;
    }
    auto backendFpType = type.instanceOf(BackendFunctionPointerType);
    if (backendFpType) {
        mut string res = "F" ~ typeMangle(backendFpType.ret);
        res ~= ltoa(backendFpType.args.length);
        for (int i <- 0 .. backendFpType.args.length) {
            res ~= typeMangle(backendFpType.args[i]);
        }
        return res;
    }
    assert(false);
}

string typeFmt(CBackendModule mod, BackendType type) {
    if (type.instanceOf(BackendLongType)) return "long long int";
    if (type.instanceOf(BackendIntType)) return "int";
    if (type.instanceOf(BackendShortType)) return "short";
    if (type.instanceOf(BackendCharType)) return "char";
    if (type.instanceOf(BackendFloatType)) return "float";
    if (type.instanceOf(BackendVoidType)) return "void";
    auto backendSpacerType = type.instanceOf(BackendSpacerType);
    if (backendSpacerType)
    {
        string mangle = typeMangle(type);
        string typestr = "arr_" ~ mangle;
        if (mod.declared(typestr)) return typestr;
        string def = "typedef char " ~ typestr ~ "[" ~ ltoa(backendSpacerType.size_) ~ "];";
        mod.output.print(def);
        mod.globals.add(Global(typestr, ""));
        return typestr;
    }
    auto backendPointerType = type.instanceOf(BackendPointerType);
    if (backendPointerType) {
        return typeFmt(mod, backendPointerType.target) ~ "*";
    }
    auto backendStructType = type.instanceOf(BackendStructType);
    if (backendStructType) {
        string mangle = typeMangle(type);
        string typestr = "str_" ~ mangle;
        if (mod.declared(typestr)) return typestr;
        mut string def = "typedef struct { ";
        for (int i <- 0 .. backendStructType.members.length) {
            def ~= typeFmt(mod, backendStructType.members[i]) ~ " _" ~ itoa(i) ~ ";";
        }
        def ~= "} " ~ typestr ~ ";";
        mod.output.print(def);
        mod.globals.add(Global(typestr, ""));
        return typestr;
    }
    auto backendFpType = type.instanceOf(BackendFunctionPointerType);
    if (backendFpType) {
        string mangle = typeMangle(type);
        string typestr = "fp_" ~ mangle;
        if (mod.declared(typestr)) return typestr;
        mut string def = "typedef ";
        def ~= typeFmt(mod, backendFpType.ret) ~ "(*" ~ typestr ~ ")(";
        for (int i <- 0 .. backendFpType.args.length) {
            if (i) def ~= ", ";
            def ~= typeFmt(mod, backendFpType.args[i]);
        }
        def ~= ");";
        mod.output.print(def);
        mod.globals.add(Global(typestr, ""));
        return typestr;
    }
    assert(false);
}

alias Instr = (
      :arg, int index
    | :shortLiteral, int value
    | :byteLiteral, int value
    | :intLiteral, long value
    | :longLiteral, long value
    | :wordLiteral, Platform platform, long value
    | :floatLiteral, float value
    | :stringLiteral, string text
    | :zeroLiteral, BackendType type
    | :structLiteral, BackendType struct_, int[] regs
    | :symbolList, string name
    | :binOp, string op, BackendType type, int left, int right
    | :bitCast, int from, BackendType to
    | :zeroExtend, int value, BackendType to
    | :signExtend, int value, BackendType to
    | :trunc, int value, BackendType to
    | :intToFloat, int reg
    | :floatToInt, int reg
    | :callInstr, BackendType ret, string name, int[] args
    | :getFuncPtr, string name
    | :callFuncPtr, BackendType type, int reg, int[] args
    | :load, BackendType type, int reg
    | :staticAlloca, BackendType type
    | :field, BackendType type, int reg, size_t index
    | :fieldOffset, BackendType type, int reg, int index
    | :ptrOffset, BackendType type, int ptrReg, int offsetReg
    | :store, BackendType type, int targetReg, int valueReg
    | :return_, int reg
    | :setLabel, string label
    | :branch, string label
    | :testBranch, int reg, string thenLabel, string elseLabel
);

/**
 * SSA results can be held back for a future instruction to compose.
 * However, whenever a global state change point is reached,
 * such as a store, or function call, all held SSA
 * instructions must be flushed.
 */

// flow for 1 use:
// pending -> held -> done
// pending -> held -> persisted
// flow for multiple uses:
// pending -> persisted
enum SSAMode
{
    pending,
    // reg$reg
    persisted,
    // (int) 5
    held,
    done
}

struct Value {
    string type;
    string value;
    bool exactType;
}

struct SSAInstr {
    SSAMode mode;
    int reg; // -1 for terminators
    // inc for every instr that uses us.
    // one-use instrs can be inlined.
    int uses;
    Value heldValue;
    Instr instr;
}

class CBackendFunction : BackendFunction {
    string name;
    CBackendModule mod;
    BackendType ret_;
    BackendType[] args;

    LineWriter output;
    int blockId;

    SSAInstr[] instrs;

    this(CBackendModule mod, string name, BackendType ret, BackendType[] args)
    {
        this.name = name;
        this.mod = mod;
        this.ret_ = ret;
        this.args = args;
        this.output = new LineWriter;
    }
    void print(string msg) {
        this.output.append("  ");
        this.output.append(msg);
        this.output.endl;
    }
    override string getLabel() {
        return "Label" ~ itoa(this.blockId);
    }
    override void setLabel(string label) {
        addInstr((:setLabel, label));
    }
    int addInstr(Instr instr) {
        int reg = cast(int) this.instrs.length;
        this.instrs ~= SSAInstr(SSAMode.pending, reg, 0, Value("", "", true), instr);
        return reg;
    }
    void addBlockEnderInstr(Instr instr) {
        this.instrs ~= SSAInstr(SSAMode.pending, -1, 0, Value("", "", true), instr);
    }
    void useReg(int reg) {
        this.instrs[reg].uses += 1;
    }
    override int arg(int index) {
        return addInstr((:arg, index));
    }
    override int intLiteral(long value) {
        return addInstr((:intLiteral, value));
    }
    override int shortLiteral(int value) {
        return addInstr((:shortLiteral, value));
    }
    override int byteLiteral(int value) {
        return addInstr((:byteLiteral, value));
    }
    override int longLiteral(long value) {
        return addInstr((:longLiteral, value));
    }
    override int floatLiteral(float value) {
        return addInstr((:floatLiteral, value));
    }
    override int wordLiteral(Platform platform, size_t value) {
        return addInstr((:wordLiteral, platform, value));
    }
    override int stringLiteral(string text) {
        return addInstr((:stringLiteral, text));
    }
    override int voidLiteral() {
        return zeroLiteral(this.ret_);
    }
    override int zeroLiteral(BackendType type) {
        return addInstr((:zeroLiteral, type));
    }
    override int structLiteral(BackendType struct_, int[] regs) {
        [useReg(reg) for reg in regs];
        return addInstr((:structLiteral, struct_, regs));
    }
    override int symbolList(string name) {
        return addInstr((:symbolList, name));
    }
    override int binop(string op, BackendType type, int left, int right) {
        useReg(left); useReg(right);
        return addInstr((:binOp, op, type, left, right));
    }
    override int bitcast(int from, BackendType to) {
        useReg(from);
        return addInstr((:bitCast, from, to));
    }
    override int zeroExtend(int value, BackendType to) {
        useReg(value);
        return addInstr((:zeroExtend, value, to));
    }
    override int signExtend(int value, BackendType to) {
        useReg(value);
        return addInstr((:signExtend, value, to));
    }
    override int trunc(int value, BackendType to) {
        useReg(value);
        return addInstr((:trunc, value, to));
    }
    override int intToFloat(int value) {
        useReg(value);
        return addInstr((:intToFloat, value));
    }
    override int floatToInt(int value) {
        useReg(value);
        return addInstr((:floatToInt, value));
    }
    override int call(BackendType ret, string name, int[] args) {
        [useReg(arg) for arg in args];
        return addInstr((:callInstr, ret, name, args));
    }
    override int getFuncPtr(string name) {
        return addInstr((:getFuncPtr, name));
    }
    override int callFuncPtr(BackendType type, int callReg, int[] args) {
        useReg(callReg);
        [useReg(arg) for arg in args];
        return addInstr((:callFuncPtr, type, callReg, args));
    }
    override int load(BackendType backendType, int source) {
        useReg(source);
        return addInstr((:load, backendType, source));
    }
    override int staticAlloca(BackendType backendType) {
        return addInstr((:staticAlloca, backendType));
    }
    override int field(BackendType backendType, int source, size_t index) {
        useReg(source);
        return addInstr((:field, backendType, source, index));
    }
    override int fieldOffset(BackendType backendType, int source, int index) {
        useReg(source);
        return addInstr((:fieldOffset, backendType, source, index));
    }
    override int ptrOffset(BackendType backendType, int ptrReg, int offsetReg) {
        useReg(ptrReg);
        useReg(offsetReg);
        return addInstr((:ptrOffset, backendType, ptrReg, offsetReg));
    }
    override void store(BackendType backendType, int targetReg, int valueReg) {
        useReg(targetReg);
        useReg(valueReg);
        addInstr((:store, backendType, targetReg, valueReg));
    }
    override void ret(int reg) {
        useReg(reg);
        addBlockEnderInstr((:return_, reg));
    }
    override void branch(string label) {
        addBlockEnderInstr((:branch, label));
        this.blockId = this.blockId + 1;
    }
    override void testBranch(int reg, string thenLabel, string elseLabel) {
        useReg(reg);
        addBlockEnderInstr((:testBranch, reg, thenLabel, elseLabel));
        this.blockId = this.blockId + 1;
    }
    void flush() {
        string valueFormat(Value value, bool parens) {
            import std.string : endsWith;

            if (value.type == "") return value.value;
            if (value.exactType) return value.value;
            if (value.value == "0" && value.type.endsWith("*"))
                return "NULL";
            string castExpr = "(" ~ value.type ~ ") " ~ value.value;
            if (parens) return "(" ~ castExpr ~ ")";
            else return castExpr;
        }
        string reg2(int reg, string type) {
            auto ssaInstr = this.instrs[reg];
            if (ssaInstr.mode == SSAMode.held || ssaInstr.mode == SSAMode.persisted) {
                if (ssaInstr.mode == SSAMode.held) this.instrs[reg].mode = SSAMode.done;

                mut auto value = ssaInstr.heldValue;
                if (type != value.type) value = Value(type, value.value, false);

                return valueFormat(value, true);
            }
            assert(false);
        }
        string reg(int reg) {
            return reg2(reg, this.instrs[reg].heldValue.type);
        }
        Value regExt(int reg) {
            auto ssaInstr = this.instrs[reg];
            if (ssaInstr.mode == SSAMode.held) {
                this.instrs[reg].mode = SSAMode.done;
                return ssaInstr.heldValue;
            }
            assert(ssaInstr.mode == SSAMode.persisted);
            return ssaInstr.heldValue;
        }
        mut void delegate(size_t) flushRegsDg;
        Value dispatch(int regId) {
            auto ssaInstr = this.instrs[regId];
            mut Value ret;
            void flushRegs() { flushRegsDg(regId - 1); }
            ssaInstr.instr.case {
                (:arg, int index): {
                    string typestr = typeFmt(mod, this.args[index]);
                    ret = Value(typestr, "arg" ~ itoa(index), false);
                }
                (:intLiteral, long value): {
                    ret = Value("int", ltoa(value), true);
                }
                (:shortLiteral, int value): {
                    ret = Value("short", itoa(value), true);
                }
                (:byteLiteral, int value): {
                    ret = Value("char", itoa(value), true);
                }
                (:longLiteral, long value): {
                    ret = Value("long long int", ltoa(value), true);
                }
                (:floatLiteral, float value): {
                    ret = Value("float", ftoa(value), true);
                }
                (:wordLiteral, Platform, long value): {
                    ret = Value("int", ltoa(value), true);
                }
                (:stringLiteral, string text): {
                    mut string escapedText;
                    // TODO ord()
                    for (int i <- 0 .. text.length) {
                        if (text[i .. i + 1] == "\"") escapedText ~= "\\\"";
                        else if (text[i .. i + 1] == "\\") escapedText ~= "\\\\";
                        else if (text[i .. i + 1] == "\r") escapedText ~= "\\r";
                        else if (text[i .. i + 1] == "\n") escapedText ~= "\\n";
                        else if (text[i .. i + 1] == "\0") escapedText ~= "\\0";
                        else escapedText ~= text[i .. i + 1];
                    }
                    ret = Value("char*", "\"" ~ escapedText ~ "\"", true);
                }
                (:zeroLiteral, BackendType type): {
                    if (!type.instanceOf(BackendVoidType)) {
                        string typestr = typeFmt(mod, type);
                        mut string init = "0";
                        if (type.instanceOf(BackendStructType)) init = "{0}";
                        ret = Value(typestr, init, false);
                    }
                    else ret = Value("", "", true);
                }
                (:structLiteral, BackendType struct_, int[] regs): {
                    string typestr = typeFmt(mod, struct_);
                    string fields = [join ", " reg(a) for a in regs];
                    ret = Value(typestr, "{" ~ fields ~ "}", false);
                }
                (:symbolList, string name): {
                    ret = Value("void*", name, true);
                }
                (:binOp, string op, BackendType type, int left, int right): {
                    mut string typestr = typeFmt(mod, type);
                    if (isBooleanOp(op)) {
                        typestr = "int";
                    }
                    ret = Value(typestr, "(" ~ reg(left) ~ " " ~ op ~ " " ~ reg(right) ~ ")", true);
                }
                (:bitCast, int from, BackendType to): {
                    string typestr = typeFmt(mod, to);
                    auto from = regExt(from);

                    ret = Value(typestr, from.value, false);
                }
                (:zeroExtend, int value, BackendType to): {
                    // TODO this is not zero extend... does it matter for the compiler?
                    string type = typeFmt(mod, to);
                    ret = Value(type, reg(value), true);
                }
                (:signExtend, int value, BackendType to): {
                    // TODO revisit when we have unsigned types
                    string type = typeFmt(mod, to);
                    ret = Value(type, reg(value), true);
                }
                (:trunc, int value, BackendType to): {
                    string type = typeFmt(mod, to);
                    ret = Value(type, reg(value), false);
                }
                (:intToFloat, int regId): {
                    ret = Value("float", reg(regId), true);
                }
                (:floatToInt, int regId): {
                    ret = Value("int", reg(regId), false);
                }
                (:callInstr, BackendType retType, string name, int[] args): {
                    string argstr = [join ", " reg(a) for a in args];
                    flushRegs;
                    if (retType.instanceOf(BackendVoidType)) {
                        ret = Value("", name ~ "(" ~ argstr ~ ")", true);
                    } else {
                        string type = typeFmt(mod, retType);
                        ret = Value(type, name ~ "(" ~ argstr ~ ")", true);
                    }
                }
                (:getFuncPtr, string name): {
                    ret = Value("", name, false);
                }
                (:callFuncPtr, BackendType type, int regId, int[] args): {
                    auto backendFpType = type.instanceOf(BackendFunctionPointerType);
                    assert(!!backendFpType);
                    auto retType = backendFpType.ret;
                    string argstr = [join ", " reg(a) for a in args];
                    string target = reg(regId);
                    flushRegs;
                    if (retType.instanceOf(BackendVoidType)) {
                        ret = Value("", target ~ "(" ~ argstr ~ ")", true);
                    } else {
                        string typestr = typeFmt(mod, retType);
                        ret = Value(typestr, target ~ "(" ~ argstr ~ ")", true);
                    }
                }
                (:load, BackendType type, int regId): {
                    if (!type.instanceOf(BackendVoidType)) {
                        string type = typeFmt(mod, type);
                        ret = Value(type, "*" ~ reg(regId), true);
                    } else ret = Value("", "", true);
                }
                (:staticAlloca, BackendType type): {
                    flushRegs; // TODO is this right?
                    if (!type.instanceOf(BackendVoidType)) {
                        string typefmt = typeFmt(mod, type);
                        mut string init = "0";
                        if (type.instanceOf(BackendStructType)) init = "{0}";
                        this.print(typefmt ~ " reg" ~ itoa(regId) ~ "_frame = " ~ init ~ ";");
                        ret = Value(typefmt ~ "*", "&reg" ~ itoa(regId) ~ "_frame", true);
                    } else ret = Value("", "", true);
                }
                (:field, BackendType type, int regId, size_t index): {
                    auto backendStructType = type.instanceOf(BackendStructType);
                    assert(!!backendStructType);

                    string typefmt = typeFmt(mod, backendStructType.members[index]);
                    ret = Value(typefmt, "(" ~ reg(regId) ~ ")._" ~ ltoa(index), true);
                }
                (:fieldOffset, BackendType type, int regId, int index): {
                    auto backendStructType = type.instanceOf(BackendStructType);
                    assert(!!backendStructType);

                    string typefmt = typeFmt(mod, backendStructType) ~ "*";
                    string memberfmt = typeFmt(mod, backendStructType.members[index]);
                    ret = Value(memberfmt ~ "*", "&(" ~ reg2(regId, typefmt) ~ ")->_" ~ itoa(index), true);
                }
                (:ptrOffset, BackendType type, int ptrReg, int offsetReg): {
                    string typefmt = typeFmt(mod, type) ~ "*";
                    ret = Value(
                        typefmt,
                        "&(" ~ reg2(ptrReg, typefmt) ~ ")"
                            ~ "[" ~ reg(offsetReg) ~ "]",
                        true);
                }
                (:store, BackendType type, int targetReg, int valueReg): {
                    auto targetReg = reg(targetReg);
                    auto valueReg = reg(valueReg);
                    flushRegs;
                    string typeStr = typeFmt(mod, type);
                    if (!type.instanceOf(BackendVoidType))
                        this.print("*(" ~ typeStr ~ "*) " ~ targetReg
                            ~ " = " ~ valueReg ~ ";");
                    ret = Value("", "", true);
                }
                (:return_, int regId): {
                    if (this.ret_.instanceOf(BackendVoidType)) {
                        this.print("return;");
                    } else {
                        this.print("return " ~ reg(regId) ~ ";");
                    }
                    flushRegs;
                    ret = Value("", "", true);
                }
                (:setLabel, string label): {
                    flushRegs;
                    this.print(label ~ ":;");
                    ret = Value("", "", true);
                }
                (:branch, string label): {
                    flushRegs;
                    this.print("goto " ~ label ~ ";");
                    ret = Value("", "", true);
                }
                (:testBranch, int regId, string thenLabel, string elseLabel): {
                    auto testReg = reg(regId);
                    flushRegs;
                    this.print("if (" ~ testReg ~ ") "
                        ~ "goto " ~ thenLabel ~ "; "
                        ~ "else goto " ~ elseLabel ~ ";");
                    ret = Value("", "", true);
                }
            }
            return ret;
        }
        void persistReg(int regId) {
            mut Value value;
            auto ssaInstr = this.instrs[regId];
            if (ssaInstr.mode == SSAMode.held) {
                value = ssaInstr.heldValue;
            } else {
                assert(ssaInstr.mode == SSAMode.pending);
                value = dispatch(regId);
            }
            if (value.type == "") {
                if (value.value != "")
                    this.print(value.value ~ ";");
            } else {
                import std.string : startsWith;

                mut string init; init = value.value;
                if (!init.startsWith("{")) init = valueFormat(value, false);
                this.print(value.type ~ " reg" ~ itoa(regId) ~ " = " ~ init ~ ";");
            }
            this.instrs[regId].mode = SSAMode.persisted;
            this.instrs[regId].heldValue = Value(value.type, "reg" ~ itoa(regId), true);
        }
        void flushRegsImpl(size_t limit) {
            for (int regId <- 0 .. limit) {
                auto ssaInstr = this.instrs[regId];
                if (ssaInstr.mode == SSAMode.held) {
                    persistReg(regId);
                }
            }
        }
        flushRegsDg = &flushRegsImpl;
        for (int regId <- 0 .. this.instrs.length) {
            auto ssaInstr = this.instrs[regId];
            assert(ssaInstr.mode == SSAMode.pending);
            if (ssaInstr.uses == 1) {
                auto value = dispatch(regId);
                this.instrs[regId].mode = SSAMode.held;
                this.instrs[regId].heldValue = value;
            } else {
                persistReg(regId);
            }
        }
        flushRegsImpl(this.instrs.length);
    }
    override void done() {
        flush;
        mut string argstr = "(";
        this.print("/*unreachable*/");
        for (int i <- 0 .. this.args.length) {
            if (i) argstr ~= ", ";
            argstr ~= typeFmt(mod, this.args[i]) ~ " arg" ~ itoa(i);
        }
        argstr ~= ")";
        string retstr = typeFmt(mod, this.ret_);
        this.mod.output.print(retstr ~ " " ~ this.name ~ argstr ~ "{");
        auto funtext = this.output.text;
        this.mod.output.print(funtext);
        this.mod.output.print("}");
    }
}

class LineAppender
{
    string buffer;
    size_t used;
    this() {
        this.buffer = new string(128);
    }
    void appends(string msg) {
        this.expand(this.used + msg.length);
        memcpy(&this.buffer[this.used], msg.ptr, msg.length);
        this.used = this.used + msg.length;
    }
    void appendi(int i) {
        this.appends(itoa(i)); // TODO
    }
    void expand(size_t newLength) {
        while (newLength > this.buffer.length)
        {
            auto newBuf = new string(this.buffer.length * 2);
            for (int i <- 0 .. this.used)
                newBuf[i] = this.buffer[i];
            this.buffer = newBuf;
        }
    }
    string flush() {
        string result = new string(this.used);
        memcpy(result.ptr, this.buffer.ptr, this.used);
        this.used = 0;
        return result;
    }
}

class LineWriter
{
    string[] lines;
    int length;
    LineAppender line;
    this() {
        this.line = new LineAppender;
    }
    void print(string msg) {
        this.line.appends(msg);
        this.endl;
    }
    void appendsi(string s, int i)
    {
        this.line.appends(s);
        this.line.appendi(i);
    }
    void appendsis(string s1, int i, string s2)
    {
        this.line.appends(s1);
        this.line.appendi(i);
        this.line.appends(s2);
    }
    void append(string a)
    {
        this.line.appends(a);
    }
    void append2s(string a, string b)
    {
        this.line.appends(a);
        this.line.appends(b);
    }
    void append3s(string a, string b, string c)
    {
        this.line.appends(a);
        this.line.appends(b);
        this.line.appends(c);
    }
    void append5s(string a, string b, string c, string d, string e)
    {
        this.line.appends(a);
        this.line.appends(b);
        this.line.appends(c);
        this.line.appends(d);
        this.line.appends(e);
    }
    void append6s(string a, string b, string c, string d, string e, string f)
    {
        this.append5s(a, b, c, d, e);
        this.line.appends(f);
    }
    void endl() {
        this.line.appends("\n");
        this.append_(this.line.flush);
    }
    void append_(string line) {
        if (this.length == this.lines.length) {
            mut size_t newLen = this.lines.length * 2;
            if (newLen == 0) newLen = 1;
            auto newLines = new string[](newLen);
            for (int i <- 0 .. this.length) newLines[i] = this.lines[i];
            this.lines = newLines;
        }
        this.lines[this.length] = line;
        this.length = this.length + 1;
    }
    string text()
    {
        mut size_t sum;
        for (int i <- 0 .. this.length)
            sum += this.lines[i].length;
        string res = new char[](sum);
        mut size_t offset = 0;
        for (int i <- 0 .. this.length)
        {
            string line = this.lines[i];
            memcpy(&res[offset], line.ptr, line.length);
            offset += line.length;
        }
        assert(offset == sum);
        return res;
    }
}

void defineCIntrinsics(CBackendModule mod, Platform platform) {
    BackendType voidp = platform.voidp;
    BackendType sizet = platform.nativeWordType;
    {
        auto argTypes = new BackendType[](5);
        argTypes[0] = voidp;
        argTypes[1] = voidp;
        argTypes[2] = sizet;
        argTypes[3] = sizet;
        argTypes[4] = sizet;
        mod.declare("_arraycmp", new BackendIntType, argTypes);
    }
    mod.declare("cxruntime_ptr_test", new BackendIntType, [voidp]);
    mod.declare("cxruntime_alloc", voidp, [sizet]);
}
