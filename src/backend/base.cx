module backend.base;

import helpers;

abstract class BackendFunction
{
    NamedReg[] namedRegs;

    abstract int arg(int index) { assert(false); }
    abstract int shortLiteral(int value) { assert(false); }
    abstract int byteLiteral(int value) { assert(false); }
    abstract int intLiteral(long value) { assert(false); }
    abstract int longLiteral(long value) { assert(false); }
    abstract int wordLiteral(Platform platform, long value) { assert(false); }
    abstract int floatLiteral(float value) { assert(false); }
    abstract int stringLiteral(string text) { assert(false); }
    abstract int voidLiteral() { assert(false); }
    abstract int zeroLiteral(BackendType type) { assert(false); }
    abstract int structLiteral(BackendType struct_, int[] regs) { assert(false); }
    abstract int symbolList(string name) { assert(false); }
    abstract int binop(string op, BackendType type, int left, int right) { assert(false); }
    abstract int bitcast(int from, BackendType to) { assert(false); }
    abstract int zeroExtend(int value, BackendType to) { assert(false); }
    abstract int signExtend(int value, BackendType to) { assert(false); }
    abstract int trunc(int value, BackendType to) { assert(false); }
    abstract int intToFloat(int reg) { assert(false); }
    abstract int floatToInt(int reg) { assert(false); }
    abstract int call(BackendType ret, string name, int[] args) { assert(false); }
    abstract int getFuncPtr(string name) { assert(false); }
    abstract int callFuncPtr(BackendType type, int reg, int[] args) { assert(false); }
    abstract int load(BackendType backendType, int reg) { assert(false); }
    // replacement for the previously used savestack/alloca/restorestack dance
    // return an alloca pointer, but it's the same pointer every time we pass over this instr
    abstract int staticAlloca(BackendType backendType) { assert(false); }
    abstract int field(BackendType backendType, int reg, int index) { assert(false); }
    abstract int fieldOffset(BackendType backendType, int reg, size_t index) { assert(false); }
    abstract int ptrOffset(BackendType backendType, int ptrReg, int offsetReg) { assert(false); }
    abstract void store(BackendType backendType, int target_reg, int value_reg) { assert(false); }
    abstract void ret(int reg) { assert(false); }
    abstract void branch(string label) { assert(false); }
    abstract void testBranch(int reg, string thenLabel, string elseLabel) { assert(false); }
    abstract void setLabel(string label) { assert(false); }
    abstract string getLabel() { assert(false); }
    // call when the function is finished
    void done() { }

    bool hasNamedReg(string name) {
        for (int i = 0; i < namedRegs.length; i += 1)
            if (namedRegs[i].name == name) return true;
        return false;
    }

    int getNamedReg(string name) {
        for (int i = 0; i < namedRegs.length; i += 1)
            if (namedRegs[i].name == name) return namedRegs[i].value;
        assert(false);
    }

    void setNamedReg(string name, int value) {
        assert(!hasNamedReg(name));
        namedRegs ~= NamedReg(name, value);
    }

    bool isBooleanOp(string op) {
        return op == "==" || op == "!=" || op == "<" || op == ">" || op == "<=" || op == ">=";
    }
}

struct NamedReg
{
    string name;
    int value;
}

// compilation unit
abstract class BackendModule
{
    string[] alreadySeen;

    abstract void declare(string name, BackendType ret, BackendType[] args) { assert(false); }
    abstract bool declared(string name) { assert(false); }
    abstract BackendFunction define(
        string name, string decoration, BackendType ret, BackendType[] args, BackendLocation loc)
    {
        assert(false);
    }
    abstract void declareSymbolList(string name, size_t length) { assert(false); }
    abstract void defineSymbolList(string name, string[] symbols) { assert(false); }

    // allow to only emit a symbol once per module
    // TODO is this still necessary with declared()?
    bool once(string identifier)
    {
        // TODO use a hash
        for (int i = 0; i < this.alreadySeen.length; i += 1)
            if (this.alreadySeen[i] == identifier)
                return false;
        this.alreadySeen ~= identifier;
        return true;
    }

    // called before emitting, or whatever you do with it
    void done() { }
}

struct BackendLocation
{
    string file;
    int line;
    int column;
}

abstract class Backend
{
    abstract BackendModule createModule(Platform platform, BackendLocation loc, bool forMacro) { assert(false); }
}

struct PlatformFlags
{
}

class Platform
{
    BackendType nativeWordType;

    PlatformFlags platformFlags;

    this(this.nativeWordType, this.platformFlags) {
        this.void_ = new BackendVoidType;
        this.voidp = new BackendPointerType(this.void_);
    }
    // cached type instances
    BackendType void_;
    BackendType voidp;
}

abstract class BackendType
{
    abstract string repr() { assert(false); }
    abstract int size(Platform platform) { assert(false); }
    abstract int alignment(Platform platform) { assert(false); }
    abstract bool same(BackendType other) { assert(false); }
}

class BackendLongType : BackendType
{
    this() { }
    override string repr() { return "long"; }
    override int size(Platform platform) { return 8; }
    override int alignment(Platform platform) { return 8; }
    override bool same(BackendType other) { return !!other.instanceOf(BackendLongType); }
}

class BackendIntType : BackendType
{
    this() { }
    override string repr() { return "int"; }
    override int size(Platform platform) { return 4; }
    override int alignment(Platform platform) { return 4; }
    override bool same(BackendType other) { return !!other.instanceOf(BackendIntType); }
}

class BackendShortType : BackendType
{
    this() { }
    override string repr() { return "short"; }
    override int size(Platform platform) { return 2; }
    override int alignment(Platform platform) { return 2; }
    override bool same(BackendType other) { return !!other.instanceOf(BackendShortType); }
}

class BackendCharType : BackendType
{
    this() { }
    override string repr() { return "char"; }
    override int size(Platform platform) { return 1; }
    override int alignment(Platform platform) { return 1; }
    override bool same(BackendType other) { return !!other.instanceOf(BackendCharType); }
}

class BackendVoidType : BackendType
{
    this() { }
    override string repr() { return "void"; }
    override int size(Platform platform) { return 0; }
    override int alignment(Platform platform) { return 1; }
    override bool same(BackendType other) { return !!other.instanceOf(BackendVoidType); }
}

class BackendFloatType : BackendType
{
    this() { }
    override string repr() { return "float"; }
    override int size(Platform platform) { return 4; }
    override int alignment(Platform platform) { return 4; }
    override bool same(BackendType other) { return !!other.instanceOf(BackendFloatType); }
}

class BackendPointerType : BackendType
{
    BackendType target;

    this(BackendType target) { this.target = target; }

    override string repr() { return this.target.repr() ~ "*"; }
    override int size(Platform platform) { return platform.nativeWordType.size(platform); }
    override int alignment(Platform platform) { return platform.nativeWordType.size(platform); }
    override bool same(BackendType other) {
        auto otherPtr = other.instanceOf(BackendPointerType);
        return otherPtr && this.target.same(otherPtr.target);
    }
}

class BackendFunctionPointerType : BackendType
{
    BackendType ret;
    BackendType[] args;

    this(BackendType ret, BackendType[] args) {
        this.ret = ret;
        this.args = args;
    }

    override string repr() { return "TODO fp"; }
    override int size(Platform platform) { return platform.nativeWordType.size(platform); }
    override int alignment(Platform platform) { return platform.nativeWordType.size(platform); }
    override bool same(BackendType other) {
        auto otherFp = other.instanceOf(BackendFunctionPointerType);
        if (!otherFp || !this.ret.same(otherFp.ret) || this.args.length != otherFp.args.length)
            return false;
        for (int i = 0; i < this.args.length; i += 1)
            if (!this.args[i].same(otherFp.args[i])) return false;
        return true;
    }
}

class BackendStructType : BackendType
{
    BackendType[] members;

    this(BackendType[] members) { this.members = members; }

    override string repr() { return "TODO struct"; }

    override int size(Platform platform) {
        int size, alignment;
        calcPrefix(platform, this.members, &size, &alignment);

        return roundToNext(size, alignment);
    }

    override int alignment(Platform platform) {
        int size, alignment;
        calcPrefix(platform, this.members, &size, &alignment);

        return alignment;
    }

    override bool same(BackendType other) {
        auto otherStr = other.instanceOf(BackendStructType);
        if (!otherStr || this.members.length != otherStr.members.length)
            return false;
        for (int i = 0; i < this.members.length; i += 1)
            if (!this.members[i].same(otherStr.members[i])) return false;
        return true;
    }
}

class BackendSpacerType : BackendType
{
    int size_;
    int alignment_;

    this(int size, int alignment) { this.size_ = size; this.alignment_ = alignment; }

    override string repr() { return "TODO spacer"; }
    override int size(Platform platform) { return this.size_; }
    override int alignment(Platform platform) { return this.alignment_; }
    override bool same(BackendType other) {
        auto otherSpacer = other.instanceOf(BackendSpacerType);
        return otherSpacer && this.size_ == otherSpacer.size_ && this.alignment_ == otherSpacer.alignment_;
    }
}

class BackendStaticArrayType : BackendType
{
    BackendType element;
    int length;

    this(BackendType element, int length) { this.element = element; this.length = length; }

    override string repr() { return element.repr() ~ "[" ~ itoa(length) ~ "]"; }
    override int size(Platform platform) { return element.size(platform) * length; }
    override int alignment(Platform platform) { return this.element.alignment(platform); }
    override bool same(BackendType other) {
        auto otherSA = other.instanceOf(BackendStaticArrayType);
        return otherSA && this.length == otherSA.length && this.element.same(otherSA.element);
    }
}

void calcPrefix(Platform platform, BackendType[] members, int* structSize, int* structAlign)
{
    *structSize = 0;
    *structAlign = 1;
    for (int i = 0; i < members.length; i += 1) {
        auto member = members[i];
        int alignment = member.alignment(platform);
        int size = member.size(platform);
        // round to next <alignment>
        *structSize = roundToNext(*structSize, alignment) + size;
        if (alignment > *structAlign) *structAlign = alignment;
    }
}

int roundToNext(int size, int alignment)
{
    size = size + alignment - 1;
    // alignment is a power of two, so alignment - 1 is a mask
    // size -= size % alignment;
    size = size - (size & (alignment - 1));
    return size;
}
