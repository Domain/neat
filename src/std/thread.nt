module std.thread;

macro import neat.macros.assert;

import c.pthread;

pragma(lib, "pthread");

class Mutex
{
    pthread_mutex_t mutex;
    bool isLocked;

    this() {
        pthread_mutex_init(&mutex, null);
        isLocked = false;
    }
    void lock() {
        pthread_mutex_lock(&mutex);
        isLocked = true;
    }
    LockGuard locked() {
        return LockGuard(this);
    }
    UnlockGuard unlocked() {
        return UnlockGuard(this);
    }
    void unlock() {
        isLocked = false;
        pthread_mutex_unlock(&mutex);
    }
}

struct LockGuard
{
    Mutex mutex;
    void onEnter() {
        mutex.lock;
    }
    void onExit() {
        mutex.unlock;
    }
}

struct UnlockGuard
{
    Mutex mutex;
    void onEnter() {
        mutex.unlock;
    }
    void onExit() {
        mutex.lock;
    }
}

unittest
{
    auto mutex = new Mutex;

    assert(!mutex.isLocked);
    with (mutex.locked) {
        assert(mutex.isLocked);
    }
    assert(!mutex.isLocked);
}

unittest
{
    auto mutex = new Mutex;

    void returnTest() {
        with (mutex.locked) {
            return;
        }
    }
    returnTest;
    assert(!mutex.isLocked);
}

class CondVar
{
    pthread_cond_t cond;

    Mutex mutex;

    this(this.mutex) { pthread_cond_init(&cond, null); }
    void wait() {
        assert(mutex.isLocked);
        mutex.isLocked = false;
        pthread_cond_wait(&cond, &this.mutex.mutex);
        mutex.isLocked = true;
    }
    void signal() { pthread_cond_signal(&cond); }
    void broadcast() { pthread_cond_broadcast(&cond); }
}

template Waitable(T)
{
    class Waitable
    {
        Mutex mutex;
        CondVar signal;
        T value;
        this(this.value) {
            this.mutex = new Mutex;
            this.signal = new CondVar(this.mutex);
        }
        void set(T value) {
            with (mutex.locked) {
                this.value = value;
                signal.broadcast;
            }
        }
        void update(T delegate(T) action) {
            with (mutex.locked) {
                this.value = action(this.value);
                signal.broadcast;
            }
        }
        void waitFor(bool delegate(T) condition) {
            T id(T value) { return value; }
            waitReact(condition, &id);
        }
        void waitReact(bool delegate(T) condition, T delegate(T) react) {
            with (mutex.locked) while (true) {
                if (condition(this.value)) {
                    this.value = react(this.value);
                    signal.broadcast;
                    return;
                }
                signal.wait;
            }
        }
    }
}

class Semaphore
{
    Waitable!int waitable;

    this(int i) { this.waitable = new Waitable!int(i); }

    void acquire() {
        bool greaterZero(int i) { return i > 0; }
        int decrement(int i) { return i - 1; }
        waitable.waitReact(&greaterZero, &decrement);
    }
    void release() {
        int increment(int i) { return i + 1; }
        waitable.update(&increment);
    }
}

abstract class Task
{
    abstract void run() { assert(false); }
}

class Thread
{
    pthread_t thr;

    void delegate() run;
    this(this.run) { }
    void start() {
        pthread_create(&thr, null, &call_thread_dg, &run);
    }
}

class ThreadPool
{
    Mutex mutex;
    Task[] tasks;
    Thread[] threads;
    int queuedTasks;
    Semaphore waitingTasks;
    Semaphore doneTasks;

    this(int i) {
        this.mutex = new Mutex;
        this.waitingTasks = new Semaphore(0);
        this.doneTasks = new Semaphore(0);
        for (j in 0 .. i) {
            auto thread = new Thread(&run);
            thread.start;
            threads ~= thread;
        }
    }
    private void run() {
        while (true) {
            // TODO why is this broken, probably double calls getTask
            // getTask.run;
            auto task = getTask;
            task.run;
            this.doneTasks.release;
        }
    }
    void waitComplete(void delegate(float) progress) {
        mut int tasks;
        with (this.mutex.locked) {
            tasks = this.queuedTasks;
            this.queuedTasks = 0;
        }
        for (i in 0 .. tasks) {
            this.doneTasks.acquire;
            progress((cast(int) i + 1) * 1.0f / tasks);
        }
    }
    void addTask(Task task) {
        with (mutex.locked) {
            tasks ~= task;
            this.queuedTasks += 1;
        }
        this.waitingTasks.release;
    }
    private Task getTask()  {
        this.waitingTasks.acquire;
        with (mutex.locked) {
            auto ret = tasks[$ - 1];
            tasks = tasks[0 .. $ - 1];
            return ret;
        }
    }
}
