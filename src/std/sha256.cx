/*
 * FIPS 180-2 SHA-224/256/384/512 implementation
 * Last update: 2021-04-19
 * Issue date:  04/30/2005
 *
 * Copyright (C) 2013, Con Kolivas <kernel@kolivas.org>
 * Copyright (C) 2005, 2007 Olivier Gay <olivier.gay@a3.epfl.ch>
 * All rights reserved.
 *
 * Ported to cx by Mathis Beer 2021-04-19. Any errors are certainly mine.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
module std.sha256;

alias SHA256_BLOCK_SIZE = 512 / 8;

final class Sha256
{
    int[] hash;
    ubyte[] block;
    int[] k;
    int len;
    int tot_len;
    int[] w;
    int[] wv;
    this() {
        this.block = new ubyte[](2 * SHA256_BLOCK_SIZE);
        this.hash = [
            0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
            0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,
        ];
        this.k = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
            0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
            0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
            0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
            0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
            0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
            0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
            0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
            0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
        ];
        this.w = new int[](64);
        this.wv = new int[](8);
    }

    void update(ubyte[] data) {
        int min(int a, int b) {
            if (a < b) return a;
            return b;
        }

        int tmp_len = SHA256_BLOCK_SIZE - this.len;
        int rem_len = min(cast(int) data.length, tmp_len);

        for (int i <- 0 .. rem_len)
            this.block[this.len + i] = data[i];

        if (this.len + data.length < SHA256_BLOCK_SIZE) {
            this.len += cast(int) data.length;
            return;
        }

        int new_len = cast(int) data.length - rem_len;
        int block_nb = new_len / SHA256_BLOCK_SIZE;

        auto shifted = data[rem_len .. $];

        transf(this.block, 1);
        transf(shifted, block_nb);

        int rem_len2 = new_len % SHA256_BLOCK_SIZE;

        for (int i <- 0 .. rem_len2)
            this.block[i] = shifted[(block_nb << 6) + i];
        this.len = rem_len2;
        this.tot_len += (block_nb + 1) << 6;
    }

    void scr(int i) {
        w[i] = f4(w[i - 2]) + w[i - 7] + f3(w[i - 15]) + w[i - 16];
    }

    void transf(ubyte[] data, int block_nb) {
        for (int i <- 0 .. block_nb) {
            int offset = i << 6;
            auto sub_block = data[offset .. offset + 64];
            for (int j <- 0 .. 16) {
                w[j] = pack32(sub_block[j * 4 .. (j + 1) * 4]);
            }
            for (int j <- 16 .. 64) {
                scr(j);
            }
            for (int j <- 0 .. 8) {
                wv[j] = hash[j];
            }
            for (int j <- 0 .. 64) {
                auto t1 = wv[7] + f2(wv[4]) + ch(wv[4], wv[5], wv[6]) + k[j] + w[j];
                auto t2 = f1(wv[0]) + maj(wv[0], wv[1], wv[2]);

                wv[7] = wv[6];
                wv[6] = wv[5];
                wv[5] = wv[4];
                wv[4] = wv[3] + t1;
                wv[3] = wv[2];
                wv[2] = wv[1];
                wv[1] = wv[0];
                wv[0] = t1 + t2;
            }
            for (int j <- 0 .. 8) {
                hash[j] += wv[j];
            }
        }
    }

    ubyte[] finalize() {
        mut int block_nb = 1;
        if ((SHA256_BLOCK_SIZE - 9) < (this.len % SHA256_BLOCK_SIZE)) block_nb += 1;

        int len_b = (this.tot_len + this.len) << 3;
        int pm_len = block_nb << 6;

        for (int i <- 0 .. pm_len - this.len)
            this.block[this.len + i] = 0;
        this.block[this.len] = 0x80;
        unpack32(len_b, this.block[pm_len - 4 .. pm_len]);
        transf(this.block, block_nb);

        ubyte[] ret = new ubyte[](32);
        for (int i <- 0 .. 8)
            unpack32(this.hash[i], ret[i * 4 .. i * 4 + 4]);
        return ret;
    }
}

int rotr(int x, int n) {
    return ((x >>> n) | (x << (32 - n)));
}

// TODO
int invert(int i) {
    return -i - 1;
}

int xor(int a, int b) {
    return (a | b) & (a.invert | b.invert);
}

int f1(int x) {
    return rotr(x, 2).xor(rotr(x, 13)).xor(rotr(x, 22));
}

int f2(int x) {
    return rotr(x, 6).xor(rotr(x, 11)).xor(rotr(x, 25));
}

int f3(int x) {
    return rotr(x, 7).xor(rotr(x, 18)).xor(x >>> 3);
}

int f4(int x) {
    return rotr(x, 17).xor(rotr(x, 19)).xor(x >>> 10);
}

int ch(int x, int y, int z) {
    return (x & y).xor(x.invert & z);
}

int maj(int x, int y, int z) {
    return (x & y).xor(x & z).xor(y & z);
}

void unpack32(int i, ubyte[] target) {
    target[3] = cast(ubyte) i;
    target[2] = cast(ubyte) (i >>> 8);
    target[1] = cast(ubyte) (i >>> 16);
    target[0] = cast(ubyte) (i >>> 24);
}

int pack32(ubyte[] source) {
    return cast(int) source[3] | (cast(int) source[2] << 8)
        | (cast(int) source[1] << 16) | (cast(int) source[0] << 24);
}
