module std.math;

macro import neat.macros.assert;

alias pi = 3.1415926538;
alias PI = pi;
alias Ï€ = pi;

pragma(lib, "m");

extern(C) float logf(float);
extern(C) float fabsf(float);
extern(C) float expf(float);
extern(C) float sinf(float);
extern(C) float cosf(float);
extern(C) float acosf(float);
extern(C) float tanf(float);
// extern(C) float atan2f(float y, float x);
extern(C) float sqrtf(float);
extern(C) float powf(float, float);

float sin(float f) { return sinf(f); }
float cos(float f) { return cosf(f); }
float acos(float f) { return acosf(f); }
float tan(float f) { return tanf(f); }
float abs(float f) { return fabsf(f); }
float exp(float f) { return expf(f); }
float pow(float x, float y) { return powf(x, y); }
// float atan2(float y, float x) { return atan2f(y, x); }
// see http://dspguru.com/dsp/tricks/fixed-point-atan2-with-self-normalization/ thanks SO
float atan2(float y, float x) {
   float coeff_1 = 3.1415926537f;
   float coeff_2 = 3*coeff_1;
   float abs_y = fabsf(y)+0.000001f;
   mut float angle;
   if (x >= 0) {
      float r = (x - abs_y) / (x + abs_y);
      angle = coeff_1 - coeff_1 * r;
   } else {
      float r = (x + abs_y) / (abs_y - x);
      angle = coeff_2 - coeff_1 * r;
   }
   if (y < 0) return -angle;
   else return angle;
}
float sqrt(float f) { return sqrtf(f); }
float max(float a, float b) { if (a > b) return a; return b; }

unittest {
    assert(max(2, 3) == 3);
    assert(max(-4, -5) == -4);
}

float min(float a, float b) { if (a < b) return a; return b; }

unittest {
    assert(min(2, 3) == 2);
    assert(min(-4, -5) == -5);
}
