module std.time;

import c.sys.time;
import neat.runtime : assert;

struct Time
{
    timeval val;
    float secondsSince(Time other) {
        return cast(int) (val.time_t - other.val.time_t)
            + (cast(int) val.suseconds_t - cast(int) other.val.suseconds_t) / 1000000.0f;
    }
    static Time now() {
        Time res;
        gettimeofday(&res.val, null);
        return res;
    }
}

class Stopwatch {
    // Seconds from previous runs.
    float seconds;
    (:running, Time | :stopped) state;
    this() {
        this.seconds = 0;
        this.state = :stopped;
    }
    /// Stop the stopwatch.
    bool stopped() {
        return this.state == :stopped;
    }
    void start() {
        assert(stopped);
        state = (:running, Time.now);
    }
    void stop() {
        assert(!stopped);
        // TODO: __undefined
        Time __undefined() { assert(false); }
        auto startTime = state.case((:running, Time t): t, :stopped: __undefined);
        auto stopTime = Time.now;
        state = :stopped;
        seconds += stopTime.secondsSince(startTime);
    }
    /// Resets the stopwatch; returns another stopwatch stopped at the previous time.
    Stopwatch split() {
        this.state.case {
            (:stopped):
                auto copy = new Stopwatch;
                copy.seconds = this.seconds;
                this.seconds = 0;
                return copy;
            (:running, Time start):
                auto splitPoint = Time.now;
                auto result = new Stopwatch;
                result.seconds = this.seconds + splitPoint.secondsSince(start);
                this.seconds = 0;
                this.state = (:running, splitPoint);
                return result;
        }
    }
}
