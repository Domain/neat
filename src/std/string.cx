module std.string;

// TODO import or private
extern(C) void* malloc(size_t size);
extern(C) void* memcpy(void* target, void* source, size_t length);
extern(C) size_t strlen(char*);
extern(C) string cxruntime_itoa(int i);
extern(C) string cxruntime_ltoa(long);
extern(C) string cxruntime_ftoa(float f);
extern(C) int cxruntime_atoi(string);
extern(C) float cxruntime_atof(string);

char* toStringz(string s) {
    char* ret = malloc(s.length + 1);
    memcpy(ret, s.ptr, s.length);
    ret[s.length] = "\0"[0];
    return ret;
}

string cToString(char* ptr) {
    auto len = strlen(ptr);
    auto ret = new char[](len);
    memcpy(ret.ptr, ptr, len);
    return ret;
}

bool startsWith(string haystack, string needle) {
    if (haystack.length < needle.length) return false;
    return haystack[0 .. needle.length] == needle;
}

bool endsWith(string haystack, string needle) {
    if (haystack.length < needle.length) return false;
    return haystack[$ - needle.length .. $] == needle;
}

string itoa(int i) { return cxruntime_itoa(i); }

string ltoa(long l) { return cxruntime_ltoa(l); }

string ftoa(float f) { return cxruntime_ftoa(f); }

int atoi(string s) { return cxruntime_atoi(s); }

float atof(string s) { return cxruntime_atof(s); }

int find(string text, string match) {
    for (int i <- 0 .. text.length - match.length + 1)
        if (text[i .. i + match.length] == match) return i;
    return -1;
}

string[] split(mut string text, string sep) {
    mut string[] result;
    while (true) {
        int pos = find(text, sep);
        if (pos == -1) {
            result ~= text;
            return result;
        }
        result ~= text[0 .. pos];
        text = text[pos + sep.length .. $];
    }
}

string join(string[] array, string sep) {
    mut string result;
    for (int i <- 0 .. array.length) {
        if (i > 0) result ~= sep;
        result ~= array[i];
    }
    return result;
}
