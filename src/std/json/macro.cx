module std.json.macro;

macro import cx.macros.assert;
macro import cx.macros.listcomprehension;

import package(compiler).cx.base;
import package(compiler).cx.parser_base;
import package(compiler).cx.parser;

import std.json;

class JsonSyntax : Macro
{
    this() { }
    override void apply(MacroArgs args) {
        auto args = args.instanceOf(ParseExpressionBaseArgs);
        if (args) {
            args.symbol = this.parse(args.parser, args.lexicalContext);
        }
    }

    ASTSymbol parse(Parser parser, LexicalContext lexicalContext)
    {
        auto loc = parser.loc();
        parser.begin;
        if (!acceptIdentifier(parser, "JSONValue") || !parser.accept("("))
        {
            parser.revert;
            return null;
        }
        auto json = jsonParseImpl(parser);
        parser.expect(")");
        parser.commit;
        return quoteJson(lexicalContext.compiler, json);
    }
}

ASTSymbol quoteJson(CompilerBase compiler, JSONValue v) {
    ASTSymbol jv(ASTSymbol sym) {
        return compiler.astCall(
            compiler.astIdentifier("JSONValue", __HERE__),
            [sym],
            __HERE__);
    }
    v.value.case {
        (:false): return compiler.astIdentifier("false", __HERE__).jv;
        (:true): return compiler.astIdentifier("true", __HERE__).jv;
        int i: return compiler.astIntLiteral(i, __HERE__).jv;
        string s: return compiler.astStringLiteral(s, __HERE__).jv;
        JSONValue[] arr: return compiler.astArrayLiteral(
            [quoteJson(compiler, a) for a in arr],
            __HERE__).jv;
        (string key, JSONValue value)[] obj:
            return compiler.astArrayLiteral(
                [compiler.astTupleLiteral([
                    compiler.astStringLiteral(a.key, __HERE__),
                    quoteJson(compiler, a.value)], __HERE__)
                for a in obj], __HERE__).jv;
    }
}

void jsonMacro(MacroState macroState)
{
    macroState.addMacro(new JsonSyntax);
}

macro(jsonMacro);

unittest
{
    auto value = JSONValue({"Hello": "World", "five": 5, "array": [6]});
    assert(value.str == "{\"Hello\": \"World\", \"five\": 5, \"array\": [6]}");
}
