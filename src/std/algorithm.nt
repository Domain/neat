module std.algorithm;

macro import neat.macros.assert;

template map(T, U) {
    MapRange!(T, U) map(T left, U right) {
        return MapRange!(T, U)(left, right);
    }
}

unittest
{
    auto a = (0 .. 5).map(a -> a * 2).array;

    assert(a == [0, 2, 4, 6, 8]);
}

template MapRange(T, U) {
    struct MapRange {
        T nextRange;
        U pred;
        bool empty() { return nextRange.empty; }
        typeof(pred(nextRange.front)) front() { return pred(nextRange.front); }
        MapRange next() { return MapRange(nextRange.next, pred); }
        size_t length() { return nextRange.length; }
    }
}

template array(T) {
    typeof(range.front)[] array(T range) {
        mut typeof(range.front)[] ret;
        for (a in range) ret ~= a;
        return ret;
    }
}
