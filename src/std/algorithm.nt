module std.algorithm;

macro import neat.macros.assert;

template map(T, U) {
    MapRange!(T, U) map(T left, U right) {
        return MapRange!(T, U)(left, right);
    }
}

unittest
{
    auto a = (0 .. 5).map(a -> a * 2);

    assert(a.length == 5);
    assert(a.array == [0, 2, 4, 6, 8]);
}

template MapRange(T, U) {
    struct MapRange {
        T nextRange;
        U pred;
        bool empty() { return nextRange.empty; }
        typeof(pred(nextRange.front)) front() { return pred(nextRange.front); }
        MapRange next() { return MapRange(nextRange.next, pred); }
        static if (__traits(hasMember, init!T, "length")) {
            size_t length() { return nextRange.length; }
        }
    }
}

template array(T) {
    typeof(range.front)[] array(T range) {
        mut typeof(range.front)[] ret;
        for (a in range) ret ~= a;
        return ret;
    }
}

template filter(T, U) {
    FilterRange!(T, U) filter(T left, U right) {
        return FilterRange!(T, U)(left, right);
    }
}

template FilterRange(T, U) {
    struct FilterRange {
        T nextRange;
        U pred;
        bool empty() {
            skip;
            return nextRange.empty;
        }
        void skip() {
            while (!nextRange.empty && !pred(nextRange.front)) {
                nextRange = nextRange.next;
            }
        }
        typeof(nextRange.front) front() { return nextRange.front; }
        FilterRange next() { return FilterRange(nextRange.next, pred); }
    }
}

unittest
{
    auto a = (0 .. 10).filter(a -> a & 1 == 0).map(a -> a / 2).array;

    assert(a == [0, 1, 2, 3, 4]);
}

private template init(T) {
    T init() {
        mut uninitialized T t;
        return t;
    }
}
