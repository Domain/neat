module std.json;

macro import cx.macros.assert;
macro import cx.macros.listcomprehension;

import std.string;

struct JSONValue
{
    (bool | float | string | JSONValue[] | (string key, JSONValue value)[]) value;
}

string str(JSONValue jv) {
    jv.value.case {
        bool b: {
            if (b) return "true";
            else return "false";
        }
        float f: return ftoa(f);
        string s: return quote(s);
        JSONValue[] array:
            return "[" ~ [join ", " v.str for v in array] ~ "]";
        (string key, JSONValue value)[] obj:
            return "{" ~ [join ", " quote(e.key) ~ ": " ~ e.value.str for e in obj] ~ "}";
    }
}

string quote(string s) {
    mut string quoted;
    for (auto ch <- s) {
        if (ch == "\""[0]) quoted ~= "\\\"";
        else quoted ~= ch;
    }
    return "\"" ~ quoted ~ "\"";
}

unittest
{
    auto value = JSONValue([("Hello", JSONValue("World"))]);
    assert(value.str == "{\"Hello\": \"World\"}");
    // TODO
    // auto value = json({ "Hello": "World" });
}
