module std.json;

macro import neat.macros.assert;
macro import neat.macros.listcomprehension;

import package(compiler).cx.parser;
import package(compiler).cx.parser_base;

import std.string;

struct JSONValue
{
    (:false | :true | int | string | JSONValue[] | (string key, JSONValue value)[]) value;

    static JSONValue parse(string str) {
        auto parser = new Parser("", str);
        auto ret = jsonParseImpl(parser);
        if (!parser.eof) parser.fail("text after json");
        return ret;
    }

    ((string key, JSONValue value)[] | :wrongType) object() {
        return value.case(
            (:false): :wrongType, (:true): :wrongType, int: :wrongType, string: :wrongType, JSONValue[]: :wrongType,
            (string key, JSONValue value)[] obj: obj);
    }

    bool isObject() {
        // FIXME object.case() once fix built
        return object().case(
            (:wrongType): false,
            (string key, JSONValue value)[]: true);
    }

    JSONValue get(string key) {
        object.case {
            (:wrongType): assert(false);
            (string key, JSONValue value)[] obj: {
                assert([any a.key == key for a in obj]);
                return [first a.value for a in obj where a.key == key else ({ assert(false); JSONValue(:false); })];
            }
        }
    }

    bool has(string key) {
        object.case {
            (:wrongType): assert(false);
            (string key, JSONValue value)[] obj:
                return [any a.key == key for a in obj];
        }
    }
}

unittest
{
    auto value = JSONValue([("Hello", JSONValue("World"))]);
    assert(value.str == "{\"Hello\": \"World\"}");
    assert(JSONValue.parse("{\"Hello\": \"World\"}").str == "{\"Hello\": \"World\"}");
    // TODO
    // auto value = JSONValue({ "Hello": "World" });
}

JSONValue jsonParseImpl(Parser parser) {
    if (parser.accept("\"")) {
        return JSONValue(parseStringLiteral(parser));
    }
    parser.parseNumber.case {
        (:failure): {}
        int value: return JSONValue(value);
    }
    if (parser.accept("[")) {
        mut JSONValue[] entries;
        if (!parser.accept("]")) while (true) {
            entries ~= jsonParseImpl(parser);
            if (parser.accept("]")) break;
            parser.expect(",");
        }
        return JSONValue(entries);
    }
    if (parser.accept("{")) {
        mut (string key, JSONValue val)[] entries;
        if (!parser.accept("}")) while (true) {
            parser.expect("\"");
            auto key = parseStringLiteral(parser);
            parser.expect(":");
            auto value = jsonParseImpl(parser);
            entries ~= (key, value);
            if (parser.accept("}")) break;
            parser.expect(",");
        }
        return JSONValue(entries);
    }
    parser.fail("unexpected input");
}

string str(JSONValue jv) {
    jv.value.case {
        (:false): return "false";
        (:true): return "true";
        int i: return itoa(i);
        string s: return quote(s);
        JSONValue[] array:
            return "[" ~ [join ", " v.str for v in array] ~ "]";
        (string key, JSONValue value)[] obj:
            return "{" ~ [join ", " quote(e.key) ~ ": " ~ e.value.str for e in obj] ~ "}";
    }
}

string quote(string s) {
    mut string quoted;
    for (auto ch <- s) {
        if (ch == "\""[0]) quoted ~= "\\\"";
        else quoted ~= ch;
    }
    return "\"" ~ quoted ~ "\"";
}

(:failure | int) parseNumber(Parser parser)
{
    parser.begin;
    mut bool negative = parser.accept("-");
    if (parser.accept("-"))
        negative = true;
    parser.strip;
    if (parser.eof || !isDigit(parser.text[0]))
    {
        parser.revert;
        return :failure;
    }
    mut string number;
    while (!parser.eof && isDigit(parser.text[0]))
    {
        number ~= parser.text[0];
        parser.drop(1);
    }
    parser.commit;
    mut int i = atoi(number);
    if (negative) i = -i;
    return i;
}

string parseStringLiteral(Parser parser)
{
    mut int matchLen;
    auto loc = parser.loc;
    string start = parser.text;
    while (parser.text[0 .. 1] != "\"") {
        if (parser.text.length == 0) {
            parser.fail("expected end of string, got end of file");
        }
        if (parser.text[0 .. 1] == "\\") {
            matchLen = matchLen + 1;
            parser.drop(1);
        }
        matchLen = matchLen + 1;
        parser.drop(1);
    }
    string str = start[0 .. matchLen];
    if (!parser.accept("\"")) {
        parser.fail("this should never happen");
    }

    return replaceEscapes(str);
}

string replaceEscapes(string text) {
    mut string result;
    mut int i;
    while (i < text.length) {
        string ch = text[i .. i + 1];
        i += 1;
        if (ch == "\\") {
            string ctl = text[i .. i + 1];
            i += 1;
            if (ctl == "\"") {
                result ~= "\"";
            } else if (ctl == "\\") {
                result ~= "\\";
            } else {
                print("Unknown control sequence \\" ~ ctl);
                assert(false);
            }
        } else {
            result ~= ch;
        }
    }
    return result;
}
