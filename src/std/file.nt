module std.file;

macro import neat.macros.assert;
macro import neat.macros.listcomprehension;

import std.string : cToString, cToStringFree, toStringz;

extern(C) void free(void*);

string dirname(string path) {
    import c.libgen : dirname;

    return path.toStringz.dirname.cToString;
}

unittest {
    assert("foo/bar.txt".dirname == "foo");
}

string basename(string path) {
    import c.libgen : basename;

    return path.toStringz.basename.cToString;
}

unittest {
    assert("foo/bar.txt".basename == "bar.txt");
}

string realpath(string path) {
    import c.stdlib : realpath;

    auto ptr = path.toStringz;
    auto ret = ptr.realpath(null).cToStringFree;

    free(ptr);
    return ret;
}

string withoutExtension(string s) {
    mut string shortened = s;
    while (shortened.length > 0 && shortened[$ - 1 .. $] != ".")
        shortened = shortened[0 .. $ - 1];
    if (shortened.length) return shortened[0 .. $ - 1]; else return s;
}

extern(C) void* fopen(char* pathname, char* mode);
extern(C) int fseek(void* stream, long offset, int whence);
extern(C) long ftell(void* stream);
extern(C) size_t fread(void* ptr, size_t size, size_t nmemb, void* stream);
extern(C) size_t fwrite(void* ptr, size_t size, size_t nmemb, void* stream);
extern(C) int fclose(void* stream);

alias SEEK_SET = 0;
alias SEEK_END = 2;

ubyte[] readFile(string file) {
    char* fn = toStringz(file);
    char* rb = toStringz("rb");
    void* f = fopen(fn, rb);
    free(rb);
    fseek(f, 0, SEEK_END);
    long fsize = ftell(f);
    fseek(f, 0, SEEK_SET);  /* same as rewind(f); */

    ubyte[] buffer = new ubyte[](fsize);
    fread(buffer.ptr, 1, fsize, f);
    fclose(f);
    free(fn);

    return buffer;
}

void writeFile(string file, ubyte[] data) {
    char* fn = toStringz(file);
    char* wb = toStringz("wb");
    void* f = fopen(fn, wb);
    free(wb);
    fwrite(data.ptr, 1, data.length, f);
    fclose(f);
    free(fn);
}

string readText(string file) {
    // TODO validate utf-8?
    // TODO cast(string)!!
    return [cast(char) a for a in file.readFile];
}

void writeText(string path, string data) {
    // TODO validate utf-8?
    // TODO cast(ubyte[])!!
    path.writeFile([cast(ubyte) a for a in data]);
}

extern(C) int access(char* pathname, int mode);

alias F_OK = 0;

bool exists(string file) {
    auto fn = toStringz(file);
    bool ret = access(fn, F_OK) != -1;
    free(fn);
    return ret;
}

void mkdir(string path) {
    import c.sys.stat : mkdir;
    auto ptr = path.toStringz;
    mkdir(ptr, 511); // 0777
    free(ptr);
}

void remove(string path) {
    import c.stdio : remove;
    auto ptr = path.toStringz;
    remove(ptr);
    free(ptr);
}
