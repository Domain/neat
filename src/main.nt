module main;

macro import neat.macros.listcomprehension;

import backend.base;
import backend.c;
import backend.llvm;
import helpers;
import neat.array;
import neat.base;
import neat.class_;
import neat.compiler;
import neat.expr;
import neat.function_;
import neat.hash;
import neat.parser_base;
import neat.stuff;
import neat.types;
import neat.unittest_;
import std.file : realpath;
import std.json;

extern(C) int getpid();
extern(C) void neat_runtime_system(string command);
extern(C) void neat_runtime_dlcall(string soname, string name, void* arg);
extern(C) bool neat_runtime_waitpid(int pid);
extern(C) int neat_runtime_execbg(string command, string[] arguments);
extern(C) long compiler_hash_add();
extern(C) long compiler_hash_mult();

string removeExtension(string s) {
    mut string shortened = s;
    while (shortened.length > 0 && shortened[$ - 1 .. $] != ".")
        shortened = shortened[0 .. $ - 1];
    if (shortened.length) return shortened[0 .. $ - 1]; else return s;
}

string removeSlashes(string s) {
    mut string result;
    for (int i <- 0 .. s.length) {
        if (s[i .. i + 1] == "/") result = result ~ "_";
        else result = result ~ s[i .. i + 1];
    }
    return result;
}

// pseudo brute force zip compression
// Hallo Wallo
// "Hallo Wallo" in ""? No.
// "Hallo Wall" in ""? No.
// ... "H" in ""? No.
// "allo Wallo" in "H"? No.
// ...
// "allo" in "Hallo W"? Yes.
// Hallo WB1N4
string compress(string symbol) {
    mut string result;
    for (mut size_t i = 0; i < symbol.length; i += 1) {
        mut bool found;
        for (mut size_t k = symbol.length; k > i; k -= 1) {
            if (k - i < 4) continue; // pointless - replacement will always be larger
            string sample = symbol[i .. k];
            int pos = find(symbol[0 .. i], sample);
            if (pos != -1) {
                string replace = "B" ~ ltoa(pos) ~ "N" ~ ltoa(k - i);
                if (replace.length < sample.length)
                {
                    result ~= replace;
                    i += sample.length - 1;
                    found = true;
                    break;
                }
            }
        }
        if (!found) result ~= symbol[i];
    }
    return result;
}

struct BackgroundCompilation
{
    Hash hash;
    string srcFile;
    string objFile;
    int pid;
}

// how many levels of cache are we even on rn
class ObjectCache
{
    (string earlyHash, Hash resultHash, string srcFile, string objFile, int pid)[] entries;

    int[] donePids;

    this() { }

    bool has(string earlyHash) {
        return [any a.earlyHash == earlyHash for a in entries];
    }

    void add(string earlyHash, Hash resultHash, string srcFile, string objFile, int pid) {
        this.entries ~= (earlyHash, resultHash, srcFile, objFile, pid);
    }

    BackgroundCompilation get(string earlyHash) {
        typeof(entries[0]) nothing;
        auto entry = [first a for a in entries where a.earlyHash == earlyHash else nothing];
        return BackgroundCompilation(entry.resultHash, entry.srcFile, entry.objFile, entry.pid);
    }

    void waitpid(int pid) {
        if (pid == 0) return;
        if ([any a == pid for a in donePids]) return;
        if (!neat_runtime_waitpid(pid))
            assert(false);
        donePids ~= pid;
    }
}

class CompilationVisitor
{
    void visit(FinishedSymbol sym) {}
}

BackgroundCompilation emitModule(Module module_, CompilationVisitor[] visitors, BuildSettings settings)
{
    auto backendModule = settings.backend.createModule(settings.platform, module_.loc.toBackendLoc, settings.forMacro);
    auto backendModuleLLVM = backendModule.instanceOf(LLVMBackendModule);
    auto backendModuleC = backendModule.instanceOf(CBackendModule);
    auto hash = new Hash;

    hash.apply(compiler_hash_add, compiler_hash_mult);

    int build(string src, string obj) {
        import std.string : join;

        mut string exec;
        mut string[] args;
        if (backendModuleLLVM) {
            if (settings.optimize) { exec = "sh"; args = [".obj/llvmBuildOpt.sh", src, obj]; }
            else { exec = "sh"; args = [".obj/llvmBuild.sh", src, obj]; }
            assert(!settings.x86_32);
        } else {
            if (settings.optimize) { exec = "gcc"; args = ["-c", "-fpic", "-O3", src, "-o", obj]; }
            else { exec = "gcc"; args = ["-c", "-fpic", src, "-o", obj]; }
            if (settings.x86_32) args ~= "-m32";
        }
        string cmd = exec ~ " " ~ args.join(" ");
        int pid = neat_runtime_execbg(exec, args);
        print("$ " ~ cmd ~ " [&" ~ itoa(pid) ~ "]");
        return pid;
    }

    if (backendModuleLLVM) hash.adds("LLVM");
    else hash.adds("gcc");
    if (settings.x86_32) hash.adds("m32");
    if (settings.optimize) hash.adds("opt");
    // Macros and binaries must not share objects!
    // Macros have special magic to avoid dlopen issues.
    if (settings.forMacro) hash.adds("macro");

    string moduleMangle = module_.mangle;
    hash.adds(moduleMangle);

    string earlyHash = hash.text;
    if (settings.objectCache.has(earlyHash)) {
        return settings.objectCache.get(earlyHash);
    }

    auto symbols = module_.compile(settings.compiler, settings.platform);
    [symbol.hash(hash) for symbol in symbols];
    [[visitor.visit(symbol) for symbol in symbols] for visitor in visitors];

    mut string objFile = ".obj/" ~ hash.text ~ ".o";
    if (backendModuleLLVM && settings.optimize) {
        objFile = ".obj/" ~ hash.text ~ ".bc";
    }

    mut string srcFile;
    if (backendModuleLLVM) {
        srcFile = ".obj/" ~ compress(removeSlashes(moduleMangle)) ~ ".ll";
    } else {
        assert(!!backendModuleC);
        srcFile = ".obj/" ~ compress(removeSlashes(moduleMangle)) ~ ".c";
    }

    if (settings.caching && exists(objFile) && exists(srcFile)) {
        // preexisting object
        settings.objectCache.add(earlyHash, hash, srcFile, objFile, 0);
        return BackgroundCompilation(hash, srcFile, objFile, 0);
    }

    auto generator = new Generator(settings.platform, backendModule);
    module_.emit(generator, symbols);
    backendModule.done;

    mut int pid;
    if (backendModuleLLVM) {
        {
            auto llText = backendModuleLLVM.output.text;
            write(srcFile, llText);
        }
        pid = build(srcFile, objFile);
    } else {
        assert(!!backendModuleC);
        {
            auto csrc = backendModuleC.output.text;
            write(srcFile, csrc);
        }
        pid = build(srcFile, objFile);
    }
    settings.objectCache.add(earlyHash, hash, srcFile, objFile, pid);
    return BackgroundCompilation(hash, srcFile, objFile, pid);
}

class UnittestVisitor : CompilationVisitor
{
    this() { }

    string[] symbols;

    override void visit(FinishedSymbol sym) {
        if (auto uf = sym.instanceOf(CompiledUnittestFunction))
        {
            symbols ~= uf.fun.mangle;
        }
    }
}

class BuildSettings
{
    CompilerBase compiler;

    ObjectCache objectCache;

    Backend backend;

    bool x86_32;

    bool caching;

    bool optimize;

    bool forMacro;

    PlatformFlags platformFlags;

    Platform platform() {
        mut BackendType macroWordType;
        if (x86_32) macroWordType = new BackendIntType;
        else macroWordType = new BackendLongType;
        return new Platform(macroWordType, platformFlags);
    }

    this(this.compiler, this.objectCache, this.backend, this.x86_32, this.caching, this.platformFlags, this.optimize, this.forMacro) { }
}

(string[] objFiles, string[] intermediateFiles, Module module_, Hash hash) buildAstModule(
    ASTModule astModule, BuildSettings settings, CompilationVisitor[] visitors)
{
    auto context = makeContext(settings.compiler, settings.platform, null, astModule.macroState);
    Module module_ = compileModule(context, astModule, addDefaultImports=true);

    mut string[] objFiles;
    mut string[] intermediateFiles;
    mut int[] pids;

    auto allModules = new ModuleSet(0);
    bool add(Module mod) { return allModules.add(mod); }
    module_.walkModules(&add);

    auto hash = new Hash;
    hash.addl(__GENERATION__);
    mut auto remainingModules = allModules.array;
    while (remainingModules.length > 0) {
        for (auto remainingModule <- remainingModules) {
            auto compilation = emitModule(remainingModule, visitors, settings);
            objFiles ~= compilation.objFile;
            intermediateFiles ~= compilation.srcFile;
            with (compilation.hash.state) hash.apply(add, mult);
            if (compilation.pid != 0) pids ~= compilation.pid;
        }
        auto remainingSet = new ModuleSet(0);
        auto currentSet = new ModuleSet(0); // loop breaker
        // TODO add()
        bool add2(Module mod) {
            if (allModules.add(mod)) {
                remainingSet.add(mod);
            }
            return currentSet.add(mod);
        }
        module_.walkModules(&add2);
        remainingModules = remainingSet.array;
    }

    [settings.objectCache.waitpid(pid) for pid in pids];

    return (objFiles, intermediateFiles, module_, hash);
}

class ParserHelperImpl : ParserHelper
{
    BuildSettings settings;

    this(this.settings) { }

    override void proxyCall(ASTModule astModule, string function_, MacroState macroState)
    {
        print("# stageM");
        auto result = buildAstModule(astModule, this.settings, []);
        string objFiles = [join "" " " ~ a for a in result.objFiles];

        mut string baseCmd;
        if (settings.backend.instanceOf(LLVMBackend)) baseCmd = "clang -Wno-unused-command-line-argument -fpic";
        else if (settings.backend.instanceOf(CBackend)) baseCmd = "gcc -fpic";
        else assert(false);
        if (settings.x86_32) baseCmd ~= " -m32";

        auto simpleContext = makeContext(settings.compiler, settings.platform, null, null);
        auto fun = result.module_.lookup(function_, simpleContext, __HERE__, null).instanceOf(Function);
        string name = fun.mangle;
        mut string soname;
        mut string cmd;
        if (settings.backend.instanceOf(LLVMBackend)) {
            soname = ".obj/macro_" ~ name ~ "_" ~ result.hash.text ~ ".so";
            cmd = baseCmd ~ " -shared" ~ objFiles ~ " -o " ~ soname;
        }
        else if (settings.backend.instanceOf(CBackend)) {
            soname = ".obj/macro_" ~ name ~ "_" ~ result.hash.text ~ ".so";
            mut string flags = " -shared -g";
            if (settings.x86_32) flags ~= " -m32";
            cmd = baseCmd ~ flags ~ objFiles ~ " -o " ~ soname;
        }
        else assert(false);

        if (!settings.caching || !exists(soname)) {
            print("$ " ~ cmd);
            neat_runtime_system(cmd);
        }
        neat_runtime_dlcall(soname, name, macroState);
    }
}

// "AST", lol. Package fresh off the commandline, dependencies not resolved yet.
// Needed because we can reference future packages.
struct ASTPackage
{
    string name;
    string path;
    bool syspkg;
    string[] deps;
}

// better way to do this (reassign?)
(string result, string remainder) slice(string text, string marker)
{
    int pos = find(text, marker);
    if (pos == -1) {
        return (text, "");
    }
    return (text[0 .. pos], text[pos + marker.length .. $]);
}

ASTPackage parsePackage(mut string arg, bool syspkg)
{
    auto pair1 = slice(arg, ":");
    string name = pair1.result; arg = pair1.remainder;
    assert(name.length > 0);
    auto pair2 = slice(arg, ":");
    string path = pair2.result; arg = pair2.remainder;
    assert(path.length > 0);
    mut string[] deps;
    while (arg.length)
    {
        auto pair3 = slice(arg, ",");
        deps ~= pair3.result; arg = pair3.remainder;
    }
    return ASTPackage(name, path, syspkg, deps);
}

string resolvePath(ASTPackage pak, string execPath) {
    if (!pak.syspkg) return realpath(pak.path);
    return realpath(execPath ~ "/" ~ pak.path);
}

Package[] resolvePackages(ASTPackage[] astPackages, string execPath) {
    Package[] result = [new Package(pkg.name, resolvePath(pkg, execPath)) for pkg in astPackages];
    for (int i <- 0 .. astPackages.length) {
        auto astPackage = astPackages[i];
        for (auto dep <- astPackage.deps) {
            mut Package foundDep;
            for (auto resultPak <- result) {
                if (resultPak.name == dep) {
                    if (foundDep) print("Dependency '" ~ dep ~ "' of '" ~ astPackage.name ~ "' exists twice!");
                    assert(!foundDep);
                    foundDep = resultPak;
                    break;
                }
            }
            if (!foundDep) {
                print("Missing package dependency: " ~ dep);
                assert(false);
            }
            result[i].addDependency(foundDep);
        }
    }
    return result;
}

// TODO this should be ASTBasicType(?)
class ASTSizeT : ASTSymbol
{
    this() { }

    override Type compile(Context context) {
        return context.nativeWordType;
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTSizeT'!"); assert(false); }
}

class UmlVisitor : CompilationVisitor
{
    (string base, string child)[] inheritance;

    this() { }

    override void visit(FinishedSymbol sym) {
        if (auto defClass = sym.instanceOf(DefineClass)) {
            if (defClass.class_.superClass) {
                auto pair = (defClass.class_.superClass.name, defClass.class_.name);
                // TODO
                // if (![any a == pair for a in this.inheritance])
                if (![any a[0] == pair[0] && a[1] == pair[1] for a in this.inheritance])
                    this.inheritance ~= pair;
            }
        }
    }

    void writeTo(string filename) {
        mut string diagram = "Digraph G {\n";
        void addl(string s) { diagram ~= "  " ~ s ~ "\n"; }
        for (auto pair <- inheritance) {
            addl(pair.base ~ " -> " ~ pair.child ~ " [dir=back, arrowhead=empty];");
        }
        diagram ~= "}\n";
        write(filename, diagram);
    }
}

// manual hashmap
struct ModuleSetBucket
{
    bool set;
    Module mod;
}

class ModuleSet
{
    ModuleSetBucket[] store;
    int occupied;
    this(int size) { this.store = new ModuleSetBucket[](size); this.occupied = 0; }
    bool add(Module mod)
    {
        if (occupied >= (store.length * 3) / 4)
        {
            resize(cast(int) (store.length * 2 + 10));
        }
        mut size_t hash = mod.hash;
        // TODO %
        size_t index(mut size_t hash) {
            // TODO proper unsigned types
            if (hash < 0) hash = -hash;
            return hash - (hash / store.length) * store.length;
        }
        while (store[index(hash)].set) {
            if (store[index(hash)].mod.mangledName == mod.mangledName)
                return false; // already stored
            hash += 1;
        }
        store[index(hash)].set = true;
        store[index(hash)].mod = mod;
        occupied += 1;
        return true;
    }
    Module[] array()
    {
        Module[] res = new Module[](occupied);
        mut int k;
        for (auto entry <- store) {
            if (entry.set) {
                res[k] = entry.mod;
                k += 1;
            }
        }
        return res;
    }
    void resize(int newSize)
    {
        auto newSet = new ModuleSet(newSize);

        [newSet.add(bucket.mod) for bucket in store where bucket.set];
        this.store = newSet.store;
    }
}

class Options
{
    string output;
    string[] linkerArgs;
    ASTPackage[] astPackages;
    bool dontLink;
    bool optimize;
    bool caching;
    bool x86_32, macro_x86_32;
    string intermediateListFile;
    Backend backend, macroBackend;
    int generation;
    string umlFile;
    bool unittest_;
    bool noMain;
    PlatformFlags platformFlags, macroPlatformFlags;
    // for neat.macros.cimport
    string[] cFlags;

    this() {
        this.backend = new LLVMBackend();
        this.macroBackend = this.backend;
        this.caching = true;
        this.generation = __GENERATION__;
    }

    string[] parseArgs(string[] args) {
        mut string[] remArgs;
        for (mut size_t i = 0; i < args.length; i += 1) {
            string arg = args[i];
            mut string flag;
            if (arg.length >= 2) flag = arg[0 .. 2];

            // package: like includes, but scoped
            // -Pname:path[:dep1[,dep2]*]?
            if (flag == "-P") {
                addPackage(arg[2 .. $], false);
            } else if (arg == "-package") {
                assert(i + 1 < args.length);
                addPackage(args[i + 1], false);
                i += 1;
            } else if (flag == "-S") {
                addPackage(arg[2 .. $], true);
            } else if (arg == "-syspackage") {
                assert(i + 1 < args.length);
                addPackage(args[i + 1], true);
                i += 1;
            } else if (flag == "-I") {
                cFlags ~= arg;
            } else if (flag == "-l") {
                this.linkerArgs ~= arg;
            } else if (flag == "-L") {
                this.linkerArgs ~= arg[2 .. $];
            } else if (arg == "-o") {
                assert(i + 1 < args.length);
                this.output = args[i + 1];
                i += 1;
            } else if (arg == "-O") {
                this.optimize = true;
            } else if (arg == "-c") {
                this.dontLink = true;
            } else if (arg == "-x") {
                this.caching = false;
            } else if (arg == "-backend=c") {
                this.backend = new CBackend;
            } else if (arg == "-macro-backend=c") {
                this.macroBackend = new CBackend;
            } else if (arg == "-m32") {
                this.x86_32 = true;
            } else if (arg == "-macro-m32") {
                this.macro_x86_32 = true;
            } else if (arg == "-print-generation") {
                print(itoa(__GENERATION__));
                exit(0); // TODO return :exit
            } else if (arg == "-next-generation") {
                // build the next generation of the compiler (used by rebuild.sh)
                this.generation = __GENERATION__ + 1;
            } else if (arg == "-uml") {
                assert(i + 1 < args.length);
                this.umlFile = args[i + 1];
                i += 1;
            } else if (arg == "-unittest") {
                this.unittest_ = true;
            } else if (arg == "-no-main") {
                this.noMain = true;
            } else if (arg == "-dump-intermediates") {
                // Dump list of intermediate sources into a file.
                // Used for C release generation.
                assert(i + 1 < args.length);
                this.intermediateListFile = args[i + 1];
                i += 1;
            } else {
                remArgs ~= arg;
            }
        }
        return remArgs;
    }

    void addPackage(string pak, bool relative) {
        auto pak = parsePackage(pak, relative);
        if ([any a.name == pak.name for a in this.astPackages]) {
            print("warn: package double-specified: " ~ pak.name ~ "; using newer definition");
            this.astPackages = [a for a in this.astPackages where a.name != pak.name];
        }
        this.astPackages ~= pak;
    }

    void parseConfig(string path) {
        if (!path.exists) return;
        auto lines = path.read.split("\n");
        mut string[] args;
        for (auto line <- lines) {
            // TODO slice()
            auto words = line.split(" ");
            args ~= words[0];
            if (words.length > 1) args ~= words[1 .. $].join(" ");
        }
        parseArgs(args);
    }
}

extern(C) void neat_runtime_cache_clear();

void clearOnceCache() {
    neat_runtime_cache_clear();
}

ASTModule builtinSymbols(Options options) {
    auto builtins = new ASTModule(__HERE__, "", new Package("builtins", ""), new MacroState, null);

    builtins.addSymbolAlias("string", new FixedSymbolAlias(new Array(new Character)));
    // TODO dedi build type
    builtins.addSymbolAlias("bool", new FixedSymbolAlias(new Integer));
    builtins.addSymbolAlias("size_t", new ASTSizeT);
    builtins.addSymbolAlias("true", new FixedSymbolAlias(new IntLiteral(1)));
    builtins.addSymbolAlias("false", new FixedSymbolAlias(new IntLiteral(0)));
    builtins.addSymbolAlias("null", new FixedSymbolAlias(new NullExpr(new Pointer(new Void))));
    builtins.addSymbolAlias("__GENERATION__", new FixedSymbolAlias(new IntLiteral(options.generation)));
    return builtins;
}

void buildBinary(Options options, string mainFile, string execPath, Package[] packages) {
    /*print("packages:");
    for (auto pkg <- packages) {
        print("  '" ~ pkg.name ~ "' at " ~ pkg.path ~ ": deps " ~ [join ", " "'" ~ a.name ~ "'" for a in pkg.deps]);
    }*/
    neat_runtime_system("mkdir -p .obj");
    createBuilderScripts;

    auto builtins = builtinSymbols(options);
    auto defaultImports = [builtins];
    auto compiler = new CompilerImpl(defaultImports, options.cFlags);
    auto objectCache = new ObjectCache;
    auto modParseConfig = new ModuleParserConfig(packages, defaultImports, new ASTModuleCache);
    auto settings = new BuildSettings(compiler, objectCache, options.backend,
        x86_32=options.x86_32, caching=options.caching, platformFlags=options.platformFlags,
        optimize=options.optimize, forMacro=false);
    auto macroSettings = new BuildSettings(compiler, objectCache, options.macroBackend,
        x86_32=options.macro_x86_32, caching=options.caching, platformFlags=options.macroPlatformFlags,
        optimize=false, forMacro=true);
    auto helper = new ParserHelperImpl(macroSettings);
    mut CompilationVisitor[] compilationVisitors;

    auto unittestVisitor = new UnittestVisitor;
    if (options.unittest_) {
        compilationVisitors ~= unittestVisitor;
    }

    auto umlVisitor = new UmlVisitor;
    if (options.umlFile != "") {
        compilationVisitors ~= umlVisitor;
    }

    auto astModule = getModule(compiler, mainFile, null, false, helper, modParseConfig, __HERE__);
    auto result = buildAstModule(astModule, settings, compilationVisitors);
    mut string fileArgs = [join "" " " ~ a for a in result.objFiles];
    string[] intermediateFiles = result.intermediateFiles;

    if (options.umlFile != "") {
        umlVisitor.writeTo(options.umlFile);
    }

    string binHashOutput = ".obj/hash_" ~ result.hash.text ~ ".c";
    with (result.hash.state) {
        write(binHashOutput,
"long long int compiler_hash_add() { return " ~ ltoa(add) ~ "LL; }
long long int compiler_hash_mult() { return " ~ ltoa(mult) ~ "LL; }
"       );
    }
    fileArgs ~= " " ~ binHashOutput;
    mut auto intermediates = result.intermediateFiles;
    intermediates ~= binHashOutput;

    string unittestCode() {
        mut string ret;
        for (auto symbol <- unittestVisitor.symbols) {
            ret ~= "extern void " ~ symbol ~ "();\n";
        }
        ret ~= "void _run_unittests() {\n";
        for (auto symbol <- unittestVisitor.symbols) {
            ret ~= "  " ~ symbol ~ "();\n";
        }
        ret ~= "}\n";
        return ret;
    }

    auto unittestFile = ".obj/_run_unittests.c";

    unittestFile.write(unittestCode);
    fileArgs ~= " " ~ unittestFile;
    intermediates ~= unittestFile;

    if (options.intermediateListFile != "") {
        options.intermediateListFile.write(intermediates.join("\n") ~ "\n");
    }

    if (options.dontLink) {
        compiler.clear;
        clearOnceCache;
        return;
    }

    mut string baseFlags;
    if (options.optimize) baseFlags ~= " -Ofast";
    if (options.x86_32) baseFlags ~= " -m32";

    if (options.backend.instanceOf(LLVMBackend) && options.optimize)
        baseFlags ~= " -flto";

    // int pid = getpid;
    // neat_runtime_system("cat /proc/" ~ itoa(pid) ~ "/status");
    mut string flags = baseFlags ~ " -rdynamic";
    mut string linkerFlags = " -ldl";
    for (auto linkerArg <- options.linkerArgs) linkerFlags ~= " " ~ linkerArg;
    mut string compilerCmd = "clang -Wno-unused-command-line-argument -Wno-unknown-attributes -fpic";
    if (options.backend.instanceOf(CBackend)) compilerCmd = "gcc";
    if (options.noMain)
        flags ~= " -DNEAT_NO_MAIN";
    string runtime = execPath ~ "/src/runtime.c";
    string cmd = compilerCmd ~ flags ~ fileArgs ~ " " ~ runtime ~ " -o " ~ options.output ~ linkerFlags;
    print("$ " ~ cmd);
    neat_runtime_system(cmd);
    compiler.clear;
    clearOnceCache;
}

void main(mut string[] args)
{
    string executable = args[0];
    args = args[1 .. $];
    string execPath = "/proc/self/exe".realpath.dirname;
    auto options = new Options;
    // TODO make configurable somehow? commandline arg?
    options.parseConfig(execPath ~ "/neat.ini");
    args = options.parseArgs(args);

    mut Package[] packages = options.astPackages.resolvePackages(execPath);

    if (args.length != 1)
    {
        print("Usage: " ~ executable ~ " [-Pname:path[:dep1[,dep2]*]?]* FILE.nt");
        return;
    }

    if (args[0] == "build") {
        JSONValue pkgFile = JSONValue.parse("package.json".read);
        if (!pkgFile.isObject) {
            print("package.json: object expected");
            exit(1);
        }
        auto mainFile = pkgFile.require("main").requireString;
        mut string output = mainFile.removeExtension;
        if (pkgFile.has("binary"))
            output = pkgFile.require("binary").requireString;
        if (pkgFile.has("source")) {
            auto srcDir = pkgFile.require("source").requireString;
            auto pkg = new Package(name="src", path=realpath(srcDir));
            [pkg.addDependency(dep) for dep in packages];
            packages ~= pkg;
        }
        options.output = output;
        buildBinary(options, mainFile, execPath=execPath, packages);
        return;
    }

    // Add "." default package for commandline builds
    auto pkg = new Package(name="src", path=realpath("."));
    [pkg.addDependency(dep) for dep in packages];
    packages ~= pkg;

    auto mainFile = args[0];

    if (!options.output.length) options.output = removeExtension(args[0]);

    buildBinary(options, mainFile, execPath=execPath, packages);
}

JSONValue require(JSONValue v, string key) {
    void fail() { print("Expected '" ~ key ~ "', not " ~ v.str); exit(1); }
    v.value.case {
        (:false): fail;
        (:true): fail;
        int: fail;
        string: fail;
        JSONValue[]: fail;
        (string key, JSONValue value)[] obj: {
            for (auto entry <- obj)
                if (entry.key == key) return entry.value;
            print("Expected '" ~ key ~ "' in " ~ v.str);
            exit(1);
        }
    }
}

string requireString(JSONValue v) {
    void fail() { print("Expected string, not " ~ v.str); exit(1); }
    v.value.case {
        (:false): fail;
        (:true): fail;
        int: fail;
        string s: return s;
        JSONValue[]: fail;
        (string key, JSONValue value)[]: fail;
    }
}

void createBuilderScripts() {
    write(".obj/llvmBuild.sh", "#!/usr/bin/env sh
set -e
llc $1 --filetype=obj --relocation-model=pic -o=$2
");
    // -Oz
    // disable -memcpyopt due to https://bugs.llvm.org/show_bug.cgi?id=48599
    write(".obj/llvmBuildOpt.sh", "#!/usr/bin/env sh
set -e
# opt -O3 $1 -o=$1.opt.bc
# llc -O3 --filetype=obj --relocation-model=pic $1.opt.bc -o=$2
llvm-as $1 -o=$2
");
}
