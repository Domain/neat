module main;

macro import neat.macros.listcomprehension;

import backend.base;
import backend.c;
import backend.llvm;
import helpers;
import neat.array;
import neat.base;
import neat.class_;
import neat.compiler;
import neat.expr;
import neat.function_;
import neat.hash;
import neat.packages;
import neat.parser_base;
import neat.stuff;
import neat.types;
import neat.unittest_;
import std.file;
import std.json;
import std.string : startsWith;

extern(C) int getpid();
extern(C) void neat_runtime_system(string command);
extern(C) void neat_runtime_dlcall(string soname, string name, void* arg);
extern(C) bool neat_runtime_waitpid(int pid);
extern(C) int neat_runtime_execbg(string command, string[] arguments);
extern(C) long compiler_hash_add();
extern(C) long compiler_hash_mult();

string removeSlashes(string s) {
    mut string result;
    for (i in 0 .. s.length) {
        if (s[i .. i + 1] == "/") result = result ~ "_";
        else result = result ~ s[i .. i + 1];
    }
    return result;
}

// pseudo brute force zip compression
// Hallo Wallo
// "Hallo Wallo" in ""? No.
// "Hallo Wall" in ""? No.
// ... "H" in ""? No.
// "allo Wallo" in "H"? No.
// ...
// "allo" in "Hallo W"? Yes.
// Hallo WB1N4
string compress(string symbol) {
    int find(string[] haystack, string[] needle) {
        if (needle.length > haystack.length) return -1;
        for (mut size_t i = 0; i <= haystack.length - needle.length; i += 1) {
            if (haystack[i .. i + needle.length] == needle) {
                return cast(int) i;
            }
        }
        return -1;
    }
    string[] parts = symbol.split("_");
    mut string[] result;
    for (mut size_t i = 0; i < parts.length; i += 1) {
        mut bool found;
        for (mut size_t k = parts.length; k > i; k -= 1) {
            string[] sample = parts[i .. k];
            int pos = find(parts[0 .. i], sample);
            if (pos != -1) {
                if (k - i == 1) result ~= "B$pos";
                else result ~= "B$(pos)N$(k - i)";
                i += sample.length - 1;
                found = true;
                break;
            }
        }
        if (!found) result ~= parts[i];
    }
    return result.join("_");
}

struct BackgroundCompilation
{
    Hash hash;
    string srcFile;
    string objFile;
    int pid;
    string[] extraLibs;
}

// how many levels of cache are we even on rn
class ObjectCache
{
    (string earlyHash, BackgroundCompilation compilation)[] entries;

    int[] donePids;

    this() { }

    bool has(string earlyHash) {
        return [any a.earlyHash == earlyHash for a in entries];
    }

    void add(string earlyHash, BackgroundCompilation compilation) {
        this.entries ~= (earlyHash, compilation);
    }

    BackgroundCompilation get(string earlyHash) {
        auto entry = [first a for a in entries where a.earlyHash == earlyHash];
        return entry.compilation;
    }

    void waitpid(int pid) {
        if (pid == 0) return;
        if ([any a == pid for a in donePids]) return;
        if (!neat_runtime_waitpid(pid))
            assert(false);
        donePids ~= pid;
    }
}

class CompilationVisitor
{
    void visit(FinishedSymbol sym) {}
}

BackgroundCompilation emitModule(Module module_, CompilationVisitor[] visitors, BuildSettings settings)
{
    auto backendModule = settings.backend.createModule(settings.platform, module_.loc.toBackendLoc, settings.forMacro);
    auto backendModuleLLVM = backendModule.instanceOf(LLVMBackendModule);
    auto backendModuleC = backendModule.instanceOf(CBackendModule);
    auto hash = new Hash;

    hash.apply(compiler_hash_add, compiler_hash_mult);

    int build(string src, string obj) {
        import std.string : join;

        mut string exec;
        mut string[] args;
        if (backendModuleLLVM) {
            if (settings.optimize) { exec = "sh"; args = [".obj/llvmBuildOpt.sh", src, obj]; }
            else { exec = "sh"; args = [".obj/llvmBuild.sh", src, obj]; }
            assert(!settings.x86_32);
        } else {
            if (settings.optimize) { exec = "gcc"; args = ["-c", "-fpic", "-O3", src, "-o", obj]; }
            else { exec = "gcc"; args = ["-c", "-fpic", src, "-o", obj]; }
            if (settings.x86_32) args ~= "-m32";
        }
        string cmd = exec ~ " " ~ args.join(" ");
        int pid = neat_runtime_execbg(exec, args);
        print("\$ $cmd [&$pid]");
        return pid;
    }

    settings.backend.hash(hash);
    if (settings.x86_32) hash.adds("m32");
    if (settings.optimize) hash.adds("opt");
    // Macros and binaries must not share objects!
    // Macros have special magic to avoid dlopen issues.
    if (settings.forMacro) hash.adds("macro");
    for (ver in settings.versions) hash.adds("version=$(ver)");

    string moduleMangle = module_.mangle;
    hash.adds(moduleMangle);

    string earlyHash = hash.text;
    if (settings.objectCache.has(earlyHash)) {
        return settings.objectCache.get(earlyHash);
    }

    auto symbols = module_.finishedSymbols;
    [symbol.hash(hash) for symbol in symbols];
    [[visitor.visit(symbol) for symbol in symbols] for visitor in visitors];

    mut string objFile = ".obj/$(hash.text).o";
    if (backendModuleLLVM && settings.optimize) {
        objFile = ".obj/$(hash.text).bc";
    }

    mut string srcFile;
    if (backendModuleLLVM) {
        srcFile = ".obj/$(compress(removeSlashes(moduleMangle))).ll";
    } else {
        assert(!!backendModuleC);
        srcFile = ".obj/$(compress(removeSlashes(moduleMangle))).c";
    }

    if (settings.caching && exists(objFile) && exists(srcFile)) {
        // preexisting object
        mut string[] extraLibs;
        if (".obj/$(hash.text).extralibs".exists) {
            extraLibs = ".obj/$(hash.text).extralibs".readText.split("\n");
        }
        auto compilation = BackgroundCompilation(hash, srcFile, objFile, 0, extraLibs);
        settings.objectCache.add(earlyHash, compilation);
        return compilation;
    }

    auto generator = new Generator(settings.platform, backendModule);
    module_.emit(generator);
    backendModule.done;

    mut int pid;
    if (backendModuleLLVM) {
        {
            auto llText = backendModuleLLVM.output.text;
            write(srcFile, llText);
        }
        pid = build(srcFile, objFile);
    } else {
        assert(!!backendModuleC);
        {
            auto csrc = backendModuleC.output.text;
            write(srcFile, csrc);
        }
        pid = build(srcFile, objFile);
    }
    auto compilation = BackgroundCompilation(hash, srcFile, objFile, pid, generator.extraLibs);

    if (generator.extraLibs.length > 0) {
        // FIXME [join line on "\n"
        ".obj/$(hash.text).extralibs".write(
            [join "\n" line for line in generator.extraLibs]);
    } else {
        ".obj/$(hash.text).extralibs".remove;
    }

    settings.objectCache.add(earlyHash, compilation);
    return compilation;
}

class UnittestVisitor : CompilationVisitor
{
    this() { }

    string[] symbols;

    override void visit(FinishedSymbol sym) {
        if (auto uf = sym.instanceOf(CompiledUnittestFunction))
        {
            symbols ~= uf.fun.mangle;
        }
    }
}

class BuildSettings
{
    CompilerBase compiler;

    ObjectCache objectCache;

    Backend backend;

    bool x86_32;

    bool caching;

    bool optimize;

    bool forMacro;

    string[] versions;

    PlatformFlags platformFlags;

    Platform platform() {
        BackendType macroWordType() {
            if (x86_32) return new BackendIntType;
            else return new BackendLongType;
        }
        return new Platform(macroWordType, platformFlags, versions);
    }

    this(this.compiler, this.objectCache, this.backend, this.x86_32, this.caching, this.versions,
         this.platformFlags, this.optimize, this.forMacro) { }
}

(string[] objFiles, string[] intermediateFiles, Module module_, Hash hash) buildAstModule(
    ASTModule astModule, BuildSettings settings, CompilationVisitor[] visitors, Options options)
{
    auto context = makeContext(settings.compiler, settings.platform, null, astModule.macroState);
    Module module_ = compileModule(context, astModule, addDefaultImports=true);

    mut string[] objFiles;
    mut string[] intermediateFiles;
    mut int[] pids;

    auto allModules = new ModuleSet;
    bool add(Module mod) { return allModules.add(mod); }
    module_.walkModules(&add);

    auto hash = new Hash;
    hash.addl(__GENERATION__);
    mut auto remainingModules = allModules.array;
    while (remainingModules.length > 0) {
        for (remainingModule in remainingModules) {
            auto compilation = emitModule(remainingModule, visitors, settings);
            objFiles ~= compilation.objFile;
            options.linkerArgs ~= ["-l$lib" for lib in compilation.extraLibs];
            intermediateFiles ~= compilation.srcFile;
            with (compilation.hash.state) hash.apply(add, mult);
            if (compilation.pid != 0) pids ~= compilation.pid;
        }
        auto remainingSet = new ModuleSet;
        auto currentSet = new ModuleSet; // loop breaker
        // TODO add()
        bool add2(Module mod) {
            if (allModules.add(mod)) {
                remainingSet.add(mod);
            }
            return currentSet.add(mod);
        }
        module_.walkModules(&add2);
        remainingModules = remainingSet.array;
    }

    [settings.objectCache.waitpid(pid) for pid in pids];

    return (objFiles, intermediateFiles, module_, hash);
}

class ParserHelperImpl : ParserHelper
{
    BuildSettings settings;

    this(this.settings) { }

    override void proxyCall(ASTModule astModule, string function_, MacroState macroState)
    {
        print("# stageM");
        // ignore pragma(lib) in macro (what are you doing)
        auto dummyOptions = new Options;
        auto result = buildAstModule(astModule, this.settings, [], dummyOptions);
        string objFiles = [join "" " " ~ a for a in result.objFiles];

        mut string baseCmd;
        if (settings.backend.instanceOf(LLVMBackend)) baseCmd = "clang -Wno-unused-command-line-argument -fpic";
        else if (settings.backend.instanceOf(CBackend)) baseCmd = "gcc -fpic";
        else assert(false);
        if (settings.x86_32) baseCmd ~= " -m32";

        auto simpleContext = makeContext(settings.compiler, settings.platform, null, new MacroState);
        auto fun = result.module_.lookup(function_, simpleContext, __HERE__, null).instanceOf(Function);
        string name = fun.mangle;
        mut string soname;
        mut string cmd;
        if (settings.backend.instanceOf(LLVMBackend)) {
            soname = ".obj/macro_$(name)_$(result.hash.text).so";
            cmd = "$baseCmd -shared $objFiles -o $soname";
        }
        else if (settings.backend.instanceOf(CBackend)) {
            soname = ".obj/macro_$(name)_$(result.hash.text).so";
            mut string flags = " -shared -g";
            if (settings.x86_32) flags ~= " -m32";
            cmd = "$baseCmd$flags$objFiles -o $soname";
        }
        else assert(false);

        if (!settings.caching || !exists(soname)) {
            print("\$ $cmd");
            neat_runtime_system(cmd);
        }
        neat_runtime_dlcall(soname, name, macroState);
    }
}

// "AST", lol. Package fresh off the commandline, dependencies not resolved yet.
// Needed because we can reference future packages.
struct ASTPackage
{
    string name;
    string path;
    bool syspkg;
    string[] deps;
}

// better way to do this (reassign?)
(string result, string remainder) slice(string text, string marker)
{
    int pos = find(text, marker);
    if (pos == -1) {
        return (text, "");
    }
    return (text[0 .. pos], text[pos + marker.length .. $]);
}

ASTPackage parsePackage(mut string arg, bool syspkg)
{
    auto pair1 = slice(arg, ":");
    string name = pair1.result; arg = pair1.remainder;
    assert(name.length > 0);
    auto pair2 = slice(arg, ":");
    string path = pair2.result; arg = pair2.remainder;
    assert(path.length > 0);
    mut string[] deps;
    while (arg.length)
    {
        auto pair3 = slice(arg, ",");
        deps ~= pair3.result; arg = pair3.remainder;
    }
    return ASTPackage(name, path, syspkg, deps);
}

string resolvePath(ASTPackage pak, string execPath) {
    if (!pak.syspkg) return realpath(pak.path);
    return realpath(execPath ~ "/" ~ pak.path);
}

Package[] resolvePackages(ASTPackage[] astPackages, string execPath) {
    Package[] result = [new Package(pkg.name, resolvePath(pkg, execPath), []) for pkg in astPackages];
    for (i, astPackage in astPackages) {
        for (dep in astPackage.deps) {
            mut nullable Package foundDep;
            for (resultPak in result) {
                if (resultPak.name == dep) {
                    if (foundDep) print("Dependency '$dep' of '$(astPackage.name)' exists twice!");
                    assert(!foundDep);
                    foundDep = resultPak;
                    break;
                }
            }
            if (!foundDep) {
                print("Missing package dependency: $dep");
                assert(false);
            }
            result[i].addDependency(foundDep.notNull);
        }
    }
    return result;
}

// TODO this should be ASTBasicType(?)
class ASTSizeT : ASTSymbol
{
    this() { }

    override Type compile(Context context) {
        return context.nativeWordType;
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTSizeT'!"); assert(false); }
}

class UmlVisitor : CompilationVisitor
{
    (string base, string child)[] inheritance;

    this() { }

    override void visit(FinishedSymbol sym) {
        if (auto defClass = sym.instanceOf(DefineClassIntf)) {
            defClass.obj.case {
                Class class_: {
                    if (class_.superClass) {
                        auto pair = (class_.superClass.name, class_.name);
                        if (![any a == pair for a in this.inheritance])
                            this.inheritance ~= pair;
                    }
                    for (superIntf in class_.superIntfs) {
                        auto pair = (superIntf.name, class_.name);
                        if (![any a[0] == pair[0] && a[1] == pair[1] for a in this.inheritance])
                            this.inheritance ~= pair;
                    }
                }
                Intf intf: {
                    for (superIntf in intf.superIntfs) {
                        auto pair = (superIntf.name, intf.name);
                        if (![any a[0] == pair[0] && a[1] == pair[1] for a in this.inheritance])
                            this.inheritance ~= pair;
                    }
                }
            }
        }
    }

    void writeTo(string filename) {
        mut string diagram = "Digraph G {\n";
        void addl(string s) { diagram ~= "  $s\n"; }
        for (pair in inheritance) {
            addl("$(pair.base) -> $(pair.child) [dir=back, arrowhead=empty];");
        }
        diagram ~= "}\n";
        write(filename, diagram);
    }
}

class ModuleSet
{
    Module[string] store;
    this() { }
    bool add(Module mod)
    {
        if (this.store.has(mod.mangledName)) return false;
        this.store[mod.mangledName] = mod;
        return true;
    }
    Module[] array()
    {
        return store.values;
    }
}

string alignTabs(string text) {
    auto lines = text.split("\n");
    auto segments = [line.split("\t") for line in lines];
    int numTabs = [max [count ch in line where ch == "\t"[0]] for line in lines];
    // Yes that `- 1` is intentional. Think about it.
    int[] spaceUse = [
        [max cast(int) lineSegments[i].length for lineSegments in segments where i < lineSegments.length - 1 base 0]
        for i in 0 .. numTabs];
    mut string res;
    for (line in segments) {
        for (i, segment in line) {
            int target = spaceUse[i] + 1;
            res ~= segment;
            if (i < line.length - 1) {
                for (k in 0 .. target - segment.length)
                    res ~= " ";
            }
        }
        res ~= "\n";
    }
    return res;
}

void help(string executable) {
    print("Usage: $executable [options] FILE.nt

Options:

\t-h\tOutput this help page.
\t-help
\t-Pname:path:dep[,dep]*\tDefine a package. Every source file must be in a package.
\t-package name:path:dep[,dep]*
\t-Sname:path:dep[,dep]*\tDefine a system package. Paths are relative to the compiler binary.
\t-syspackage name:path:dep[,dep]*
\t-Lflag\tAdd a command that will be passed through to the linker.
\t-llibrary
\t-Iinclude\tInclude a folder when invoking the C binding macro.
\t-o FILE\tCreate the output binary FILE.
\t-O\tCreate an optimized binary.
\t-c\tDon't create a binary.
\t-uml FILE.uml\tOutput an UML diagram of every compiled class to FILE.uml.
\t-unittest\tRun unittests before entering main.
\t-no-main\tDon't require or call a main function in the source file. Unittests are still run.
\t-backend=c\tUse the C backend to generate a binary.
\t-macro-backend=c\tUse the C backend to generate macros.
\t-m32\tTarget a 32-bit system.
\t-macro-m32\tGenerate macros for a 32-bit system.
\t-x\tBypass the object cache.

Instead of specifying a file, the compiler can be called like:

\t$executable build

In this mode, package.json in the current folder is used to specify paths, output files and dependencies.
".alignTabs);
}

class Options
{
    string output;
    string[] linkerArgs;
    ASTPackage[] astPackages;
    bool dontLink;
    bool optimize;
    bool caching;
    bool x86_32, macro_x86_32;
    string intermediateListFile;
    Backend backend, macroBackend;
    int generation;
    string umlFile;
    bool unittest_;
    bool noMain;
    PlatformFlags platformFlags, macroPlatformFlags;
    string[] cFlags; // for neat.macros.cimport
    string[] versions, macroVersions;
    string runningCompilerVersion;
    string requestedCompilerVersion;

    this() {
        this.backend = new LLVMBackend();
        this.macroBackend = this.backend;
        this.caching = true;
        this.generation = __GENERATION__;
    }

    string[] parseArgs(string executable, string[] args) {
        (string | fail :notFound) startsWith(string haystack, string needle) {
            if (needle.length < haystack.length && haystack[0 .. needle.length] == needle) {
                return haystack[needle.length .. $];
            }
            return :notFound;
        }
        mut string[] remArgs;
        for (mut size_t i = 0; i < args.length; i += 1) {
            string arg = args[i];
            mut string flag;
            if (arg.length >= 2) flag = arg[0 .. 2];

            // package: like includes, but scoped
            // -Pname:path[:dep1[,dep2]*]?
            if (flag == "-h" || flag == "-help") {
                help(executable);
                exit(0);
            } else if (flag == "-P") {
                addPackage(arg[2 .. $], false);
            } else if (arg == "-package") {
                assert(i + 1 < args.length);
                addPackage(args[i + 1], false);
                i += 1;
            } else if (flag == "-S") {
                addPackage(arg[2 .. $], true);
            } else if (arg == "-syspackage") {
                assert(i + 1 < args.length);
                addPackage(args[i + 1], true);
                i += 1;
            } else if (string ver <- arg.startsWith("-running-compiler-version=")) {
                // Should only be passed via neat.ini!
                this.runningCompilerVersion = ver;
            } else if (string ver <- arg.startsWith("-compiler-version=")) {
                this.requestedCompilerVersion = ver;
            } else if (flag == "-I") {
                cFlags ~= arg;
            } else if (flag == "-l") {
                this.linkerArgs ~= arg;
            } else if (flag == "-L") {
                this.linkerArgs ~= arg[2 .. $];
            } else if (arg == "-o") {
                assert(i + 1 < args.length);
                this.output = args[i + 1];
                i += 1;
            } else if (arg == "-O") {
                this.optimize = true;
            } else if (arg == "-c") {
                this.dontLink = true;
            } else if (arg == "-x") {
                this.caching = false;
            } else if (arg == "-backend=c") {
                this.backend = new CBackend;
            } else if (arg == "-macro-backend=c") {
                this.macroBackend = new CBackend;
            } else if (string ver <- arg.startsWith("-version=")) {
                this.versions ~= ver;
            } else if (string ver <- arg.startsWith("-macro-version=")) {
                this.macroVersions ~= ver;
            } else if (arg == "-m32") {
                this.x86_32 = true;
            } else if (arg == "-macro-m32") {
                this.macro_x86_32 = true;
            } else if (arg == "-print-generation") {
                print(itoa(__GENERATION__));
                exit(0); // TODO return :exit
            } else if (arg == "-next-generation") {
                // build the next generation of the compiler (used by rebuild.sh)
                this.generation = __GENERATION__ + 1;
            } else if (arg == "-uml") {
                assert(i + 1 < args.length);
                this.umlFile = args[i + 1];
                i += 1;
            } else if (arg == "-unittest") {
                this.unittest_ = true;
            } else if (arg == "-no-main") {
                this.noMain = true;
            } else if (arg == "-dump-intermediates") {
                // Dump list of intermediate sources into a file.
                // Used for C release generation.
                assert(i + 1 < args.length);
                this.intermediateListFile = args[i + 1];
                i += 1;
            } else {
                remArgs ~= arg;
            }
        }
        return remArgs;
    }

    string[] allVersions() {
        return ["generation$(i+1)" for i in 0 .. this.generation] ~ this.versions;
    }

    string[] allMacroVersions() {
        return ["generation$(i+1)" for i in 0 .. __GENERATION__] ~ this.macroVersions;
    }

    void addPackage(string pak, bool relative) {
        auto pak = parsePackage(pak, relative);
        if ([any a.name == pak.name for a in this.astPackages]) {
            print("warn: package double-specified: $(pak.name); using newer definition");
            this.astPackages = [a for a in this.astPackages where a.name != pak.name];
        }
        this.astPackages ~= pak;
    }

    void parseConfig(string path) {
        if (!path.exists) return;
        auto lines = path.read.split("\n");
        mut string[] args;
        for (line in lines) {
            // TODO slice()
            auto words = line.split(" ");
            args ~= words[0];
            if (words.length > 1) args ~= words[1 .. $].join(" ");
        }
        parseArgs("neat.ini", args);
    }
}

extern(C) void neat_runtime_cache_clear();

void clearOnceCache() {
    neat_runtime_cache_clear();
}

ASTModule builtinSymbols(Options options) {
    auto builtins = new ASTModule(__HERE__, "", new Package("builtins", "", []), new MacroState, null);

    builtins.addAliasDecl("string", Protection.public_, new ASTSymbolHelper(new Array(new Character)));
    // TODO dedi build type
    builtins.addAliasDecl("size_t", Protection.public_, new ASTSizeT);
    builtins.addAliasDecl("true", Protection.public_, new ASTSymbolHelper(new BoolLiteral(true)));
    builtins.addAliasDecl("false", Protection.public_, new ASTSymbolHelper(new BoolLiteral(false)));
    builtins.addAliasDecl("null", Protection.public_, new ASTSymbolHelper(new NullExpr(new Pointer(new Void))));
    builtins.addAliasDecl("__GENERATION__", Protection.public_, new ASTSymbolHelper(new IntLiteral(options.generation)));
    return builtins;
}

void buildBinary(Options options, string mainFile, string execPath, Package[] packages) {
    /*print("packages:");
    for (pkg in packages) {
        print("  '" ~ pkg.name ~ "' at " ~ pkg.path ~ ": deps " ~ [join ", " "'" ~ a.name ~ "'" for a in pkg.deps]);
    }*/
    neat_runtime_system("mkdir -p .obj");
    createBuilderScripts;

    auto builtins = builtinSymbols(options);
    auto defaultImports = [builtins];
    auto modParseConfig = new ModuleParserConfig(packages, defaultImports, new ASTModuleCache);
    auto compiler = new CompilerImpl(defaultImports, modParseConfig, options.cFlags);
    auto objectCache = new ObjectCache;
    auto settings = new BuildSettings(compiler, objectCache, options.backend,
        x86_32=options.x86_32, caching=options.caching, versions=options.allVersions,
        platformFlags=options.platformFlags, optimize=options.optimize, forMacro=false);
    auto macroSettings = new BuildSettings(compiler, objectCache, options.macroBackend,
        x86_32=options.macro_x86_32, caching=options.caching, versions=options.allMacroVersions,
        platformFlags=options.macroPlatformFlags, optimize=false, forMacro=true);
    auto helper = new ParserHelperImpl(macroSettings);
    // FIXME break reference loop
    compiler.helper = helper;
    mut CompilationVisitor[] compilationVisitors;

    auto unittestVisitor = new UnittestVisitor;
    if (options.unittest_) {
        compilationVisitors ~= unittestVisitor;
    }

    auto umlVisitor = new UmlVisitor;
    if (options.umlFile != "") {
        compilationVisitors ~= umlVisitor;
    }

    auto astModule = getModule(compiler, mainFile, null, false, helper, modParseConfig, __HERE__);
    auto result = buildAstModule(astModule, settings, compilationVisitors, options);
    mut string fileArgs = [join "" " " ~ a for a in result.objFiles];
    string[] intermediateFiles = result.intermediateFiles;

    if (options.umlFile != "") {
        umlVisitor.writeTo(options.umlFile);
    }

    string binHashOutput = ".obj/hash_$(result.hash.text).c";
    with (result.hash.state) {
        write(binHashOutput,
"long long int compiler_hash_add() { return $(add)LL; }
long long int compiler_hash_mult() { return $(mult)LL; }
"       );
    }
    fileArgs ~= " " ~ binHashOutput;
    mut auto intermediates = result.intermediateFiles;
    intermediates ~= binHashOutput;

    string unittestCode() {
        mut string ret;
        for (symbol in unittestVisitor.symbols) {
            ret ~= "extern void $symbol();\n";
        }
        ret ~= "void _run_unittests() {\n";
        for (symbol in unittestVisitor.symbols) {
            ret ~= "  $symbol();\n";
        }
        ret ~= "}\n";
        return ret;
    }

    auto unittestFile = ".obj/_run_unittests.c";

    unittestFile.write(unittestCode);
    fileArgs ~= " " ~ unittestFile;
    intermediates ~= unittestFile;

    if (options.intermediateListFile != "") {
        options.intermediateListFile.write(intermediates.join("\n") ~ "\n");
    }

    if (options.dontLink) {
        compiler.clear;
        clearOnceCache;
        return;
    }

    mut string baseFlags;
    if (options.optimize) baseFlags ~= " -Ofast";
    if (options.x86_32) baseFlags ~= " -m32";

    if (options.backend.instanceOf(LLVMBackend) && options.optimize)
        baseFlags ~= " -flto";

    // int pid = getpid;
    // neat_runtime_system("cat /proc/" ~ itoa(pid) ~ "/status");
    mut string flags = baseFlags ~ " -rdynamic";
    mut string linkerFlags = " -ldl";
    for (linkerArg in options.linkerArgs) linkerFlags ~= " " ~ linkerArg;
    mut string compilerCmd = "clang -Wno-unused-command-line-argument -Wno-unknown-attributes -fpic";
    if (options.backend.instanceOf(CBackend)) compilerCmd = "gcc";
    if (options.noMain)
        flags ~= " -DNEAT_NO_MAIN";
    string runtime = execPath ~ "/src/runtime.c";
    string cmd = "$compilerCmd$flags$fileArgs $runtime -o $(options.output)$linkerFlags";
    print("\$ $cmd");
    neat_runtime_system(cmd);
    compiler.clear;
    clearOnceCache;
}

void main(mut string[] args)
{
    string executable = args[0];
    args = args[1 .. $];
    string[] allArgs = args;
    string execPath = "/proc/self/exe".realpath.dirname;
    auto options = new Options;
    // TODO make configurable somehow? commandline arg?
    options.parseConfig(execPath ~ "/neat.ini");
    args = options.parseArgs(executable, args);

    /**
     * Must be done first to ensure we allow some degree of forward compat.
     * Really, we should be pulling out -compiler-version= separately.
     */
    void swapCompilerVersion(string reqVer, string where) {
        print("Wrong compiler version, running $(options.runningCompilerVersion) but requested $(
            reqVer) $where. Bootstrapping $(reqVer)...");
        string zipName = "neat-$reqVer-gcc.zip";
        string url = "https://github.com/Neat-Lang/neat/releases/download/v$reqVer/$zipName";
        import std.process : system_iret;
        string targetPath = "$neatCachePath/compilers/v$(reqVer)";
        void system_v(string s) {
            print("\$ " ~ s);
            int ret = system_iret(s);
            if (ret != 0) {
                print("command failed with $ret!");
                // avoid cycle
                if (!s.startsWith("rm -rf")) system_v("rm -rf $targetPath");
                exit(1);
            }
        }
        int system_iret_v(string s) { print("\$ " ~ s); return system_iret(s); }
        if (!targetPath.exists) {
            system_v("mkdir -p $targetPath");
            system_v("wget -c $url -O $targetPath/$zipName");
            system_v("cd $targetPath && unzip $zipName && cd neat && ./build.sh");
        }
        // TODO shell escape
        exit(system_iret_v("$targetPath/neat/neat " ~ allArgs.join(" ")));
    }

    string reqVer = options.requestedCompilerVersion;
    if (reqVer != "" && reqVer != options.runningCompilerVersion) {
        swapCompilerVersion(reqVer, "on the commandline");
    }

    mut Package[] packages = options.astPackages.resolvePackages(execPath);

    if (args.length != 1)
    {
        help(executable);
        return;
    }

    if (args[0] == "build") {
        // TODO
        /*auto pkgFile = loadPkgFile(".").handle((:notFound): {
            print("package.json not found.");
            exit(1);
        });*/
        BinaryPackageFile pkgFile() {
            loadPkgFile(".", options.runningCompilerVersion).case {
                PackageFile file: return file.instanceOf(BinaryPackageFile).notNull;
                ReloadCompiler reload:
                    swapCompilerVersion(reload.requestedVer, "in package.json");
                (:notFound): {
                    print("package.json not found.");
                    exit(1);
                }
            }
        }
        auto pkgFile = pkgFile;
        options.output = pkgFile.binary;
        mut PackageLock packageLock = loadPkgLock(".").case(
            PackageLock f: f,
            (:notFound): new PackageLock([]));
        // default commandline packages
        auto ret = resolvePackageVersions("src", ".", packages, [], packageLock, new VersionProvider,
                                          currentCompiler=options.runningCompilerVersion);
        Package pkg() {
            ret.case {
                (:mismatched): {
                    print("Package resolution failed. :-(");
                    exit(1);
                }
                ReloadCompiler reload:
                    assert(false); // should have been handled earlier
                (Package package_, PackageLock resultLock): {
                    packageLock = resultLock;
                    return package_;
                }
            }
        }
        auto pkg = pkg;
        writePkgLock(packageLock, ".");
        packages ~= pkg;
        buildBinary(options, pkgFile.main, execPath=execPath, packages);
        return;
    }

    // Add "." default package for commandline builds
    packages ~= new Package(name="src", path=realpath("."), packages);

    auto mainFile = args[0];

    if (!options.output.length) options.output = args[0].withoutExtension;

    buildBinary(options, mainFile, execPath=execPath, packages);
}

void createBuilderScripts() {
    write(".obj/llvmBuild.sh", "#!/usr/bin/env sh
set -e
llc \$1 --filetype=obj --relocation-model=pic -o=\$2
");
    // -Oz
    // disable -memcpyopt due to https://bugs.llvm.org/show_bug.cgi?id=48599
    write(".obj/llvmBuildOpt.sh", "#!/usr/bin/env sh
set -e
# opt -O3 \$1 -o=\$1.opt.bc
# llc -O3 --filetype=obj --relocation-model=pic \$1.opt.bc -o=\$2
llvm-as \$1 -o=\$2
");
}
