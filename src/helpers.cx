module helpers;

extern(C) void print(char[]);
extern(C) void assert(int);
extern(C) int cxruntime_atoi(string);
extern(C) float cxruntime_atof(string);
extern(C) string cxruntime_itoa(int);
extern(C) string cxruntime_ltoa(long);
extern(C) string cxruntime_ftoa(float);
extern(C) string cxruntime_ftoa_hex(float);
extern(C) string cxruntime_ptr_id(void*);
extern(C) void* memcpy(void* target, void* source, size_t length);
extern(C) void free(void*);
extern(C) int access(char* pathname, int mode);
extern(C) void* fopen(char* pathname, char* mode);
extern(C) int fseek(void* stream, long offset, int whence);
extern(C) long ftell(void* stream);
extern(C) size_t fread(void* ptr, size_t size, size_t nmemb, void* stream);
extern(C) size_t fwrite(void* ptr, size_t size, size_t nmemb, void* stream);
extern(C) int fclose(void* stream);
extern(C) void* malloc(size_t size);

char* toStringz(string s) {
    char* ret = malloc(s.length + 1);
    memcpy(ret, s.ptr, s.length);
    ret[s.length] = "\0"[0];
    return ret;
}

int atoi(string s) { return cxruntime_atoi(s); }
float atof(string s) { return cxruntime_atof(s); }
string itoa(int i) { return cxruntime_itoa(i); }
string ltoa(long l) { return cxruntime_ltoa(l); }
string ftoa(float f) { return cxruntime_ftoa(f); }
string ftoa_hex(float f) { return cxruntime_ftoa_hex(f); }
string ptrId(void* ptr) { return cxruntime_ptr_id(ptr); }

int find(string text, string match) {
    for (int i <- 0 .. text.length - match.length + 1)
        if (text[i .. i + match.length] == match) return i;
    return -1;
}

string[] split(mut string text, string sep) {
    mut string[] result;
    while (true) {
        int pos = find(text, sep);
        if (pos == -1) {
            result ~= text;
            return result;
        }
        result ~= text[0 .. pos];
        text = text[pos + sep.length .. $];
    }
}

string join(string[] array, string sep) {
    mut string result;
    for (int i <- 0 .. array.length) {
        if (i > 0) result ~= sep;
        result ~= array[i];
    }
    return result;
}

bool exists(string file) {
    auto fn = toStringz(file);
    int F_OK = 0;
    bool ret = access(fn, F_OK) != -1;
    free(fn);
    return ret;
}

alias SEEK_SET = 0;
alias SEEK_END = 2;

string read(string file) {
    // thanks,
    // https://stackoverflow.com/questions/14002954/c-programming-how-to-read-the-whole-file-contents-into-a-buffer
    char* fn = toStringz(file);
    void* f = fopen(fn, toStringz("rb"));
    fseek(f, 0, SEEK_END);
    long fsize = ftell(f);
    fseek(f, 0, SEEK_SET);  /* same as rewind(f); */

    char *buffer = malloc(fsize);
    fread(buffer, 1, fsize, f);
    fclose(f);
    free(fn);

    return buffer[0 .. fsize];
}

void write(string file, string content) {
    char* fn = toStringz(file);
    void* f = fopen(fn, toStringz("wb"));
    fwrite(content.ptr, 1, content.length, f);
    fclose(f);
    free(fn);
}
