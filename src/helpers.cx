module helpers;

extern(C) void print(char[]);
extern(C) void assert(int);
extern(C) int cxruntime_atoi(string);
extern(C) float cxruntime_atof(string);
extern(C) bool cxruntime_file_exists(string file);
extern(C) string cxruntime_file_read(string file);
extern(C) void cxruntime_file_write(string file, string content);
extern(C) string cxruntime_itoa(int);
extern(C) string cxruntime_ltoa(long);
extern(C) string cxruntime_ftoa(float);
extern(C) string cxruntime_ftoa_hex(float);
extern(C) string cxruntime_ptr_id(void*);
extern(C) void* memcpy(void* target, void* source, size_t length);
extern(C) void free(void*);

int atoi(string s) { return cxruntime_atoi(s); }
float atof(string s) { return cxruntime_atof(s); }
string itoa(int i) { return cxruntime_itoa(i); }
string ltoa(long l) { return cxruntime_ltoa(l); }
string ftoa(float f) { return cxruntime_ftoa(f); }
string ftoa_hex(float f) { return cxruntime_ftoa_hex(f); }
string ptrId(void* ptr) { return cxruntime_ptr_id(ptr); }

int find(string text, string match) {
    for (int i <- 0 .. text.length - match.length + 1)
        if (text[i .. i + match.length] == match) return i;
    return -1;
}

string[] split(string text, string sep) {
    string text = text; // TODO mut string text
    string[] result;
    while (true) {
        int pos = find(text, sep);
        if (pos == -1) {
            result ~= text;
            return result;
        }
        result ~= text[0 .. pos];
        text = text[pos + sep.length .. $];
    }
}

string join(string[] array, string sep) {
    string result;
    for (int i <- 0 .. array.length) {
        if (i > 0) result ~= sep;
        result ~= array[i];
    }
    return result;
}
