module types;

import backend.proxy;
import base;

class ASTCharType : ASTType
{
    Type compile(Context context) {
        return new Character;
    }
}

class Character : Type
{
    void* emit(Platform platform)
    {
        return platform.charType();
    }

    bool same(Type other)
    {
        return !!other.instanceOf(Character);
    }
}

class ASTInteger : ASTType
{
    Type compile(Context context) {
        return new Integer;
    }
}

class Integer : Type
{
    void* emit(Platform platform)
    {
        return platform.intType();
    }

    bool same(Type other) { return !!other.instanceOf(Integer); }
}

class Void : Type
{
    void* emit(Platform platform)
    {
        return platform.voidType();
    }

    bool same(Type other) { return !!other.instanceOf(Void); }
}

class ASTPointer : ASTType
{
    ASTType subType;

    this(ASTType subType) { this.subType = subType; }

    Type compile(Context context)
    {
        Type subType = this.subType.compile(context);

        return new Pointer(subType);
    }
}

class Pointer : Type
{
    Type target;

    this(Type target) { this.target = target; }

    void* emit(Platform platform)
    {
        return platform.pointerType(this.target.emit(platform));
    }

    bool same(Type other)
    {
        Pointer otherPtr = other.instanceOf(Pointer);

        return otherPtr && this.target.same(otherPtr.target);
    }
}
