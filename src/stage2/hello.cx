module hello;

void main() {
    /* comment test 1 /* nesting test */ */
    // comment test 2
    print(": ack"); assert(ack(3, 6) == 509);
    print(": while"); assert(whiletest(5) == 32);
    print(": forLoopTest"); forLoopTest();
    print(": malloctest"); malloctest();
    print(": refTest"); refTest();
    print(": ifTest"); ifTest();
    print(": structTest"); structTest();
    print(": ptrArrayTest"); ptrArrayTest();
    print(": fpTest"); fpTest();
    print(": classTest"); classTest();
    print(": stringTest"); stringTest();
    print(": arrayTest"); arrayTest();
    print(": shortCircuitTest"); shortCircuitTest();
    print("----------");
    print("13 tests successful.");
}

import hello.ack;

int whiletest(int k) {
    int i = 1;
    while (k > 0) {
        i = i * 2;
        k = k - 1;
    }
    return i;
}

void forLoopTest()
{
    int k = 0;
    for (int i = 0; i < 10; i = i + 1)
    {
        k = k + 1;
    }
    assert(k == 10);
    for (int i = 10; i > 0; i = i - 1)
    {
        k = k - 1;
    }
    assert(k == 0);
}

void malloctest() {
    int* ip = malloc(4);
    *ip = 3;
    assert(*ip == 3);
}

void refTest() {
    int i = 0;
    refTestSet(&i, 5);
    assert(i == 5);
}

void ifTest() {
    int i = 0;
    if (1 == 1) i = 1;
    assert(i == 1);
    if (1 == 1) i = 1; else i = 2;
    assert(i == 1);
    if (1 == 2) i = 1; else i = 2;
    assert(i == 2);
    if (!(1 == 1)) assert(false);
    if (1 != 1) assert(false);
}

void refTestSet(int* ip, int value) {
    *ip = value;
}

struct S
{
    int a;
    int b;
}

void structTest()
{
    S s;
    s.a = 3;
    int* ap = &s.a;
    assert(*ap == 3);

    void* mem = malloc(8);
    S* sp = mem;
    int* ip = mem;
    sp.a = 5;
    sp.b = 8;
    assert(sp.a == 5);
    assert(*ip == 5);
    (*sp).a = 6;
    assert(sp[0].a == 6);
}

void ptrArrayTest()
{
    int* ip = malloc(40);
    int i = 0;
    while (i < 10) {
        ip[i] = i;
        i = i + 1;
    }
    i = 0;
    int sum = 0;
    while (i < 10) {
        sum = sum + ip[i];
        i= i + 1;
    }
    assert(sum == 45);
}

int callFp(int function() fn) { return fn(); }

int returnFive() { return 5; }

void fpTest() {
    assert(callFp(&returnFive) == 5);
}

class Class1
{
    int value() { return 5; }
    int getValue() { return this.value(); }
}

class Class2 : Class1
{
    int a;
    this(int a) { this.a = a; }
    int value() { return this.a; }
}

class Class3
{
    Class3 parent;
}

void classTest()
{
    Class1 class1 = new Class1;
    assert(class1.getValue() == 5);
    Class2 class2 = new Class2(6);
    assert(class2.getValue() == 6);
    Class1 class2_as_1 = class2; // TODO new Class2(6)
    assert(class2_as_1.getValue() == 6);
    assert(class2_as_1.__instanceof("Class1"));
    assert(class2_as_1.__instanceof("Class2"));
    assert(!class2_as_1.__instanceof("Class3"));
}

void stringTest()
{
    string str = "Hello World";
    print(str);
    assert("\n" == "
");
}

void arrayTest()
{
    int[] arr;
    assert(arr.length == 0);
    arr = [2, 3];
    assert(arr.length == 2);
    assert(arr[1] == 3);
    arr = [...arr, 4];
    assert(arr.length == 3);
    assert(arr[2] == 4);
    arr = [...arr, ...[5]];
    assert(arr.length == 4);
    assert(arr[3] == 5);
    assert(arr == [2, 3, 4, 5]);
    assert("Hello World" == [..."Hello", ..." ", ..."World"]);
    assert(arr[1 .. 3] == [3, 4]);
    assert("Hello World"["Hello ".length .. "Hello World".length] == "World");
}

int set(int* ip, int i)
{
    *ip = 1;
    return i;
}

void shortCircuitTest()
{
    {
        int a; int b;
        set(&a, 1) && set(&b, 1);
        assert(a == 1); assert(b == 1);
    }
    {
        int a; int b;
        set(&a, 0) && set(&b, 1);
        assert(a == 1); assert(b == 0);
    }
    {
        int a; int b;
        set(&a, 0) && set(&b, 0);
        assert(a == 1); assert(b == 0);
    }
    {
        int a; int b;
        set(&a, 1) || set(&b, 1);
        assert(a == 1); assert(b == 0);
    }
    {
        int a; int b;
        set(&a, 0) || set(&b, 1);
        assert(a == 1); assert(b == 1);
    }
    {
        int a; int b;
        set(&a, 0) || set(&b, 0);
        assert(a == 1); assert(b == 1);
    }
}
