module array;

import backend.proxy;
import base;
import types;

int getArrayLen(Generator output, Type arrayType, int arrayReg)
{
    return output.fun.field(arrayType.emit(output.platform), arrayReg, 0);
}

class ArrayLength : Expression
{
    Expression arrayValue;

    Type type_;

    this(Expression arrayValue, Type type_) {
        this.arrayValue = arrayValue;
        this.type_ = type_;
    }

    Type type()
    {
        return this.type_;
    }

    int emit(Generator output)
    {
        int arrayReg = this.arrayValue.emit(output);

        return getArrayLen(output, this.arrayValue.type(), arrayReg);
    }
}

int getArrayPtr(Generator output, Type arrayType, int arrayReg)
{
    return output.fun.field(arrayType.emit(output.platform), arrayReg, 1);
}

class ArrayPointer : Expression
{
    Type elementType;

    Expression arrayValue;

    this(Type elementType, Expression arrayValue) { this.elementType = elementType; this.arrayValue = arrayValue; }

    Type type()
    {
        return new Pointer(this.elementType);
    }

    int emit(Generator output)
    {
        int arrayReg = this.arrayValue.emit(output);

        return getArrayPtr(output, this.arrayValue.type(), arrayReg);
    }
}

int makeArray(Generator output, Type elementType, int lenReg, int ptrReg)
{
    void* voidp = (new Pointer(new Void)).emit(output.platform);
    void* wordType = nativeWordType(output.platform).emit(output.platform);

    // TODO allocaless
    void* structType = (new Array(elementType)).emit(output.platform);
    int structReg = output.fun.alloca(structType);
    int lenField = output.fun.fieldOffset(structType, structReg, 0);
    int ptrField = output.fun.fieldOffset(structType, structReg, 1);

    output.fun.store(wordType, lenField, lenReg);
    output.fun.store(voidp, ptrField, ptrReg);
    return output.fun.load(structType, structReg);
}

class ArrayExpression : Expression
{
    Expression pointer;

    Expression length;

    this(Expression pointer, Expression length) { this.pointer = pointer; this.length = length; }

    Type type()
    {
        Pointer ptrType = this.pointer.type().instanceOf(Pointer);
        assert(!!ptrType);
        return new Array(ptrType.target);
    }

    int emit(Generator output)
    {
        int pointer = this.pointer.emit(output);
        int length = this.length.emit(output);

        return makeArray(output, this.type().instanceOf(Array).elementType, length, pointer);
    }
}

class ArraySlice : Expression
{
    Expression array;

    Expression lower;

    Expression upper;

    this(Expression array, Expression lower, Expression upper)
    {
        this.array = array;
        this.lower = lower;
        this.upper = upper;
    }

    Type type() { return this.array.type(); }

    int emit(Generator output)
    {
        void* voidp = output.platform.pointerType(output.platform.voidType());
        void* intType = output.platform.intType();

        Array arrayType = this.array.type().instanceOf(Array);
        assert(!!arrayType); // , "slice of non-array");
        int elementSize = output.platform.size(arrayType.elementType.emit(output.platform));

        int arrayReg = this.array.emit(output);
        int lowerReg = this.lower.emit(output);
        int upperReg = this.upper.emit(output);
        int ptr = getArrayPtr(output, arrayType, arrayReg);
        // ptr = ptr + lower
        int lowerOffset = output.fun.binop(
            "*", output.platform.nativeWordSize(),
            lowerReg, output.fun.wordLiteral(output.platform, elementSize));
        int newPtr = output.fun.call(voidp, "ptr_offset", new int[](0) ~ ptr ~ lowerOffset);
        // len = upper - lower
        int newLen = output.fun.binop(
            "-", output.platform.nativeWordSize(),
            upperReg, lowerReg);

        return makeArray(output, arrayType.elementType, newLen, newPtr);
    }
}

class ArrayEqual : Expression
{
    Expression left;

    Expression right;

    this(Expression left, Expression right)
    {
        this.left = left;
        this.right = right;
    }

    Type type() { return new Integer; }

    int emit(Generator output)
    {
        Array leftArray = this.left.type().instanceOf(Array);
        Array rightArray = this.right.type().instanceOf(Array);
        assert(leftArray && rightArray);
        // TODO temp expr once array properties work on nonreferences
        assert(leftArray.same(rightArray));
        int left = this.left.emit(output);
        int right = this.right.emit(output);
        int leftLen = getArrayLen(output, leftArray, left);
        int rightLen = getArrayLen(output, rightArray, right);
        int leftPtr = getArrayPtr(output, leftArray, left);
        int rightPtr = getArrayPtr(output, rightArray, right);
        int leftSize = output.fun.wordLiteral(
            output.platform,
            output.platform.size(leftArray.elementType.emit(output.platform)));
        return output.fun.call(output.platform.intType(), "_arraycmp", new int[](0)
            ~ leftPtr ~ rightPtr ~ leftLen ~ rightLen ~ leftSize);
    }
}
