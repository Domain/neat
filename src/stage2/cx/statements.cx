module cx.statements;

import backend.base;
import cx.base;
import cx.expr;
import cx.parser;
import cx.parser_base;

class ASTAssignStatement : ASTStatement
{
    ASTSymbol target;

    ASTSymbol value;

    Loc loc;

    this(ASTSymbol target, ASTSymbol value, Loc loc)
    {
        this.target = target;
        this.value = value;
        this.loc = loc;
    }

    override Statement compile(Context context)
    {
        Symbol target = this.target.compile(context);
        Expression value = beExpression(this.value.compile(context));
        Reference targetref = target.instanceOf(Reference);
        this.loc.assert2s(!!targetref, "target of assignment must be a reference");
        value = implicitConvertTo(value, targetref.type(), this.loc);
        return new AssignStatement(targetref, value);
    }
}

class AssignStatement : Statement
{
    Reference target;

    Expression value;

    this(Reference target, Expression value) { this.target = target; this.value = value; }

    override void emit(Generator output)
    {
        Type targetType = this.target.type();
        Type valueType = this.value.type();

        assert(targetType.same(valueType)); // format!"%s - %s => %s - %s"(this.target, this.value, targetType, valueType));*/

        int target_reg = this.target.emitLocation(output);
        int value_reg = this.value.emit(output);

        output.fun.store(valueType.emit(output.platform), target_reg, value_reg);
    }
}

class NoopStatement : Statement
{
    this() { }

    override void emit(Generator generator)
    {
    }
}

class ReturnStatement : Statement
{
    Expression value;

    this(Expression value) { this.value = value; }

    override void emit(Generator output)
    {
        int reg = this.value.emit(output);

        output.fun.ret(reg);
    }
}

class IfStatement : Statement
{
    Expression test;

    Statement then;

    Statement else_;

    this(Expression test, Statement then, Statement else_)
    {
        this.test = test;
        this.then = then;
        this.else_ = else_;
    }

    override void emit(Generator output)
    {
        int reg = this.test.emit(output);

        string label = output.fun.getLabel();
        output.fun.testBranch(reg, label ~ "_then", label ~ "_else");

        output.fun.setLabel(label ~ "_then");
        this.then.emit(output);
        output.fun.branch(label ~ "_fin");

        output.fun.setLabel(label ~ "_else");
        if (this.else_)
        {
            this.else_.emit(output);
            output.fun.branch(label ~ "_fin");
        }
        output.fun.setLabel(label ~ "_fin");
    }
}

class ASTExprStatement : ASTStatement
{
    ASTSymbol value;

    this(ASTSymbol value) { this.value = value; }

    override Statement compile(Context context)
    {
        return new ExprStatement(beExpression(this.value.compile(context)));
    }
}

class ExprStatement : Statement
{
    Expression value;

    this(Expression value) { this.value = value; }

    override void emit(Generator output)
    {
        this.value.emit(output); // discard reg
    }
}

class WhileLoop : Statement
{
    Expression cond;

    Statement body_;

    this(Expression cond, Statement body_) { this.cond = cond; this.body_ = body_; }

    override void emit(Generator output)
    {
        /**
         * start:
         * if (cond) goto body; else goto end;
         * body:
         * goto start
         * end:
         */
        auto label = output.fun.getLabel();
        output.fun.branch(label ~ "_start");

        output.fun.setLabel(label ~ "_start"); // start:
        int condReg = this.cond.emit(output);
        output.fun.testBranch(condReg, label ~ "_body", label ~ "_end");

        output.fun.setLabel(label ~ "_body");
        this.body_.emit(output);
        output.fun.branch(label ~ "_start");
        output.fun.setLabel(label ~ "_end");
    }
}

class SequenceStatement : Statement
{
    Statement[] statements;

    this(Statement[] statements) { this.statements = statements; }

    override void emit(Generator output)
    {
        for (int i = 0; i < this.statements.length; i = i + 1)
        {
            this.statements[i].emit(output);
        }
    }
}
