module cx.base;

import backend.base;
import cx.parser_base;
import helpers;

void assert2s(int test, string msg) { if (!test) { print(msg); assert(false); } }
void assert2s2(int test, string a, string b) { if (!test) { print(a ~ b); assert(false); } }
void assert2s3(int test, string a, string b, string c) { if (!test) { print(a ~ b ~ c); assert(false); } }
void assert2s4(int test, string a, string b, string c, string d) {
    if (!test) { print(a ~ b ~ c ~ d); assert(false); } }
void assert2s5(int test, string a, string b, string c, string d, string e) {
    if (!test) { print(a ~ b ~ c ~ d ~ e); assert(false); } }

// something that can be referenced by a name
class Symbol
{
}

/**
 * A namespace is a lexical environment that supports identifier lookup.
 * Note that this means "foo", not "a.foo".
 */
class Namespace
{
    Namespace parent; // lexical parent

    this(Namespace parent) { this.parent = parent; }

    // frame is a pointer to the stack frame or what was in the 'this'/'context' parameter.
    Symbol lookup(string name, Expression frame) { assert(false); }
}

class Context
{
    Platform platform;

    Namespace namespace;

    MacroState macroState;

    this(Platform platform, Namespace namespace, MacroState macroState)
    {
        this.platform = platform;
        this.namespace = namespace;
        this.macroState = macroState;
    }

    Context withNamespace(Namespace namespace)
    {
        return new Context(this.platform, namespace, this.macroState);
    }
}

class LexicalContext
{
    MacroState macroState;

    this(MacroState macroState) { this.macroState = macroState; }
}

class ASTSymbol
{
    Symbol compile(Context context) { assert(false); }
}

// TODO move back to cx.statements once CompileMacroState is generic
class ASTStatement
{
    Statement compile(Context context) { assert(false); }
}

class Statement
{
    void emit(Generator output) { assert(false); }
}

class Type : Symbol
{
    BackendType emit(Platform platform) { assert(false); }
    bool same(Type type) { assert(false); }
    string repr() { assert(false); }

    Expression implicitConvertFrom(Expression source)
    {
        return null;
    }

    Expression implicitConvertTo(Expression source, Type target)
    {
        return null;
    }

    Expression truthy(Expression expr, Loc loc)
    {
        return null;
    }
}

class ASTType
{
    Type compile(Context context) { assert(false); }
}

class Generator
{
    BackendModule mod;

    BackendFunction fun;

    Platform platform;

    int frameReg;

    this(Platform platform, BackendModule mod)
    {
        this.platform = platform;
        this.mod = mod;
        this.fun = null;
    }

    bool once(string name)
    {
        return this.mod.once(name);
    }
}

class Expression : Symbol
{
    Type type() { assert(false); }
    int emit(Generator output) { assert(false); }
}

Expression beExpression(Symbol symbol)
{
    Expression expr = symbol.instanceOf(Expression);
    assert(!!expr);
    return expr;
}

Expression beExpression2(Symbol symbol, Loc loc)
{
    Expression expr = symbol.instanceOf(Expression);
    loc.assert2s(!!expr, "expression expected");
    return expr;
}

class Reference : Expression
{
    int emitLocation(Generator output) { assert(false); }
}

class RegExpr : Expression
{
    Type type_;

    int reg;

    this(Type type_, int reg) { this.type_ = type_; this.reg = reg; }

    override Type type()
    {
        return this.type_;
    }

    override int emit(Generator output)
    {
        return this.reg;
    }
}

class PointerCast : Expression
{
    Type target;

    Expression value;

    this(Type target, Expression value) {
        this.target = target;
        this.value = value;
    }

    override Type type()
    {
        return this.target;
    }

    override int emit(Generator output)
    {
        int reg = this.value.emit(output);
        return output.fun.bitcast(reg, this.target.emit(output.platform));
    }
}

class Argument
{
    string name;

    Type type;

    this(string name, Type type)
    {
        this.name = name;
        this.type = type;
    }
}

class FunctionDeclaration : Symbol
{
    string name;

    Type ret;

    Argument[] args;

    this(string name, Type ret, Argument[] args)
    {
        this.name = name;
        this.ret = ret;
        this.args = args;
    }

    string mangle() { return this.name; } // TODO extern

    void declare(Generator generator)
    {
        auto argTypes = new BackendType[](this.args.length);
        for (int i = 0; i < this.args.length; i = i + 1)
            argTypes[i] = this.args[i].type.emit(generator.platform);

        generator.mod.declare(
            this.name,
            true,
            this.ret.emit(generator.platform),
            argTypes
        );
    }
}

/**
 * This is in base because it's circular with Context.
 */
class MacroState
{
    Macro[] macros;

    MacroState[] imports;

    this() { }

    MacroState dup() {
        auto newState = new MacroState;
        newState.macros = new Macro[](this.macros.length);
        for (int i = 0; i < this.macros.length; i = i + 1)
            newState.macros[i] = this.macros[i];
        newState.imports = new MacroState[](this.imports.length);
        for (int i = 0; i < this.imports.length; i = i + 1)
            newState.imports[i] = this.imports[i];
        return newState;
    }

    void applyMacro(MacroArgs args) {
        this.applyMacroExported(args);
        if (args.done()) return;
        for (int i = 0; i < this.imports.length; i = i + 1) {
            this.imports[i].applyMacroExported(args);
            if (args.done()) return;
        }
    }

    void applyMacroExported(MacroArgs args) {
        for (int i = 0; i < this.macros.length; i = i + 1) {
            this.macros[i].apply(args);
            if (args.done()) return;
        }
    }

    void addImport(MacroState target) {
        this.imports = this.imports ~ target;
    }

    void addMacro(Macro macro_) {
        this.macros = this.macros ~ macro_;
    }
}

class Macro
{
    void apply(MacroArgs args) { assert(false); }
}

// macro subclasses are differentiated by args
class MacroArgs
{
    bool done() { assert(false); }
}

// hook the ASTCall (with ASTIdentifier) -> Call transform
class CallMacroArgs : MacroArgs
{
    string name;
    ASTSymbol[] symbols;
    Context context;
    Loc loc;
    Expression transformed; // out
    this(string name, ASTSymbol[] symbols, Context context, Loc loc) {
        this.name = name;
        this.symbols = symbols;
        this.context = context;
        this.loc = loc;
        this.transformed = null;
    }
    override bool done() { return !!this.transformed; }
}

// hook parseStatement
class ParseStatementArgs : MacroArgs
{
    Parser parser;
    LexicalContext lexicalContext;
    ASTStatement statement; // out
    this(Parser parser, LexicalContext lexicalContext) {
        this.parser = parser;
        this.lexicalContext = lexicalContext;
        this.statement = null;
    }
    override bool done() { return !!this.statement; }
}

// hook parseExpressionBase
class ParseExpressionBaseArgs : MacroArgs
{
    Parser parser;
    LexicalContext lexicalContext;
    ASTSymbol symbol; // out
    this(Parser parser, LexicalContext lexicalContext) {
        this.parser = parser;
        this.lexicalContext = lexicalContext;
        this.symbol = null;
    }
    override bool done() { return !!this.symbol; }
}
