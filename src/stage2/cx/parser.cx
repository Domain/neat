module cx.parser;

import cx.base;
// TODO public import
import cx.parser_base;
import helpers;
import cx.linenr;

extern(C) int cxruntime_isAlpha(char);
extern(C) int cxruntime_isDigit(char);

bool parseNumber(Parser parser, int* ip)
{
    parser.begin();
    bool negative = false;
    if (parser.accept("-"))
        negative = true;
    parser.strip();
    if (parser.eof() || !cxruntime_isDigit(parser.text()[0]))
    {
        parser.revert();
        return false;
    }
    string number;
    while (!parser.eof() && cxruntime_isDigit(parser.text()[0]))
    {
        number = number ~ parser.text()[0 .. 1];
        *parser.textp() = parser.text()[1 .. parser.text().length];
    }
    parser.commit();
    int i = atoi(number);
    if (negative) i = 0 - i; // TODO move to "-a" form instead of parsing negative numbers here
    *ip = i;
    return true;
}

bool isAlnum(string s)
{
    return cxruntime_isAlpha(s[0]) || cxruntime_isDigit(s[0]);
}

string parseIdentifier2(Parser parser, string allowedChars)
{
    parser.begin();
    parser.strip();
    if (parser.text().length == 0 || (!cxruntime_isAlpha(parser.text()[0])
        && parser.text()[0 .. 1] != "_")
        && find(allowedChars, parser.text()[0 .. 1]) == -1)
    {
        parser.revert();
        return "";
    }
    string identifier;
    while (parser.text().length > 0 && (
        isAlnum(parser.text()[0 .. 1])
        || parser.text()[0 .. 1] == "_"
        || find(allowedChars, parser.text()[0 .. 1]) != -1))
    {
        identifier = identifier ~ parser.text()[0 .. 1];
        *parser.textp() = parser.text()[1 .. parser.text().length];
    }
    parser.commit();
    return identifier;
}

string parseIdentifier(Parser parser)
{
    return parseIdentifier2(parser, "");
}

bool acceptIdentifier(Parser parser, string identifier)
{
    parser.begin();

    string nextIdent = parseIdentifier(parser);

    if (nextIdent != identifier)
    {
        parser.revert();
        return false;
    }
    parser.commit();
    return true;
}
