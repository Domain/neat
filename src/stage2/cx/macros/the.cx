module cx.macros.the;

import cx.base;
import cx.expr;
import cx.parser;
import cx.parser_base;
import cx.statements;
import cx.struct_;
import cx.stuff;
import cx.types;

class ASTTheValue : ASTSymbol
{
    ASTType type;

    Loc loc;

    this(ASTType type, Loc loc) { this.type = type; this.loc = loc; }

    override Expression compile(Context context)
    {
        auto type = this.type.compile(context);
        auto namespace = context.namespace;
        while (namespace) {
            auto varDeclScope = namespace.instanceOf(VarDeclScope);
            if (varDeclScope) {
                for (int i = 0; i < varDeclScope.variables.length; i = i + 1) {
                    auto var = varDeclScope.variables[i];

                    if (var.name == "") {
                        auto frame = new StackFrame(var.stackFrameType);
                        auto member = new StructMember(frame, var.offset);

                        if (member.type().same(type))
                            return member;
                    }
                }
                namespace = namespace.parent;
            }
            else namespace = null;
        }
        this.loc.assert2s2(false, "Type not found: ", type.repr());
    }
}

class TheValue : Macro
{
    this() { }
    override void apply(MacroArgs args) {
        auto args = args.instanceOf(ParseExpressionBaseArgs);
        if (args) {
            args.symbol = this.parse(args.parser, args.lexicalContext);
        }
    }

    ASTSymbol parse(Parser parser, LexicalContext context)
    {
        if (!acceptIdentifier(parser, "the"))
        {
            return null;
        }
        ASTType type = parseType(parser, context);
        return new ASTTheValue(type, parser.loc());
    }
}

void addTheValueMacro(MacroState macroState)
{
    macroState.addMacro(new TheValue);
}

macro(addTheValueMacro);
