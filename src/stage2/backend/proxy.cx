module backend.proxy;

class BranchRecord {
    void* ptr;
    this(void* ptr) { this.ptr = ptr; }
    void resolve(int target) {
        _branchRecord_resolve(this.ptr, target);
    }
}

class TestBranchRecord {
    void* ptr;
    this(void* ptr) { this.ptr = ptr; }
    void resolveThen(int target) {
        _testBranchRecord_resolveThen(this.ptr, target);
    }
    void resolveElse(int target) {
        _testBranchRecord_resolveElse(this.ptr, target);
    }
}

class BackendFunction {
    void* ptr;
    this(void* ptr) { this.ptr = ptr; }
    int arg(int index) {
        return _backendFunction_arg(this.ptr, index);
    }
    int intLiteral(int value) {
        return _backendFunction_intLiteral(this.ptr, value);
    }
    int voidLiteral() {
        return _backendFunction_voidLiteral(this.ptr);
    }
    int binop(string op, int left, int right) {
        return _backendFunction_binop(this.ptr, op, left, right);
    }
    int call(void* ret, char[] name, int[] args) {
        return _backendFunction_call(this.ptr, ret, name, args.ptr, args.length);
    }
    int load(void* backendType, int reg) {
        return _backendFunction_load(this.ptr, backendType, reg);
    }
    int alloca(void* backendType) {
        return _backendFunction_alloca(this.ptr, backendType);
    }
    int fieldOffset(void* backendType, int reg, int index) {
        return _backendFunction_fieldOffset(this.ptr, backendType, reg, index);
    }
    void store(void* backendType, int target_reg, int value_reg) {
        return _backendFunction_store(this.ptr, backendType, target_reg, value_reg);
    }
    void ret(int reg) {
        _backendFunction_ret(this.ptr, reg);
    }
    BranchRecord branch() {
        return new BranchRecord(_backendFunction_branch(this.ptr));
    }
    TestBranchRecord testBranch(int reg) {
        return new TestBranchRecord(_backendFunction_testBranch(this.ptr, reg));
    }
    int blockIndex()
    {
        return _backendFunction_blockIndex(this.ptr);
    }
}

class BackendModule {
    void* ptr;
    this(void* ptr) { this.ptr = ptr; }
    BackendFunction define(char[] name, void* ret, void*[] args)
    {
        return new BackendFunction(_backendModule_define(this.ptr, name, ret, args.ptr, args.length));
    }
    void call(void* ret_ptr, char[] name, void*[] args)
    {
        _backendModule_call(this.ptr, ret_ptr, name, args.ptr, args.length);
    }
    void dump()
    {
        _backendModule_dump(this.ptr);
    }
}

class Backend {
    void* ptr;
    this() { this.ptr = _backend(); }
    BackendModule createModule() {
        return new BackendModule(_backend_createModule(this.ptr));
    }
}

class Platform {
    void* backend;
    void* platform;
    this() { this.backend = _backend(); this.platform = _platform(); }
    void* intType() {
        return _backend_intType();
    }
    void* structType(void*[] members) {
        return _backend_structType(members);
    }
}
