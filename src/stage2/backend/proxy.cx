module backend.proxy;

import backend.base;
import helpers;

/*
extern(C) void assert(int);

extern(C) int _backendFunction_arg(void*, int);
extern(C) int _backendFunction_intLiteral(void*, long);
extern(C) int _backendFunction_longLiteral(void*, long);
extern(C) int _backendFunction_stringLiteral(void*, string);
extern(C) int _backendFunction_voidLiteral(void*);
extern(C) int _backendFunction_symbolList(void*, string);
extern(C) int _backendFunction_binop(void*, string, int, int, int);
extern(C) int _backendFunction_zeroExtend(void*, int, int, int);
extern(C) int _backendFunction_signExtend(void*, int, int, int);
extern(C) int _backendFunction_call(void*, void*, string, int[]);
extern(C) int _backendFunction_callFuncPtr(void*, void*, int, int[]);
extern(C) int _backendFunction_getFuncPtr(void*, string);
extern(C) int _backendFunction_load(void*, void*, int);
extern(C) int _backendFunction_alloca(void*, void*);
extern(C) int _backendFunction_field(void*, void*, int, int);
extern(C) int _backendFunction_fieldOffset(void*, void*, int, int);
extern(C) void _backendFunction_store(void*, void*, int, int);
extern(C) int _backendFunction_ret(void*, int);
extern(C) void _backendFunction_branch(void*, string);
extern(C) void _backendFunction_testBranch(void*, int, string, string);
extern(C) void _backendFunction_setLabel(void*, string);
extern(C) string _backendFunction_getLabel(void*);

class ProxyBackendFunction : BackendFunction {
    void* ptr;
    this(void* ptr) { this.ptr = ptr; }
    override int arg(int index) {
        return _backendFunction_arg(this.ptr, index);
    }
    override int intLiteral(long value) {
        return _backendFunction_intLiteral(this.ptr, value);
    }
    override int longLiteral(long value) {
        return _backendFunction_longLiteral(this.ptr, value);
    }
    override int wordLiteral(Platform platform, long value) {
        if (platform.nativeWordSize() == 4)
            return this.intLiteral(value);
        else if (platform.nativeWordSize() == 8)
            return this.longLiteral(value);
        else assert(false);
    }
    override int stringLiteral(string text) {
        return _backendFunction_stringLiteral(this.ptr, text);
    }
    override int voidLiteral() {
        return _backendFunction_voidLiteral(this.ptr);
    }
    override int symbolList(string name) {
        return _backendFunction_symbolList(this.ptr, name);
    }
    override int binop(string op, int size, int left, int right) {
        return _backendFunction_binop(this.ptr, op, size, left, right);
    }
    override int bitcast(int from, BackendType to) {
        return from; // noop in interpreter
    }
    override int zeroExtend(int value, int from, int to) {
        return _backendFunction_zeroExtend(this.ptr, value, from, to);
    }
    override int signExtend(int value, int from, int to) {
        return _backendFunction_signExtend(this.ptr, value, from, to);
    }
    override int call(BackendType ret, string name, int[] args) {
        return _backendFunction_call(this.ptr, proxyEncode(ret), name, args);
    }
    override int getFuncPtr(string name) {
        return _backendFunction_getFuncPtr(this.ptr, name);
    }
    override int callFuncPtr(BackendType type, int reg, int[] args) {
        return _backendFunction_callFuncPtr(this.ptr, proxyEncode(type), reg, args);
    }
    override int load(BackendType backendType, int reg) {
        return _backendFunction_load(this.ptr, proxyEncode(backendType), reg);
    }
    override int alloca(BackendType backendType) {
        return _backendFunction_alloca(this.ptr, proxyEncode(backendType));
    }
    override int field(BackendType backendType, int reg, int index) {
        return _backendFunction_field(this.ptr, proxyEncode(backendType), reg, index);
    }
    override int fieldOffset(BackendType backendType, int reg, int index) {
        return _backendFunction_fieldOffset(this.ptr, proxyEncode(backendType), reg, index);
    }
    override void store(BackendType backendType, int target_reg, int value_reg) {
        return _backendFunction_store(this.ptr, proxyEncode(backendType), target_reg, value_reg);
    }
    override void ret(int reg) {
        _backendFunction_ret(this.ptr, reg);
    }
    override void branch(string label) {
        _backendFunction_branch(this.ptr, label);
    }
    override void testBranch(int reg, string thenLabel, string elseLabel) {
        _backendFunction_testBranch(this.ptr, reg, thenLabel, elseLabel);
    }
    override void setLabel(string label) {
        _backendFunction_setLabel(this.ptr, label);
    }
    override void getLabel() {
        return _backendFunction_getLabel(this.ptr);
    }
}

extern(C) void* _backend_charType();
extern(C) void* _backend_intType();
extern(C) void* _backend_longType();
extern(C) void* _backend_voidType();
extern(C) void* _backend_pointerType(void*);
extern(C) void* _backend_functionPointerType(void*, void*[]);
extern(C) void* _backend_structType(void*[]);

void* proxyEncode(BackendType type)
{
    if (type.instanceOf(BackendLongType)) return _backend_longType();
    if (type.instanceOf(BackendIntType)) return _backend_intType();
    if (type.instanceOf(BackendCharType)) return _backend_charType();
    if (type.instanceOf(BackendVoidType)) return _backend_voidType();
    auto backendPointerType = type.instanceOf(BackendPointerType);
    if (backendPointerType) {
        return _backend_pointerType(proxyEncode(backendPointerType.target));
    }
    auto backendStructType = type.instanceOf(BackendStructType);
    if (backendStructType) {
        void*[] members = new void*[](backendStructType.members.length);
        for (int i = 0; i < backendStructType.members.length; i = i + 1)
            members[i] = proxyEncode(backendStructType.members[i]);
        return _backend_structType(members);
    }
    auto backendFpType = type.instanceOf(BackendFunctionPointerType);
    if (backendFpType) {
        void* ret = proxyEncode(backendFpType.ret);
        void*[] args = new void*[](backendFpType.args.length);
        for (int i = 0; i < backendFpType.args.length; i = i + 1)
            args[i] = proxyEncode(backendFpType.args[i]);
        return _backend_functionPointerType(ret, args);
    }
    assert(false);
}

extern(C) void* _backendModule(); // current module
extern(C) void* _backendModule_define(void*, string, void*, void*[]);
extern(C) void* _backendModule_defineSymbolList(void*, string, string[]);
extern(C) void* _backendModule_backend(void*);
extern(C) void* _backendModule_platform(void*);
// extern(C) void _backendModule_call(void*, void*, string, void*[]);
extern(C) void _backendModule_callMain(void*, string[]);
extern(C) void _backendModule_callMacroFun(void*, string, void*);
extern(C) void _backendModule_dump(void*);

class ProxyBackendModule : BackendModule {
    void* ptr;
    this(void* ptr) { this.ptr = ptr; }
    // no-op on interpreter
    override void declare(string name, bool extern_, BackendType ret, BackendType[] args) { }
    override BackendFunction define(string name, BackendType ret, BackendType[] args)
    {
        void* proxyRet = proxyEncode(ret);
        void*[] proxyArgs = new void*[](args.length);
        for (int i = 0; i < args.length; i = i + 1) proxyArgs[i] = proxyEncode(args[i]);
        return new ProxyBackendFunction(_backendModule_define(this.ptr, name, proxyRet, proxyArgs));
    }
    override void defineSymbolList(string name, string[] symbols)
    {
        _backendModule_defineSymbolList(this.ptr, name, symbols);
    }
    /*void call(void* ret_ptr, string name, void*[] args)
    {
        _backendModule_call(this.ptr, ret_ptr, name, args);
    }*/
    void callMain(string[] args)
    {
        _backendModule_callMain(this.ptr, args);
    }
    void callMacroFun(string name, void* ptr)
    {
        return _backendModule_callMacroFun(this.ptr, name, ptr);
    }
    void dump()
    {
        _backendModule_dump(this.ptr);
    }
}

extern(C) void* _backend_createModule(void*, void*);

class ProxyBackend : Backend {
    void* ptr;
    this() { this.ptr = _backendModule_backend(_backendModule()); }
    override ProxyBackendModule createModule(Platform platform) {
        return new ProxyBackendModule(
            _backend_createModule(this.ptr, _backendModule_platform(_backendModule())));
    }
}

extern(C) int _platform_size(void*, void*);
extern(C) int _platform_nativeWordSize(void*);

class ProxyPlatform : Platform {
    void* platform;
    this() {
        this.platform = _backendModule_platform(_backendModule());
    }
    override int nativeWordSize() {
        return _platform_nativeWordSize(this.platform);
    }
}
*/
