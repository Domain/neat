module backend.base;

extern(C) void assert(int);

class BranchRecord
{
    void resolve(int block) { assert(false); }
}

class TestBranchRecord
{
    void resolveThen(int target) { assert(false); }
    void resolveElse(int target) { assert(false); }
}

class BackendFunction
{
    int arg(int index) { assert(false); }
    int intLiteral(int value) { assert(false); }
    int longLiteral(long value) { assert(false); }
    int wordLiteral(Platform platform, size_t value) { assert(false); }
    int stringLiteral(string text) { assert(false); }
    int voidLiteral() { assert(false); }
    int symbolList(string name) { assert(false); }
    int binop(string op, int size, int left, int right) { assert(false); }
    int zeroExtend(int value, int from, int to) { assert(false); }
    int call(void* ret, string name, int[] args) { assert(false); }
    int getFuncPtr(string name) { assert(false); }
    int callFuncPtr(void* type, int reg, int[] args) { assert(false); }
    int load(void* backendType, int reg) { assert(false); }
    int alloca(void* backendType) { assert(false); }
    int field(void* backendType, int reg, int index) { assert(false); }
    int fieldOffset(void* backendType, int reg, int index) { assert(false); }
    void store(void* backendType, int target_reg, int value_reg) { assert(false); }
    void ret(int reg) { assert(false); }
    BranchRecord branch() { assert(false); }
    TestBranchRecord testBranch(int reg) { assert(false); }
    int blockIndex() { assert(false); }
}

class BackendModule
{
    BackendFunction define(string name, void* ret, void*[] args) { assert(false); }
    void defineSymbolList(string name, string[] symbols) { assert(false); }
}

class Backend
{
    BackendModule createModule() { assert(false); }
}

class Platform {
    void* longType() { assert(false); }
    void* intType() { assert(false); }
    void* charType() { assert(false); }
    void* voidType() { assert(false); }
    void* structType(void*[] members) { assert(false); }
    void* pointerType(void* target) { assert(false); }
    void* functionPointerType(void* ret, void*[] args) { assert(false); }
    int nativeWordSize() { assert(false); }
    int size(void* target) { assert(false); }
}
