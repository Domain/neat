module main_the;

import backend.base;
import backend.llvm;
import backend.proxy;
import cx.array;
import cx.base;
import cx.expr;
import cx.stuff;
import cx.types;
macro import cx.macros.the;
import helpers;

extern(C) int getpid();

string removeExtension(string s) {
    string shortened = s;
    while (shortened.length > 0 && shortened[shortened.length - 1 .. shortened.length] != ".")
        shortened = shortened[0 .. shortened.length - 1];
    if (shortened.length) return shortened[0 .. shortened.length - 1]; else return s;
}

string removeSlashes(string s) {
    string result;
    for (int i = 0; i < s.length; i = i + 1) {
        if (s[i .. i + 1] == "/") result = result ~ "_";
        else result = result ~ s[i .. i + 1];
    }
    return result;
}

void main(string[] args)
{
    print("# stage2");
    string[] includes;
    string output;
    string[] nextArgs;
    {
        string[] remArgs;
        for (size_t i = 0; i < args.length; i = i + 1) {
            string arg = args[i];

            if (arg.length >= 2 && arg[0 .. 2] == "-I") {
                includes = includes ~ arg[2 .. arg.length];
            } else if (arg == "--") {
                nextArgs = args[i + 1 .. args.length];
                i = args.length; // break
            } else if (arg == "-o") {
                assert(i + 1 < args.length);
                output = args[i + 1];
                i = i + 1;
            } else {
                remArgs = remArgs ~ arg;
            }
        }
        args = remArgs;
    }

    if (args.length != 1)
    {
        print("Usage: stage2 [-Iincludepath]* FILE.cx");
        return;
    }
    if (!output.length) output = removeExtension(args[0]);

    cxruntime_system("mkdir -p .obj");

    auto builtins = new Module("", new MacroState, null);
    // auto backend = new ProxyBackend();
    auto backend = new LLVMBackend();
    // auto platform = new ProxyPlatform();
    auto = new DefaultPlatform();
    auto backendModule = backend.createModule(the DefaultPlatform);

    builtins.add("string", new Array(new Character));
    builtins.add("bool", new Integer);
    builtins.add("true", new Literal(1));
    builtins.add("false", new Literal(0));
    builtins.add("null", new NullExpr(new Pointer(new Void)));
    builtins.add("size_t", nativeWordType(the DefaultPlatform));

    auto defaultImports = new Module[](0) ~ builtins;
    auto = new ModuleCache;
    auto = new ModuleParserConfig(the DefaultPlatform, includes, defaultImports, the ModuleCache);
    auto = parseModule(args[0], the ModuleParserConfig, null);
    auto = new Generator(the DefaultPlatform, backendModule);

    (the Module).emit(the Generator);

    // backendModule.callMain(nextArgs);
    auto llFile = ".obj/" ~ removeSlashes(output) ~ ".ll";
    cxruntime_file_write(llFile, backendModule.output.text());
    // int pid = getpid();
    // cxruntime_system("cat /proc/" ~ itoa(pid) ~ "/status");
    string cmd = "clang -rdynamic " ~ llFile ~ " src/stage2/runtime.c -o " ~ output ~ " -ldl";
    print("$ " ~ cmd);
    cxruntime_system(cmd);
}
