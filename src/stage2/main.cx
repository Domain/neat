module main;

import backend.base;
import backend.llvm;
import backend.proxy;
import cx.array;
import cx.base;
import cx.expr;
import cx.stuff;
import cx.types;
import helpers;

void main(string[] args)
{
    print("# stage2");
    string[] includes;
    string[] nextArgs;
    {
        string[] remArgs;
        for (size_t i = 0; i < args.length; i = i + 1) {
            string arg = args[i];

            if (arg.length >= 2 && arg[0 .. 2] == "-I") {
                includes = includes ~ arg[2 .. arg.length];
            } else if (arg == "--") {
                nextArgs = args[i + 1 .. args.length];
                i = args.length; // break
            } else {
                remArgs = remArgs ~ arg;
            }
        }
        args = remArgs;
    }

    if (args.length != 1)
    {
        print("Usage: stage2 [-Iincludepath]* FILE.cx");
        return;
    }
    auto builtins = new Module("", new CompileMacroState, null);
    // auto backend = new ProxyBackend();
    auto backend = new LLVMBackend();
    // auto platform = new ProxyPlatform();
    auto platform = new DefaultPlatform();
    auto backendModule = backend.createModule(platform);

    builtins.add("string", new Array(new Character));
    builtins.add("bool", new Integer);
    builtins.add("true", new Literal(1));
    builtins.add("false", new Literal(0));
    builtins.add("null", new NullExpr(new Pointer(new Void)));
    if (platform.nativeWordSize() == 4)
        builtins.add("size_t", new Integer);
    else if (platform.nativeWordSize() == 8)
        builtins.add("size_t", new Long);
    else assert(false);

    auto defaultImports = new Module[](0) ~ builtins;
    auto cache = new ModuleCache;
    auto modParseConfig = new ModuleParserConfig(platform, includes, defaultImports, cache);
    auto toplevel = parseModule(args[0], modParseConfig, null);
    auto output = new Generator(platform, backendModule);

    toplevel.emit(output);

    // backendModule.callMain(nextArgs);
    cxruntime_file_write("hello2.ll", backendModule.output.text());
    print("$ clang -rdynamic hello2.ll runtime.c -o hello2 -ldl");
    cxruntime_system("clang -rdynamic hello2.ll runtime.c -o hello2 -ldl");
}
