module main;

import array;
import backend.proxy;
import base;
import expr;
import parser;
import statements;
import struct_;
import types;

extern(C) bool cxruntime_file_exists(string file);
extern(C) string cxruntime_file_read(string file);

class ASTArgument
{
    string name;

    ASTType type;

    this(string name, ASTType type)
    {
        this.name = name;
        this.type = type;
    }
}

class Function : FunctionDeclaration
{
    ASTStatement statement;

    this(string name, Type ret, Argument[] args, ASTStatement statement)
    {
        this.name = name;
        this.ret = ret;
        this.args = args;
        this.statement = statement;
    }

    void emit(Generator generator, Context module_)
    {
        assert(!generator.fun);
        void*[] argTypes = new void*[](this.args.length);
        for (int i = 0; i < this.args.length; i = i + 1)
            argTypes[i] = this.args[i].type.emit(module_.platform);
        assert(!!module_);
        generator.fun = generator.mod.define(
            this.name,
            this.ret.emit(module_.platform),
            argTypes
        );
        auto stackframe = new FunctionScope(module_.namespace);
        auto argscope = new VarDeclScope(stackframe, true);
        auto argAssignments = new Statement[](this.args.length);
        for (int i = 0; i < this.args.length; i = i + 1)
        {
            Argument arg = this.args[i];
            auto argExpr = new ArgExpr(i, arg.type);

            argAssignments[i] = argscope.declare(arg.name, arg.type, argExpr, null);
        }

        Statement functionBody = this.statement.compile(module_.withNamespace(argscope));

        generator.frameReg = generator.fun.alloca(stackframe.structType().emit(module_.platform));

        for (int i = 0; i < argAssignments.length; i = i + 1)
        {
            argAssignments[i].emit(generator);
        }

        functionBody.emit(generator);
        generator.fun.ret(generator.fun.voidLiteral());
        generator.fun = null;
        generator.frameReg = 0;
    }
}

class ASTFunction
{
    string name;

    ASTType ret;

    ASTArgument[] args;

    bool isDeclaration;

    ASTStatement statement;

    this(string name, ASTType ret, ASTArgument[] args, bool isDeclaration, ASTStatement statement)
    {
        this.name = name;
        this.ret = ret;
        this.args = args;
        this.isDeclaration = isDeclaration;
        this.statement = statement;
    }

    FunctionDeclaration compile(Context context)
    {
        auto arguments = new Argument[](this.args.length);
        for (int i = 0; i < this.args.length; i = i + 1)
        {
            ASTArgument arg = this.args[i];
            Type type = arg.type.compile(context);
            arguments[i] = new Argument(arg.name, type);
        }

        if (this.isDeclaration)
        {
            return new FunctionDeclaration(
                this.name, this.ret.compile(context), arguments);
        }

        return new Function(
            this.name,
            this.ret.compile(context),
            arguments,
            this.statement);
    }
}

ASTArgument[] parseIdentifierList(Parser parser)
{
    ASTArgument[] args;
    while (!parser.accept(")"))
    {
        if (args.length)
        {
            if (!parser.accept(","))
            {
                parser.fail("',' or ')' expected");
            }
        }
        ASTType argtype = parseType(parser);
        string argname = parseIdentifier(parser);
        args = args ~ new ASTArgument(argname, argtype);
    }
    return args;
}

class ArgExpr : Expression
{
    int index;

    Type type_;

    this(int index, Type type_) { this.index = index; this.type_ = type_; }

    override int emit(Generator output)
    {
        return output.fun.arg(this.index);
    }

    override Type type()
    {
        return this.type_;
    }
}

class FuncPtrCall : Expression
{
    Expression funcPtr;

    Expression[] args;

    Loc loc;

    this(Expression funcPtr, Expression[] args, Loc loc) {
        this.funcPtr = funcPtr;
        this.args = args;
        this.loc = loc;
    }

    override Type type()
    {
        return this.funcPtr.type().instanceOf(FunctionPointer).ret;
    }

    override int emit(Generator output)
    {
        FunctionPointer type = this.funcPtr.type().instanceOf(FunctionPointer);

        this.loc.assert2s4(
            type.args.length == this.args.length,
            "expected ", ltoa(type.args.length), " args, not ", ltoa(this.args.length));

        int[] regs = new int[](this.args.length);
        for (int i = 0; i < this.args.length; i = i + 1)
        {
            auto arg = this.args[i];
            arg = implicitConvertTo(arg, type.args[i], this.loc);

            regs[i] = arg.emit(output);
        }
        return output.fun.callFuncPtr(
            type.emit(output.platform), this.funcPtr.emit(output), regs);
    }
}

class ClassMethodPtr : Symbol
{
    Expression funcPtr;

    Expression thisPtr;

    this(Expression funcPtr, Expression thisPtr) { this.funcPtr = funcPtr; this.thisPtr = thisPtr; }
}

Expression call(Symbol target, Expression[] args, Loc loc)
{
    if (target.instanceOf(FunctionDeclaration))
    {
        return new Call(target.instanceOf(FunctionDeclaration), args, loc);
    }
    ClassMethodPtr method = target.instanceOf(ClassMethodPtr);
    if (method)
    {
        Expression[] combinedArgs;
        combinedArgs = combinedArgs ~ method.thisPtr;
        for (int i = 0; i < args.length; i = i + 1) combinedArgs = combinedArgs ~ args[i];
        return new FuncPtrCall(method.funcPtr, combinedArgs, loc);
    }
    Expression expr = target.instanceOf(Expression);
    if (expr && expr.type().instanceOf(FunctionPointer))
    {
        return new FuncPtrCall(expr, args, loc);
    }
    loc.assert2s(false, "unknown call target");
}

class ASTCall : ASTSymbol
{
    ASTSymbol target;

    ASTSymbol[] args;

    Loc loc;

    this(ASTSymbol target, ASTSymbol[] args, Loc loc)
    {
        this.target = target;
        this.args = args;
        this.loc = loc;
    }

    override Expression compile(Context context)
    {
        auto target = this.target.compile(context);
        auto args = new Expression[](this.args.length);
        for (int i = 0; i < this.args.length; i = i + 1)
        {
            args[i] = beExpression(this.args[i].compile(context));
        }
        return call(target, args, this.loc);
    }
}

ASTSymbol[] parseSymbolList(Parser parser)
{
    ASTSymbol[] args;
    while (!parser.accept(")"))
    {
        if (args.length > 0)
            parser.expect(",");

        args = args ~ parseExpression(parser);
    }
    return args;
}

ASTCall parseCall(Parser parser, ASTSymbol base)
{
    parser.begin();
    if (!parser.accept("("))
    {
        parser.revert();
        return null;
    }
    auto args = parseSymbolList(parser);
    parser.commit();
    return new ASTCall(base, args, parser.loc());
}

class ASTIndexAccess : ASTSymbol
{
    ASTSymbol base;

    ASTSymbol index;

    Loc loc;

    this(ASTSymbol base, ASTSymbol index, Loc loc) {
        this.base = base;
        this.index = index;
        this.loc = loc;
    }

    override Expression compile(Context context)
    {
        Type wordType = nativeWordType(context.platform);
        Expression base = beExpression(this.base.compile(context));
        Expression index = beExpression(this.index.compile(context));

        index = implicitConvertTo(index, wordType, this.loc);
        Array array_ = base.type().instanceOf(Array);
        if (array_)
        {
            // TODO bounds check
            base = new ArrayPointer(array_.elementType, base);
        }

        Pointer basePtr = base.type().instanceOf(Pointer);

        assert(!!basePtr); // expected pointer for index base

        auto ptrOffsetArgs = new Argument[](2);
        ptrOffsetArgs[0] = new Argument("", new Pointer(new Void));
        ptrOffsetArgs[1] = new Argument("", wordType);
        auto ptr_offset = new FunctionDeclaration("ptr_offset", new Pointer(new Void), ptrOffsetArgs);
        int size = context.platform.size(basePtr.target.emit(context.platform));
        BinaryOp offset = new BinaryOp("*", index, new Literal(size));
        assert(offset.type().same(wordType));

        auto callArgs = new Expression[](2);
        callArgs[0] = base;
        callArgs[1] = offset;
        return new Dereference(new PointerCast(base.type(), new Call(ptr_offset, callArgs, this.loc)));
    }
}

class ASTArraySlice : ASTSymbol
{
    ASTSymbol array;

    ASTSymbol lower;

    ASTSymbol upper;

    Loc loc;

    this(ASTSymbol array, ASTSymbol lower, ASTSymbol upper, Loc loc)
    {
        this.array = array;
        this.lower = lower;
        this.upper = upper;
        this.loc = loc;
    }

    override Symbol compile(Context context)
    {
        Type wordType = nativeWordType(context.platform);

        return new ArraySlice(
            beExpression(this.array.compile(context)),
            implicitConvertTo(beExpression(this.lower.compile(context)), wordType, this.loc),
            implicitConvertTo(beExpression(this.upper.compile(context)), wordType, this.loc));
    }
}

ASTIndexAccess parseIndex(Parser parser, ASTSymbol base)
{
    parser.begin();
    if (!parser.accept("["))
    {
        parser.revert();
        return null;
    }
    ASTSymbol index = parseExpression(parser);
    assert(!!index); // "index expected"
    if (parser.accept(".."))
    {
        ASTSymbol lower = index;
        ASTSymbol upper = parseExpression(parser);
        parser.assert_(!!upper, "slice upper bound expected");
        parser.expect("]");
        parser.commit();
        return new ASTArraySlice(base, lower, upper, parser.loc());
    }
    parser.expect("]");
    parser.commit();
    return new ASTIndexAccess(base, index, parser.loc());
}

Symbol accessMember(Symbol base, string member, Loc loc)
{
    if (base.instanceOf(Expression))
    {
        Expression baseExpr = beExpression(base);

        while (baseExpr.type().instanceOf(Pointer)) {
            baseExpr = new Dereference(baseExpr);
        }
        Struct structType = baseExpr.type().instanceOf(Struct);
        if (structType)
        {
            loc.assert2s(!!baseExpr.instanceOf(Reference), "TODO struct member of value");
            int memberOffset = -1;
            for (int i = 0; i < structType.members.length; i = i + 1)
            {
                if (structType.members[i].name == member) memberOffset = i;
            }
            loc.assert2s2(memberOffset != -1, "no such member ", member);
            return new StructMember(baseExpr.instanceOf(Reference), memberOffset);
        }
        Class classType = baseExpr.type().instanceOf(Class);
        if (classType)
        {
            assert(classType.resolved());
            ClassMethod[] vtable = classType.vtable();
            int methodOffset = -1;
            for (int i = 0; i < vtable.length; i = i + 1) {
                if (vtable[i].name == member) methodOffset = i;
            }
            Expression asStructPtr = new PointerCast(new Pointer(classType.dataStruct()), baseExpr);
            if (methodOffset != -1)
            {
                Reference classInfo = new Dereference(new PointerCast(
                    new Pointer(classType.classInfoStruct()), new StructMember(new Dereference(asStructPtr), 0)));
                // TODO dereference-into-symbol so we can '&' it again
                auto funcPtr = new StructMember(classInfo, methodOffset);
                return new ClassMethodPtr(funcPtr, baseExpr);
            }

            ClassMember[] members = classType.allMembers();
            int memberOffset = -1;
            for (int i = 0; i < members.length; i = i + 1)
                if (members[i].name == member) memberOffset = i;
            loc.assert2s4(memberOffset != -1, "no such member ", member, " in ", classType.name);
            return new StructMember(new Dereference(asStructPtr), memberOffset);
        }

        loc.assert2s2(false, "expected struct/class type for member, not ", baseExpr.type().repr());
    }
    assert(false); // , format!"expected expression for member access, not %s"(base));
}

class ASTMember : ASTSymbol
{
    ASTSymbol base;

    string member;

    Loc loc;

    this(ASTSymbol base, string member, Loc loc) {
        this.base = base;
        this.member = member;
        this.loc = loc;
    }

    override Symbol compile(Context context)
    {
        Symbol base = this.base.compile(context);
        Expression expr = base.instanceOf(Expression);

        if (expr && expr.type().instanceOf(Array) && this.member == "length")
        {
            return new ArrayLength(expr, nativeWordType(context.platform));
        }

        if (expr && expr.type().instanceOf(Array) && this.member == "ptr")
        {
            return new ArrayPointer(expr.type().instanceOf(Array).elementType, expr);
        }

        return accessMember(base, this.member, this.loc);
    }
}

ASTMember parseMember(Parser parser, ASTSymbol base)
{
    parser.begin();
    if (parser.accept("..") || !parser.accept(".")) // don't accept '..'
    {
        parser.revert();
        return null;
    }
    string name = parseIdentifier(parser);
    parser.assert_(name.length > 0, "member expected");
    parser.commit();
    return new ASTMember(base, name, parser.loc());
}

class ASTInstanceOf : ASTSymbol
{
    ASTSymbol base;

    ASTType target;

    Loc loc;

    this(ASTSymbol base, ASTType target, Loc loc) {
        this.base = base;
        this.target = target;
        this.loc = loc;
    }

    override Symbol compile(Context context)
    {
        Expression base = beExpression(this.base.compile(context));
        assert(!!base.type().instanceOf(Class));
        Class target = this.target.compile(context).instanceOf(Class);
        assert(!!target);
        Symbol instanceOf = accessMember(base, "__instanceof", this.loc);
        Expression name = new StringLiteral(target.name);
        return new PointerCast(target, call(instanceOf, new Expression[](0) ~ name, this.loc));
    }
}

ASTSymbol parseInstanceOf(Parser parser, ASTSymbol left)
{
    parser.begin();
    if (!(parser.accept(".") && parser.accept("instanceOf")))
    {
        parser.revert();
        return null;
    }
    parser.expect("(");
    ASTType type = parseType(parser);
    parser.expect(")");
    parser.commit();
    return new ASTInstanceOf(left, type, parser.loc());
}

ASTSymbol parseProperties(Parser parser, ASTSymbol current)
{
    while (true)
    {
        bool matched = false;
        if (!matched) {
            ASTSymbol expr = parseInstanceOf(parser, current);
            if (expr)
            {
                matched = true;
                current = expr;
            }
        }
        if (!matched) {
            ASTSymbol expr = parseCall(parser, current);
            if (expr)
            {
                matched = true;
                current = expr;
            }
        }
        if (!matched) {
            ASTSymbol expr = parseMember(parser, current);
            if (expr)
            {
                matched = true;
                current = expr;
            }
        }
        if (!matched) {
            ASTSymbol expr = parseIndex(parser, current);
            if (expr)
            {
                matched = true;
                current = expr;
            }
        }
        if (!matched) return current;
    }
}

class ASTDereference : ASTSymbol
{
    ASTSymbol base;

    this(ASTSymbol base) { this.base = base; }

    override Symbol compile(Context context)
    {
        return new Dereference(beExpression(this.base.compile(context)));
    }
}

class Dereference : Reference
{
    Expression base;

    this(Expression base) { this.base = base; }

    override Type type()
    {
        Type superType = this.base.type();
        Pointer pointerType = superType.instanceOf(Pointer);
        assert(!!pointerType);
        return pointerType.target;
    }

    override int emit(Generator output)
    {
        int reg = this.emitLocation(output);

        return output.fun.load(this.type().emit(output.platform), reg);
    }

    override int emitLocation(Generator output)
    {
        return this.base.emit(output);
    }
}

class FunctionReference : Expression
{
    Function fun;

    this(Function fun) { this.fun = fun; }

    override Type type()
    {
        auto argTypes = new Type[](this.fun.args.length);
        for (int i = 0; i < this.fun.args.length; i = i + 1)
            argTypes[i] = this.fun.args[i].type;

        return new FunctionPointer(this.fun.ret, argTypes);
    }

    override int emit(Generator output)
    {
        return output.fun.getFuncPtr(this.fun.name);
    }
}

class ASTReference : ASTSymbol
{
    ASTSymbol base;

    this(ASTSymbol base) { this.base = base; }

    override Expression compile(Context context)
    {
        // &function
        ASTVariable var = this.base.instanceOf(ASTVariable);
        if (var) {
            Symbol target = context.namespace.lookup(var.name);
            Function fun = target.instanceOf(Function);

            if (fun) return new FunctionReference(fun);
        }
        Symbol baseExpression = this.base.compile(context);

        assert(!!baseExpression.instanceOf(Reference));

        return new ReferenceExpression(baseExpression.instanceOf(Reference));
    }
}

class ReferenceExpression : Expression
{
    Reference base;

    this(Reference base) { this.base = base; }

    override Type type()
    {
        Type superType = this.base.type();

        return new Pointer(superType);
    }

    override int emit(Generator output)
    {
        return this.base.emitLocation(output);
    }
}

class SizeOf : Expression
{
    Type type_;

    this(Type type_) { this.type_ = type_; }

    override Type type() { return new Integer; }

    override int emit(Generator output)
    {
        int size = output.platform.size(this.type_.emit(output.platform));

        return output.fun.intLiteral(size);
    }
}

class NewClassExpression : Expression
{
    Class classType;

    this(Class classType) { this.classType = classType; }

    override Type type()
    {
        return this.classType;
    }

    override int emit(Generator output)
    {
        // oh boy!
        Struct classDataStruct = this.classType.dataStruct();
        void* voidp = (new Pointer(new Void)).emit(output.platform);
        int classInfoPtr = output.fun.symbolList(this.classType.vtableSymbol);
        int classDataSize = output.platform.size(classDataStruct.emit(output.platform));
        int classPtr = output.fun.call(
            voidp, "malloc", new int[](0) ~ output.fun.wordLiteral(output.platform, classDataSize));
        int classInfoTarget = output.fun.fieldOffset(classDataStruct.emit(output.platform), classPtr, 0);
        output.fun.store(voidp, classInfoTarget, classInfoPtr);

        return classPtr;
    }
}

class CallCtorExpression : Expression
{
    Expression classptr;

    Expression[] args;

    Loc loc;

    this(Expression classptr, Expression[] args, Loc loc) {
        this.classptr = classptr;
        this.args = args;
        this.loc = loc;
    }

    override Type type()
    {
        return this.classptr.type();
    }

    override int emit(Generator output)
    {
        int reg = this.classptr.emit(output);
        RegExpr expr = new RegExpr(this.classptr.type(), reg);

        call(accessMember(expr, "this", this.loc), this.args, this.loc).emit(output);
        return reg;
    }
}

class ASTNewExpression : ASTSymbol
{
    ASTType type;

    ASTSymbol[] args;

    Loc loc;

    this(ASTType type, ASTSymbol[] args, Loc loc) {
        this.type = type;
        this.args = args;
        this.loc = loc;
    }

    override Symbol compile(Context context)
    {
        Type type = this.type.compile(context);

        Class classType = type.instanceOf(Class);
        if (classType) {
            Expression classptr = new NewClassExpression(classType);

            auto argExpressions = new Expression[](this.args.length);
            for (int i = 0; i < this.args.length; i = i + 1)
                argExpressions[i] = beExpression(this.args[i].compile(context));
            assert(!!classType); // , format!"expected new <class>, not %s"(type));
            return new CallCtorExpression(classptr, argExpressions, this.loc);
        }
        Array arrayType = type.instanceOf(Array);
        if (arrayType) {
            assert(this.args.length == 1);

            Type wordType = nativeWordType(context.platform);
            auto elementSize = new SizeOf(arrayType.elementType);
            // TODO only compute length once
            auto length = implicitConvertTo(beExpression(this.args[0].compile(context)), wordType, this.loc);
            auto byteLength = new BinaryOp("*", elementSize, length);

            auto mallocArgs = new Argument[](1);
            mallocArgs[0] = new Argument("", wordType);
            auto malloc = new FunctionDeclaration("malloc", new Pointer(new Void), mallocArgs);

            auto mallocParams = new Expression[](1);
            mallocParams[0] = byteLength;
            PointerCast dataPtr = new PointerCast(
                new Pointer(arrayType.elementType),
                call(malloc, mallocParams, this.loc));

            return new ArrayExpression(dataPtr, length);
        }
        assert(false); // format!"don't know how to allocate %s"(type));
    }
}

ASTSymbol parseExpressionLeaf(Parser parser)
{
    if (parser.accept("*"))
    {
        ASTSymbol next = parseExpressionLeaf(parser);

        assert(!!next);
        return new ASTDereference(next);
    }
    if (parser.accept("&"))
    {
        ASTSymbol next = parseExpressionLeaf(parser);

        assert(!!next);
        return new ASTReference(next);
    }
    if (acceptIdentifier(parser, "new"))
    {
        ASTType type = parseType(parser);
        ASTSymbol[] args;
        if (parser.accept("("))
        {
            args = parseSymbolList(parser);
        }

        return new ASTNewExpression(type, args, parser.loc());
    }
    if (parser.accept("!"))
    {
        ASTSymbol next = parseExpressionLeaf(parser);

        assert(!!next);
        return new ASTNegation(next, parser.loc());
    }
    ASTSymbol currentExpr = parseExpressionBase(parser);
    assert(!!currentExpr);
    return parseProperties(parser, currentExpr);
}

class ASTVariable : ASTSymbol
{
    string name;

    this(string name) { this.name = name; }

    override Symbol compile(Context context)
    {
        Symbol symbol = context.namespace.lookup(this.name);
        if (!symbol) {
            print(this.name ~ " not found");
            assert(false);
        }
        return symbol;
    }
}

class ASTLiteral : ASTSymbol
{
    int value;

    this(int value) { this.value = value; }

    override Symbol compile(Context context)
    {
        return new Literal(this.value);
    }
}

class ASTStringLiteral : ASTSymbol
{
    string text;

    this(string text) { this.text = text; }

    override Symbol compile(Context context)
    {
        return new StringLiteral(this.text);
    }
}

string replaceEscapes(string text)
{
    string result;
    int i;
    while (i < text.length)
    {
        string ch = text[i .. i + 1];
        i = i + 1;
        if (ch == "\\")
        {
            string ctl = text[i .. i + 1];
            i = i + 1;
            if (ctl == "r") {
                result = result ~ "\r";
            } else if (ctl == "n") {
                result = result ~ "\n";
            } else if (ctl == "t") {
                result = result ~ "\t";
            } else if (ctl == "\"") {
                result = result ~ "\"";
            } else if (ctl == "\\") {
                result = result ~ "\\";
            } else {
                print("Unknown control sequence \\" ~ ctl);
                assert(false);
            }
        }
        else
        {
            result = result ~ ch;
        }
    }
    return result;
}

ASTStringLiteral parseStringLiteral(Parser parser, string endMarker)
{
    int matchLen;
    string start = parser.text();
    while (parser.text().length < endMarker.length || parser.text()[0 .. endMarker.length] != endMarker)
    {
        if (parser.text().length == 0)
        {
            parser.fail("expected end of string, got end of file");
        }
        if (parser.text()[0 .. 1] == "\\") {
            matchLen = matchLen + 1;
            *parser.textp() = parser.text()[1 .. parser.text().length];
        }
        matchLen = matchLen + 1;
        *parser.textp() = parser.text()[1 .. parser.text().length];
    }
    string str = start[0 .. matchLen];
    if (!parser.accept(endMarker))
    {
        parser.fail("this should never happen");
    }

    return new ASTStringLiteral(replaceEscapes(str));
}

ASTSymbol parseExpressionBase(Parser parser)
{
    string name = parseIdentifier(parser);
    if (name.length)
    {
        return new ASTVariable(name);
    }
    int i;
    if (parseNumber(parser, &i))
    {
        return new ASTLiteral(i);
    }
    if (parser.accept("\""))
    {
        return parseStringLiteral(parser, "\"");
    }
    if (parser.accept("("))
    {
        ASTSymbol result = parseExpression(parser);

        parser.expect(")");
        return result;
    }
    parser.fail("Base expression expected.");
    assert(false);
}

ASTSymbol parseAddSubCat(Parser parser, ASTSymbol left, int myLevel)
{
    while (true)
    {
        if (parser.accept("+"))
        {
            ASTSymbol right = parseArithmetic(parser, myLevel + 1);

            left = new ASTBinaryOp("+", left, right, parser.loc());
        }
        else if (parser.accept("-"))
        {
            ASTSymbol right = parseArithmetic(parser, myLevel + 1);

            left = new ASTBinaryOp("-", left, right, parser.loc());
        }
        else if (parser.accept("~"))
        {
            ASTSymbol right = parseArithmetic(parser, myLevel + 1);

            left = new ASTBinaryOp("~", left, right, parser.loc());
        }
        else return left;
    }
}

ASTSymbol parseMul(Parser parser, ASTSymbol left, int myLevel)
{
    while (true)
    {
        if (parser.accept("*"))
        {
            ASTSymbol right = parseArithmetic(parser, myLevel + 1);

            left = new ASTBinaryOp("*", left, right, parser.loc());
        }
        else return left;
    }
}

ASTSymbol parseBoolAnd(Parser parser, ASTSymbol left, int myLevel)
{
    while (true)
    {
        if (parser.accept("&&"))
        {
            ASTSymbol right = parseArithmetic(parser, myLevel + 1);

            left = new ASTBinaryOp("&&", left, right, parser.loc());
        } else return left;
    }
}

ASTSymbol parseBoolOr(Parser parser, ASTSymbol left, int myLevel)
{
    while (true)
    {
        if (parser.accept("||"))
        {
            ASTSymbol right = parseArithmetic(parser, myLevel + 1);

            left = new ASTBinaryOp("||", left, right, parser.loc());
        } else return left;
    }
}

class ASTNegation : ASTSymbol
{
    ASTSymbol next;

    Loc loc;

    this(ASTSymbol next, Loc loc) { this.next = next; this.loc = loc; }

    override Expression compile(Context context)
    {
        Expression isTrue = truthy(beExpression(this.next.compile(context)), this.loc);

        return new BinaryOp("==", isTrue, new Literal(0));
    }
}

ASTSymbol parseComparison(Parser parser, ASTSymbol left, int myLevel)
{
    if (parser.accept("=="))
    {
        ASTSymbol right = parseArithmetic(parser, myLevel + 1);

        return new ASTBinaryOp("==", left, right, parser.loc());
    }
    if (parser.accept("!=")) // same as !(a == b)
    {
        ASTSymbol right = parseArithmetic(parser, myLevel + 1);

        return new ASTNegation(new ASTBinaryOp("==", left, right, parser.loc()), parser.loc());
    }
    if (parser.accept(">="))
    {
        ASTSymbol right = parseArithmetic(parser, myLevel + 1);

        return new ASTBinaryOp(">=", left, right, parser.loc());
    }
    if (parser.accept(">"))
    {
        ASTSymbol right = parseArithmetic(parser, myLevel + 1);

        return new ASTBinaryOp(">", left, right, parser.loc());
    }
    if (parser.accept("<="))
    {
        ASTSymbol right = parseArithmetic(parser, myLevel + 1);

        return new ASTBinaryOp("<=", left, right, parser.loc());
    }
    if (parser.accept("<"))
    {
        ASTSymbol right = parseArithmetic(parser, myLevel + 1);

        return new ASTBinaryOp("<", left, right, parser.loc());
    }
    return left;
}

ASTSymbol parseArithmetic(Parser parser, int level)
{
    ASTSymbol left = parseExpressionLeaf(parser);

    if (level <= 4)
    {
        left = parseMul(parser, left, 4);
    }
    if (level <= 3)
    {
        left = parseAddSubCat(parser, left, 3);
    }
    if (level <= 2)
    {
        left = parseComparison(parser, left, 2);
    }
    if (level <= 1)
    {
        left = parseBoolAnd(parser, left, 1);
    }
    if (level <= 0)
    {
        left = parseBoolOr(parser, left, 0);
    }
    return left;
}

ASTSymbol parseExpression(Parser parser)
{
    return parseArithmetic(parser, 0);
}

class ASTReturnStatement : ASTStatement
{
    ASTSymbol value;

    this(ASTSymbol value) { this.value = value; }

    override Statement compile(Context context)
    {
        Expression expr = beExpression(this.value.compile(context));

        return new ReturnStatement(expr);
    }
}

class ASTVoidExpression : ASTSymbol
{
    this() { }
    override Expression compile(Context context) { return new VoidExpression; }
}

class VoidExpression : Expression
{
    this() { }
    override Type type() { return new Void; }
    override int emit(Generator generator)
    {
        return generator.fun.voidLiteral();
    }
}

ASTReturnStatement parseReturn(Parser parser)
{
    parser.begin();
    string identifier = parseIdentifier(parser);
    if (identifier != "return")
    {
        parser.revert();
        return null;
    }
    ASTSymbol expr;
    if (parser.accept(";")) // return;
    {
        expr = new ASTVoidExpression;
    }
    else
    {
        expr = parseExpression(parser);
        parser.expect(";");
    }
    parser.commit();
    return new ASTReturnStatement(expr);
}

class StackFrame : Reference
{
    Type targetType;

    this(Type targetType) { this.targetType = targetType; }

    override Type type()
    {
        return this.targetType;
    }

    override int emit(Generator generator)
    {
        assert(false);
    }

    override int emitLocation(Generator generator)
    {
        return generator.frameReg;
    }
}

class FunctionScope : Namespace
{
    Type[] variableTypes;

    this(Namespace parent) { this.parent = parent; }

    StructMember declare(Type type)
    {
        this.variableTypes = this.variableTypes ~ type;
        // having cast sure would be nice...
        int len;
        while (len < this.variableTypes.length) len = len + 1;

        return new StructMember(
            new StackFrame(this.structType()),
            len - 1);
    }

    Struct structType()
    {
        auto members = new StructMemberDeclaration[](this.variableTypes.length);
        for (int i = 0; i < this.variableTypes.length; i = i + 1)
        {
            members[i] = new StructMemberDeclaration("", this.variableTypes[i]);
        }
        return new Struct("", members);
    }

    override Symbol lookup(string name)
    {
        assert(!!this.parent);
        return this.parent.lookup(name);
    }
}

FunctionScope findFunctionScope(Namespace namespace)
{
    FunctionScope functionScope = namespace.instanceOf(FunctionScope);
    if (functionScope) return functionScope;
    assert(!!namespace.parent);
    return findFunctionScope(namespace.parent);
}

class DeclaredVariable
{
    string name;

    Expression value;

    this(string name, Expression value) { this.name = name; this.value = value; }
}

class VarDeclScope : Namespace
{
    DeclaredVariable[] declarations;

    bool frameBase; // base of function frame. all variables here are parameters.

    this(Namespace parent, bool frameBase)
    {
        this.parent = parent;
        this.frameBase = frameBase;
    }

    Statement declare(string name, Type type, Expression value, Loc loc)
    {
        StructMember member = findFunctionScope(this).declare(type);

        this.appendDeclaration(name, member);
        return new AssignStatement(member, implicitConvertTo(value, type, loc));
    }

    Statement declareZeroInit(string name, Type type)
    {
        StructMember member = findFunctionScope(this).declare(type);

        this.appendDeclaration(name, member);
        return new NoopStatement;
    }

    void appendDeclaration(string name, StructMember member)
    {
        this.declarations = this.declarations ~ new DeclaredVariable(name, member);
    }

    override Symbol lookup(string name)
    {
        for (int i = 0; i < this.declarations.length; i = i + 1)
        {
            if (this.declarations[i].name == name)
            {
                return this.declarations[i].value;
            }
        }
        if (this.parent)
            return this.parent.lookup(name);
        return null;
    }
}

VarDeclScope findVarDeclScope(Namespace namespace)
{
    VarDeclScope varDeclScope = namespace.instanceOf(VarDeclScope);
    if (varDeclScope) return varDeclScope;
    assert(!!namespace.parent);
    return findVarDeclScope(namespace.parent);
}

class ASTIfStatement : ASTStatement
{
    ASTSymbol test;

    ASTStatement then;

    ASTStatement else_;

    Loc loc;

    this(ASTSymbol test, ASTStatement then, ASTStatement else_, Loc loc)
    {
        this.test = test;
        this.then = then;
        this.else_ = else_;
        this.loc = loc;
    }

    override Statement compile(Context context)
    {
        auto ifscope = new VarDeclScope(context.namespace, false);
        Symbol test = this.test.compile(context.withNamespace(ifscope));
        Statement then = this.then.compile(context.withNamespace(ifscope));
        Statement else_;
        if (this.else_) {
            auto elsescope = new VarDeclScope(context.namespace, false);
            else_ = this.else_.compile(context.withNamespace(elsescope));
        }

        return new IfStatement(truthy(beExpression(test), this.loc), then, else_);
    }
}

ASTIfStatement parseIf(Parser parser)
{
    parser.begin();
    string identifier = parseIdentifier(parser);
    if (identifier != "if")
    {
        parser.revert();
        return null;
    }
    parser.expect("(");
    ASTSymbol expr = parseExpression(parser);
    parser.expect(")");
    ASTStatement thenStmt = parseStatement(parser);
    ASTStatement elseStatement;
    if (parser.accept("else"))
    {
        elseStatement = parseStatement(parser);
    }
    parser.commit();
    return new ASTIfStatement(expr, thenStmt, elseStatement, parser.loc());
}

class ASTScopeStatement : ASTStatement
{
    ASTStatement[] statements;

    this(ASTStatement[] statements) { this.statements = statements; }

    override Statement compile(Context context)
    {
        auto subscope = new VarDeclScope(context.namespace, false);
        auto statements = new Statement[](this.statements.length);
        for (int i = 0; i < this.statements.length; i = i + 1)
        {
            statements[i] = this.statements[i].compile(context.withNamespace(subscope));
        }
        return new SequenceStatement(statements);
    }
}

ASTScopeStatement parseScope(Parser parser)
{
    if (!parser.accept("{"))
    {
        return null;
    }
    ASTStatement[] statements;
    while (!parser.accept("}"))
    {
        ASTStatement stmt = parseStatement(parser);

        statements = statements ~ stmt;
    }
    return new ASTScopeStatement(statements);
}

ASTAssignStatement parseAssignment(Parser parser)
{
    parser.begin();
    ASTSymbol lhs = parseExpressionLeaf(parser);
    if (!lhs || !parser.accept("="))
    {
        parser.revert();
        return null;
    }
    ASTSymbol expr = parseExpression(parser);
    parser.commit();
    return new ASTAssignStatement(lhs, expr, parser.loc());
}

ASTAssignStatement parseAssignStatement(Parser parser)
{
    ASTAssignStatement ret = parseAssignment(parser);
    if (ret)
    {
        parser.expect(";");
        return ret;
    }
    return null;
}

class ASTVarDeclStatement : ASTStatement
{
    string name;

    bool infer;

    ASTType type;

    ASTSymbol initial;

    Loc loc;

    this(string name, bool infer, ASTType type, ASTSymbol initial, Loc loc)
    {
        assert(infer == !type);
        assert(!infer || initial);

        this.name = name;
        this.infer = infer;
        this.type = type;
        this.initial = initial;
        this.loc = loc;
    }

    override Statement compile(Context context)
    {
        Type type;
        if (this.type) type = this.type.compile(context);
        if (this.initial)
        {
            auto initial = beExpression(this.initial.compile(context));
            if (this.infer) {
                assert(!type);
                type = initial.type();
            }

            return findVarDeclScope(context.namespace)
                .declare(this.name, type, initial, this.loc);
        }
        else
        {
            return findVarDeclScope(context.namespace)
                .declareZeroInit(this.name, type);
        }
    }
}

ASTVarDeclStatement parseVarDecl(Parser parser)
{
    parser.begin();
    bool infer = false;
    ASTType type;
    if (acceptIdentifier(parser, "auto")) {
        infer = true;
    } else {
        type = parseType(parser);
        if (!type)
        {
            parser.revert();
            return null;
        }
    }
    string name = parseIdentifier(parser);
    if (!name.length)
    {
        parser.revert();
        return null;
    }
    ASTSymbol initial;
    if (infer) {
        parser.expect("=");
        initial = parseExpression(parser);
        assert(!!initial);
    }
    else if (parser.accept("=")) {
        initial = parseExpression(parser);
        assert(!!initial);
    }
    parser.expect(";");
    parser.commit();
    return new ASTVarDeclStatement(name, infer, type, initial, parser.loc());
}

class ASTWhile : ASTStatement
{
    ASTSymbol cond;

    ASTStatement body_;

    Loc loc;

    this(ASTSymbol cond, ASTStatement body_, Loc loc) {
        this.cond = cond;
        this.body_ = body_;
        this.loc = loc;
    }

    override Statement compile(Context context)
    {
        auto subscope = new VarDeclScope(context.namespace, false);
        Expression condExpr = truthy(beExpression(this.cond.compile(context.withNamespace(subscope))), this.loc);
        Statement bodyStmt = this.body_.compile(context.withNamespace(subscope));

        return new WhileLoop(condExpr, bodyStmt);
    }
}

ASTWhile parseWhile(Parser parser)
{
    if (!acceptIdentifier(parser, "while"))
    {
        return null;
    }
    parser.expect("(");
    ASTSymbol cond = parseExpression(parser);
    parser.expect(")");
    ASTStatement body_ = parseStatement(parser);

    return new ASTWhile(cond, body_, parser.loc());
}

ASTExprStatement parseExprStatement(Parser parser)
{
    parser.begin();
    ASTSymbol value = parseExpression(parser);
    if (!value)
    {
        parser.revert();
        return null;
    }
    parser.expect(";");
    parser.commit();
    return new ASTExprStatement(value);
}

class ASTForLoop : ASTStatement
{
    ASTVarDeclStatement declareLoopVar;

    ASTSymbol condition;

    ASTStatement step;

    ASTStatement body_;

    this(ASTVarDeclStatement declareLoopVar, ASTSymbol condition, ASTStatement step, ASTStatement body_)
    {
        this.declareLoopVar = declareLoopVar;
        this.condition = condition;
        this.step = step;
        this.body_ = body_;
    }

    override Statement compile(Context context)
    {
        /*
         * hack until break/continue:
         * for (decl; test; step) body
         * decl; while (test) { body; step; }
         */
        Context forscope = context.withNamespace(new VarDeclScope(context.namespace, false));

        Statement decl = this.declareLoopVar.compile(forscope);
        Expression condition = beExpression(this.condition.compile(forscope));
        auto loopStatements = new Statement[](2);
        loopStatements[0] = this.body_.compile(forscope);
        loopStatements[1] = this.step.compile(forscope);
        Statement loop = new WhileLoop(condition, new SequenceStatement(loopStatements));

        auto sequenceStatements = new Statement[](2);
        sequenceStatements[0] = decl;
        sequenceStatements[1] = loop;

        return new SequenceStatement(sequenceStatements);
    }
}

ASTForLoop parseFor(Parser parser)
{
    if (!acceptIdentifier(parser, "for"))
    {
        return null;
    }
    parser.expect("(");
    ASTVarDeclStatement varDecl = parseVarDecl(parser);
    ASTSymbol condition = parseExpression(parser);
    parser.expect(";");
    ASTStatement step = parseAssignment(parser);
    parser.expect(")");
    ASTStatement body_ = parseStatement(parser);

    return new ASTForLoop(varDecl, condition, step, body_);
}

ASTStatement parseStatement(Parser parser)
{
    {
        ASTStatement stmt = parseReturn(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseIf(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseWhile(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseFor(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseScope(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseVarDecl(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseAssignStatement(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseExprStatement(parser);
        if (stmt) return stmt;
    }
    parser.fail("statement expected");
}

ASTFunction parseFunction(Parser parser)
{
    parser.begin();
    ASTType ret = parseType(parser);
    if (!ret)
    {
        parser.revert();
        return null;
    }
    string name = parseIdentifier(parser);
    parser.expect("(");
    ASTArgument[] args = parseIdentifierList(parser);
    ASTStatement stmt = parseStatement(parser);
    parser.commit();
    return new ASTFunction(name, ret, args, false, stmt);
}

class ModuleEntry
{
    string name;

    Symbol value;

    this(string name, Symbol value) { this.name = name; this.value = value; }
}

class Module : Namespace
{
    string name;

    this(string name)
    {
        this.parent = null;
        this.name = name;
    }

    Module[] imports;

    ModuleEntry[] entries;

    void add(string name, Symbol symbol)
    {
        this.entries = this.entries ~ new ModuleEntry(name, symbol);
    }

    void addImport(Module module_)
    {
        this.imports = this.imports ~ module_;
    }

    void emit(Generator generator)
    {
        assert(!generator.fun);
        // TODO each only once!
        for (int i = 0; i < this.imports.length; i = i + 1)
            this.imports[i].emit(generator);

        for (int i = 0; i < this.entries.length; i = i + 1) {
            ModuleEntry entry = this.entries[i];
            Class class_ = entry.value.instanceOf(Class);
            if (class_)
            {
                class_.resolve();
                auto methods = new string[](class_.vtable_.length);
                for (int i = 0; i < class_.vtable_.length; i = i + 1)
                    methods[i] = class_.vtable_[i].mangle();
                generator.mod.defineSymbolList(
                    class_.vtableSymbol, methods);
            }
        }

        for (int i = 0; i < this.entries.length; i = i + 1) {
            ModuleEntry entry = this.entries[i];
            Function fun = entry.value.instanceOf(Function);
            if (fun)
                fun.emit(generator, new Context(generator.platform, this));
            Class class_ = entry.value.instanceOf(Class);
            if (class_) {
                for (int i = 0; i < class_.methods.length; i = i + 1)
                    class_.methods[i].emit(generator, this, class_);
            }
        }
    }

    Symbol lookupPublic(string name)
    {
        // not counting imports (non-transitive)
        for (int i = 0; i < this.entries.length; i = i + 1)
        {
            if (this.entries[i].name == name)
                return this.entries[i].value;
        }
        return null;
    }

    override Symbol lookup(string name)
    {
        Symbol public_ = this.lookupPublic(name);
        if (public_) return public_;
        for (int i = 0; i < this.imports.length; i = i + 1)
        {
            Symbol entry = this.imports[i].lookupPublic(name);
            if (entry) return entry;
        }
        if (this.parent)
            return this.parent.lookup(name);
        return null;
    }
}

class NullExpr : Expression
{
    Type type_;

    this(Type type_) { this.type_ = type_; }

    override Type type()
    {
        return this.type_;
    }

    override int emit(Generator generator)
    {
        // TODO allocaless
        // exploit that alloca are zero initialized
        void* type = this.type_.emit(generator.platform);
        int reg = generator.fun.alloca(type);

        return generator.fun.load(type, reg);
    }
}

class ASTExtern
{
    string name;

    ASTType ret;

    ASTArgument[] args;

    this(string name, ASTType ret, ASTArgument[] args)
    {
        this.name = name;
        this.ret = ret;
        this.args = args;
    }

    FunctionDeclaration compile(Context context)
    {
        auto args = new Argument[](this.args.length);
        for (int i = 0; i < this.args.length; i = i + 1)
            args[i] = new Argument(this.args[i].name, this.args[i].type.compile(context));

        return new FunctionDeclaration(this.name, this.ret.compile(context), args);
    }
}

ASTExtern parseExtern(Parser parser)
{
    if (parser.accept("extern"))
    {
        parser.expect("(");
        parser.expect("C");
        parser.expect(")");
        ASTType ret = parseType(parser);
        string name = parseIdentifier(parser);
        if (!name.length) parser.fail("identifier expected");
        parser.expect("(");
        ASTArgument[] args = parseIdentifierList(parser);
        parser.expect(";");
        return new ASTExtern(name, ret, args);
    }
    return null;
}

string moduleToFile(string module_)
{
    string modulePath;
    for (int i = 0; i < module_.length; i = i + 1) {
        if (module_[i .. i + 1] == ".") modulePath = modulePath ~ "/";
        else modulePath = modulePath ~ module_[i .. i + 1];
    }
    return modulePath ~ ".cx";
}

string findFile(string filename, string[] includes)
{
    if (cxruntime_file_exists(filename))
        return filename;
    for (int i = 0; i < includes.length; i = i + 1)
    {
        string path = includes[i] ~ "/" ~ filename;

        if (cxruntime_file_exists(path))
            return path;
    }
    print("cannot find file '" ~ filename ~ "' in includes");
    assert(false);
}

class ASTImport
{
    string name;

    this(string name) { this.name = name; }
}

ASTImport parseImport(Parser parser)
{
    if (!parser.accept("import"))
        return null;
    string modname = parseIdentifier2(parser, ".");
    parser.expect(";");
    return new ASTImport(modname);
}

class ClassMember
{
    string name;

    Type type;

    this(string name, Type type) { this.name = name; this.type = type; }
}

// TODO merge with class Function
class ClassMethod : Symbol
{
    Class classType;

    bool override_;

    string name;

    Type ret;

    Argument[] args;

    ASTStatement statement;

    Statement compiledStatement;

    bool emitted;

    Loc loc;

    this(Loc loc, Class classType, bool override_, string name, Type ret, Argument[] args, ASTStatement statement, Statement compiledStatement)
    {
        this.loc = loc;
        this.classType = classType;
        this.override_ = override_;
        this.name = name;
        this.ret = ret;
        this.args = args;
        this.statement = statement;
        this.compiledStatement = compiledStatement;
    }

    string mangle()
    {
        // TODO mangle types
        return "_" ~ this.classType.name ~ "_" ~ this.name;
    }

    void emit(Generator generator, Namespace module_, Class thisType)
    {
        assert(!this.emitted);
        this.emitted = true;

        assert(!generator.fun);
        Type voidp = new Pointer(new Void);

        void*[] argTypes = new void*[](this.args.length + 1);
        argTypes[0] = voidp.emit(generator.platform);
        for (int i = 0; i < this.args.length; i = i + 1)
            argTypes[i + 1] = this.args[i].type.emit(generator.platform);
        generator.fun = generator.mod.define(
            this.mangle(),
            this.ret.emit(generator.platform),
            argTypes
        );

        if (!this.compiledStatement)
        {
            Statement[] argAssignments;
            auto stackframe = new FunctionScope(module_);
            auto argscope = new VarDeclScope(stackframe, true);

            argAssignments = argAssignments ~ argscope.declare(
                "this", thisType, new PointerCast(thisType, new ArgExpr(0, voidp)), null);
            for (int i = 0; i < this.args.length; i = i + 1) {
                auto argExpr = new ArgExpr(i + 1, this.args[i].type);

                argAssignments = argAssignments
                    ~ argscope.declare(this.args[i].name, this.args[i].type, argExpr, null);
            }

            this.compiledStatement = this.statement.compile(new Context(generator.platform, argscope));

            generator.frameReg = generator.fun.alloca(stackframe.structType().emit(generator.platform));

            for (int i = 0; i < argAssignments.length; i = i + 1)
            {
                argAssignments[i].emit(generator);
            }
        }

        this.compiledStatement.emit(generator);

        generator.fun.ret(generator.fun.voidLiteral());
        generator.frameReg = 0;
        generator.fun = null;
    }

    Type funcPtrType()
    {
        auto argTypes = new Type[](this.args.length + 1);
        argTypes[0] = this.classType;
        for (int i = 0; i < this.args.length; i = i + 1) argTypes[i + 1] = this.args[i].type;
        return new FunctionPointer(this.ret, argTypes);
    }
}

class Class : Type
{
    string name;

    Class superClass;

    // will resolve members and methods as required
    ASTClassDecl decl;

    // used for resolving
    Context context;

    ClassMember[] members;

    ClassMethod[] methods;

    ClassMethod[] vtable_; // methods appearing in the classinfo struct

    string vtableSymbol;

    this(ASTClassDecl decl, Class superClass, Context context)
    {
        assert(!!decl);
        this.name = decl.name;
        this.superClass = superClass;
        this.decl = decl;
        this.context = context;
    }

    override Expression truthy(Expression value, Loc loc)
    {
        Type voidp = new Pointer(new Void);
        return truthy(new PointerCast(voidp, value), loc);
    }

    override Expression implicitConvertFrom(Expression from)
    {
        // upcast
        if (from.type().instanceOf(Class))
        {
            Class currentClass = from.type().instanceOf(Class);

            while (currentClass)
            {
                if (currentClass.same(this))
                {
                    return new PointerCast(this, from);
                }
                currentClass = currentClass.superClass;
            }
        }
        // = null
        if (from.instanceOf(NullExpr))
        {
            return new PointerCast(this, from);
        }
        return null;
    }

    void resolve()
    {
        this.decl.compile2(this.context, this);
        this.decl = null;
    }

    bool resolved() { return !this.decl; }

    override void* emit(Platform platform)
    {
        return platform.pointerType(platform.voidType());
    }

    ClassMember[] allMembers()
    {
        if (!this.superClass)
        {
            auto members = new ClassMember[](this.members.length + 1);
            members[0] = new ClassMember("__classinfo", new Pointer(new Void));
            for (int i = 0; i < this.members.length; i = i + 1)
                members[i + 1] = this.members[i];
            return members;
        }
        ClassMember[] members = this.superClass.allMembers();
        for (int i = 0; i < this.members.length; i = i + 1)
            members = members ~ this.members[i];
        return members;
    }

    Struct dataStruct()
    {
        ClassMember[] allMembers = this.allMembers();

        auto structMembers = new StructMemberDeclaration[](allMembers.length);
        for (int i = 0; i < allMembers.length; i = i + 1)
            structMembers[i] = new StructMemberDeclaration(allMembers[i].name, allMembers[i].type);

        return new Struct("", structMembers);
    }

    Struct classInfoStruct()
    {
        ClassMethod[] vtable = this.vtable();

        auto vtableMembers = new StructMemberDeclaration[](vtable.length);
        for (int i = 0; i < vtable.length; i = i + 1)
            vtableMembers[i] = new StructMemberDeclaration(vtable[i].name, vtable[i].funcPtrType());

        return new Struct("", vtableMembers);
    }

    ClassMethod[] vtable()
    {
        assert(this.resolved());
        auto copy = new ClassMethod[](this.vtable_.length);
        for (int i = 0; i < this.vtable_.length; i = i + 1)
            copy[i] = this.vtable_[i];
        return copy;
    }

    void genVtable()
    {
        if (this.vtableSymbol.length > 0) return;

        assert(this.vtable_.length == 0);

        ClassMethod[] combinedMethods;
        if (this.superClass) {
            this.superClass.genVtable();
            combinedMethods = this.superClass.vtable();
        }

        this.genInstanceofMethod();

        for (int i = 0; i < this.methods.length; i = i + 1) {
            ClassMethod method = this.methods[i];

            // TODO match types
            int index = -1;
            for (int i = 0; i < combinedMethods.length; i = i + 1)
            {
                if (combinedMethods[i].name == method.name) index = i;
            }
            bool isThis = method.name == "this"; // workaround: no final yet, no proper masking yet
            if (index != -1)
            {
                if (method.loc)
                    method.loc.assert2s(method.override_ || isThis,
                        "Expected 'override' attribute for overriding method.");
                // override
                combinedMethods[index] = method;
            }
            else
            {
                if (method.loc)
                    method.loc.assert2s(!method.override_,
                        "'override specified but method does not override a parent method.");
                combinedMethods = combinedMethods ~ method;
            }
        }
        this.vtable_ = combinedMethods;
        this.vtableSymbol = this.name ~ "_vtable";
    }

    void genInstanceofMethod()
    {
        Type voidp = new Pointer(new Void);
        Array stringType = new Array(new Character);

        Statement[] castStmts;
        ArgExpr thisptr = new ArgExpr(0, voidp);
        ArgExpr target = new ArgExpr(1, stringType);
        auto nullptr = new NullExpr(voidp);
        Class current = this;
        while (current)
        {
            auto test = new ArrayEqual(target, new StringLiteral(current.name));
            Statement cmp = new IfStatement(test, new ReturnStatement(thisptr), null);

            castStmts = castStmts ~ cmp;
            current = current.superClass;
        }
        Statement ret = new ReturnStatement(nullptr);
        castStmts = castStmts ~ ret;

        auto stmt = new SequenceStatement(castStmts);

        bool override_ = false;
        if (this.superClass) override_ = true;

        this.methods = this.methods ~ new ClassMethod(
            null, this, override_, "__instanceof",
            voidp, new Argument[](0) ~ new Argument("target", stringType), null, stmt);
    }

    override bool same(Type other) {
        Class otherClass = other.instanceOf(Class);

        return otherClass && otherClass.name == this.name; // TODO module
    }

    override string repr() { return this.name; }
}

class ClassScope : Namespace
{
    Class class_;

    this(Namespace parent, Class class_)
    {
        this.parent = parent;
        this.class_ = class_;
    }

    override Symbol lookup(string name)
    {
        if (name == this.class_.name)
        {
            return this.class_;
        }
        return this.parent.lookup(name);
    }
}

class ASTClassDeclMember
{
    string name;

    ASTType type;

    this(string name, ASTType type) { this.name = name; this.type = type; }
}

class ASTClassDeclMethod
{
    Loc loc;

    bool override_;

    string name;

    ASTType ret;

    ASTArgument[] args;

    ASTStatement body_;

    this(Loc loc, bool override_, string name, ASTType ret, ASTArgument[] args, ASTStatement body_) {
        this.loc = loc;
        this.override_ = override_;
        this.name = name;
        this.ret = ret;
        this.args = args;
        this.body_ = body_;
    }
}

class ASTClassDecl : ASTType
{
    string name;

    string superClass;

    ASTClassDeclMember[] members;

    ASTClassDeclMethod[] methods;

    this(string name, string superClass, ASTClassDeclMember[] members, ASTClassDeclMethod[] methods)
    {
        this.name = name;
        this.superClass = superClass;
        this.members = members;
        this.methods = methods;
    }

    override Class compile(Context context)
    {
        Class superClass = null;
        if (this.superClass.length)
        {
            Symbol superClassObj = context.namespace.lookup(this.superClass);
            assert(!!superClassObj); // , format!"super class %s not found"(this.superClass));
            superClass = superClassObj.instanceOf(Class);
            assert(!!superClass);
        }
        return new Class(this, superClass, context);
    }

    void compile2(Context context, Class target)
    {
        auto classScope = new ClassScope(context.namespace, target);
        Context classContext = context.withNamespace(classScope);

        target.members = new ClassMember[](this.members.length);
        for (int i = 0; i < this.members.length; i = i + 1)
            target.members[i] = new ClassMember(this.members[i].name, this.members[i].type.compile(classContext));

        target.methods = new ClassMethod[](this.methods.length);
        for (int i = 0; i < this.methods.length; i = i + 1)
        {
            ASTClassDeclMethod method = this.methods[i];

            auto methodArgs = new Argument[](method.args.length);
            for (int k = 0; k < method.args.length; k = k + 1)
                methodArgs[k] = new Argument(method.args[k].name, method.args[k].type.compile(classContext));

            target.methods[i] = new ClassMethod(
                method.loc,
                target,
                method.override_,
                method.name,
                method.ret.compile(classContext),
                methodArgs,
                method.body_, null);
        }
        target.genVtable();
    }
}

ASTArgument[] parseArglist(Parser parser)
{
    ASTArgument[] args;
    while (!parser.accept(")"))
    {
        if (args.length > 0)
        {
            if (!parser.accept(","))
            {
                parser.fail("',' or ')' expected");
            }
        }
        ASTType argtype = parseType(parser);
        parser.assert_(!!argtype, "argument type expected");
        string argname = parseIdentifier(parser);
        parser.assert_(argname.length > 0, "argument name expected");
        args = args ~ new ASTArgument(argname, argtype);
    }
    return args;
}

ASTClassDecl parseClassDecl(Parser parser)
{
    if (!acceptIdentifier(parser, "class"))
    {
        return null;
    }
    string name = parseIdentifier(parser);
    string superClass;
    if (parser.accept(":")) {
        superClass = parseIdentifier(parser);
        parser.assert_(superClass.length > 0, "expected super class identifier");
    }
    ASTClassDeclMember[] members;
    ASTClassDeclMethod[] methods;
    parser.expect("{");
    while (!parser.accept("}"))
    {
        parser.strip();

        Loc methodLoc = parser.loc();

        ASTType retType;
        string memberName;
        bool override_ = acceptIdentifier(parser, "override");

        if (parser.accept("this"))
        {
            parser.assert_(!override_, "cannot override constructor");
            retType = new ASTVoid;
            memberName = "this";
        }
        else
        {
            retType = parseType(parser);
            parser.assert_(!!retType, "expected member type");
            memberName = parseIdentifier(parser);
            parser.assert_(memberName.length > 0, "expected member name");
        }
        if (parser.accept("(")) // method
        {
            ASTArgument[] args = parseArglist(parser);
            ASTStatement stmt = parseStatement(parser);
            methods = methods ~ new ASTClassDeclMethod(
                parser.loc(), override_, memberName, retType, args, stmt);
        }
        else
        {
            parser.assert_(!override_, "cannot override class member");
            parser.expect(";");
            members = members ~ new ASTClassDeclMember(memberName, retType);
        }
    }
    return new ASTClassDecl(name, superClass, members, methods);
}

Module parseModule(string filename, string[] includes, Platform platform, Module[] defaultImports)
{
    string path = findFile(filename, includes);
    string code = cxruntime_file_read(path);
    Parser parser = new Parser(path, code);

    parser.expect("module");
    string modname = parseIdentifier2(parser, ".");
    parser.expect(";");

    assert(filename == moduleToFile(modname));

    Module module_ = new Module(modname);
    Context context = new Context(platform, module_);

    for (int i = 0; i < defaultImports.length; i = i + 1) {
        module_.addImport(defaultImports[i]);
    }

    while (!parser.eof())
    {
        bool matched = false;
        if (!matched) {
            ASTImport import_ = parseImport(parser);
            if (import_) {
                matched = true;
                Module importedModule = parseModule(
                    moduleToFile(import_.name), includes, platform, defaultImports);

                module_.addImport(importedModule);
            }
        }
        if (!matched) {
            ASTClassDecl classDecl = parseClassDecl(parser);
            if (classDecl) {
                matched = true;
                module_.add(classDecl.name, classDecl.compile(context));
            }
        }
        if (!matched) {
            ASTExtern extern_ = parseExtern(parser);
            if (extern_)
            {
                matched = true;
                module_.add(extern_.name, extern_.compile(context));
            }
        }
        /*
        if (auto strct = parser.parseStructDecl)
        {
            module_.add(strct.name, strct.compile(context));
            continue;
        }*/
        if (!matched) {
            ASTFunction fun = parseFunction(parser);
            if (fun)
            {
                matched = true;
                module_.add(fun.name, fun.compile(context));
            }
        }

        if (!matched) parser.fail("couldn't parse function or struct");
    }
    return module_;
}

void main(string[] args)
{
    print("# stage2");
    string[] includes;
    string[] nextArgs;
    {
        string[] remArgs;
        for (size_t i = 0; i < args.length; i = i + 1) {
            string arg = args[i];

            if (arg.length >= 2 && arg[0 .. 2] == "-I") {
                includes = includes ~ arg[2 .. arg.length];
            } else if (arg == "--") {
                nextArgs = args[i + 1 .. args.length];
                i = args.length; // break
            } else {
                remArgs = remArgs ~ arg;
            }
        }
        args = remArgs;
    }

    if (args.length != 1)
    {
        print("Usage: stage2 [-Iincludepath]* FILE.cx");
        return;
    }
    auto builtins = new Module("");
    auto backend = new Backend();
    auto backendModule = backend.createModule();
    auto platform = new Platform();

    builtins.add("string", new Array(new Character));
    builtins.add("bool", new Integer);
    builtins.add("true", new Literal(1));
    builtins.add("false", new Literal(0));
    builtins.add("null", new NullExpr(new Pointer(new Void)));
    if (platform.nativeWordSize() == 4)
        builtins.add("size_t", new Integer);
    else if (platform.nativeWordSize() == 8)
        builtins.add("size_t", new Long);
    else assert(false);

    auto defaultImports = new Module[](0) ~ builtins;

    auto toplevel = parseModule(args[0], includes, platform, defaultImports);
    auto output = new Generator(platform, backendModule);

    toplevel.emit(output);

    backendModule.callMain(nextArgs);
}
