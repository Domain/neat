module parser;

import array;
import backend.proxy;
import base;
import format;
import types;

extern(C) bool cxruntime_file_exists(string file);
extern(C) string cxruntime_file_read(string file);

class Parser
{
    string[] stack;

    int level;

    this(string text)
    {
        this.stack = new string[](1);
        this.stack[0] = text;
        this.level = 0;
        this.verify();
    }

    void verify()
    {
        assert(this.stack.length > 0);
        assert(this.level <= this.stack.length);
    }

    string* textp()
    {
        this.verify();
        return &this.stack[this.level];
    }

    string text()
    {
        return *this.textp();
    }

    void begin()
    {
        this.verify();
        if (this.level == this.stack.length - 1)
        {
            string[] newStack = new string[](this.stack.length * 2 + 1);
            for (int i = 0; i < this.stack.length; i = i + 1) newStack[i] = this.stack[i];
            this.stack = newStack;
        }
        this.stack[this.level + 1] = this.text();
        this.level = this.level + 1;
    }

    void commit()
    {
        assert(this.level > 0);
        this.verify();
        this.stack[this.level - 1] = this.text();
        this.level = this.level - 1;
        this.verify();
    }

    void revert()
    {
        this.verify();
        this.level = this.level - 1;
    }

    bool accept(string match)
    {
        this.begin();
        this.strip();
        if (this.text().length < match.length)
        {
            this.revert();
            return false;
        }
        if (this.text()[0 .. match.length] == match)
        {
            (*this.textp()) = this.text()[match.length .. this.text().length];
            this.commit();
            return true;
        }
        this.revert();
        return false;
    }

    void expect(string match)
    {
        if (!this.accept(match))
        {
            this.fail(sssJoin("'", match, "' expected"));
        }
    }

    bool eof()
    {
        this.begin();
        this.strip();
        if (this.text().length == 0)
        {
            this.commit();
            return true;
        }
        this.revert();
        return false;
    }

    void strip()
    {
        while (true)
        {
            /* this.text = this.text.strip; */
            while (this.text().length > 0 && isWhitespace(this.text()[0 .. 1]))
            {
                *this.textp() = this.text()[1 .. this.text().length];
            }
            if (!startsWith(this.text(), "/*")) return;
            *this.textp() = this.text()["/*".length .. this.text().length];
            int commentLevel = 1;
            while (commentLevel > 0)
            {
                int more = find(this.text(), "/*");
                int less = find(this.text(), "*/");

                if (more == -1 && less == -1) this.fail("comment spans end of file");
                if (less != -1 && (more == -1 || less < more))
                {
                    *this.textp() = this.text()[less + "*/".length .. this.text().length];
                    commentLevel = commentLevel - 1;
                }
                if (more != -1 && (less == -1 || more < less))
                {
                    *this.textp() = this.text()[more + "/*".length .. this.text().length];
                    commentLevel = commentLevel + 1;
                }
            }
        }
    }

    void fail(string message)
    {
        print("failing:");
        print(message);
        print(this.text());
        /* assert(false, format!"at %s: %s"(this.text, msg)); */
        assert(false); /* TODO */
    }
}

bool startsWith(string haystack, string needle)
{
    return haystack.length >= needle.length && haystack[0 .. needle.length] == needle;
}

int find(string haystack, string needle)
{
    for (int i = 0; i <= haystack.length - needle.length; i = i + 1)
    {
        if (haystack[i .. i + needle.length] == needle) return i;
    }
    return -1;
}

bool parseNumber(Parser parser, int* ip)
{
    parser.begin();
    parser.strip();
    if (parser.eof() || !isNumber(parser.text()[0 .. 1]))
    {
        parser.revert();
        return false;
    }
    string number;
    while (!parser.eof() && isNumber(parser.text()[0 .. 1]))
    {
        number = ssJoin(number, parser.text()[0 .. 1]);
        *parser.textp() = parser.text()[1 .. parser.text().length];
    }
    parser.commit();
    *ip = atoi(number);
    return true;
}

bool isNumber(string s)
{
    assert(s.length == 1);
    return find("0123456789", s) != -1;
}

bool isAlpha(string s)
{
    assert(s.length == 1);
    return find("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", s) != -1;
}

bool isAlnum(string s)
{
    return isAlpha(s) || isNumber(s);
}

bool isWhitespace(string s)
{
    return s == " " || s == "\t" || s == "\r" || s == "\n";
}

string parseIdentifier2(Parser parser, string allowedChars)
{
    parser.begin();
    parser.strip();
    if (parser.text().length == 0 || (!isAlpha(parser.text()[0 .. 1])
        && parser.text()[0 .. 1] != "_")
        && find(allowedChars, parser.text()[0 .. 1]) == -1)
    {
        parser.revert();
        return "";
    }
    string identifier;
    while (parser.text().length > 0 && (
        isAlnum(parser.text()[0 .. 1])
        || parser.text()[0 .. 1] == "_"
        || find(allowedChars, parser.text()[0 .. 1]) != -1))
    {
        identifier = ssJoin(identifier, parser.text()[0 .. 1]);
        *parser.textp() = parser.text()[1 .. parser.text().length];
    }
    parser.commit();
    return identifier;
}

string parseIdentifier(Parser parser)
{
    return parseIdentifier2(parser, "");
}

bool acceptIdentifier(Parser parser, string identifier)
{
    parser.begin();

    string nextIdent = parseIdentifier(parser);

    if (nextIdent != identifier)
    {
        parser.revert();
        return false;
    }
    parser.commit();
    return true;
}

class NamedType : ASTType
{
    string name;

    this(string name) { assert(name.length > 0); this.name = name; }

    Type compile(Context context)
    {
        Symbol target = context.namespace.lookup(this.name);

        if (!target || !target.instanceOf(Type)) {
            print(ssJoin(this.name, " is not a type"));
            assert(false);
        }
        return target.instanceOf(Type);
    }
}

ASTType parseLeafType(Parser parser)
{
    parser.begin();

    string identifier = parseIdentifier(parser);

    if (!identifier.length)
    {
        parser.revert();
        return null;
    }

    if (identifier == "int")
    {
        parser.commit();
        return new ASTInteger;
    }

    parser.commit();
    return new NamedType(identifier);
}

ASTType parseType(Parser parser)
{
    ASTType current = parseLeafType(parser);
    return current;
}

class ASTArgument
{
    string name;

    ASTType type;

    this(string name, ASTType type)
    {
        this.name = name;
        this.type = type;
    }
}

class Statement
{
    void emit(Generator output) { assert(false); }
}

class ASTStatement
{
    Statement compile(Context context) { assert(false); }
}

class Argument
{
    string name;

    Type type;

    this(string name, Type type)
    {
        this.name = name;
        this.type = type;
    }
}

class Function : Symbol
{
    string name;

    Type ret;

    Argument[] args;

    bool declaration;

    ASTStatement statement;

    this(string name, Type ret, Argument[] args, bool declaration, ASTStatement statement)
    {
        this.name = name;
        this.ret = ret;
        this.args = args;
        this.declaration = declaration;
        this.statement = statement;
    }

    void emit(Generator generator, Context module_)
    {
        assert(!generator.fun);
        void*[] argTypes = new void*[](this.args.length);
        for (int i = 0; i < this.args.length; i = i + 1)
        {
            argTypes[i] = this.args[i].type.emit(module_.platform);
        }
        assert(module_);
        generator.fun = generator.mod.define(
            this.name,
            this.ret.emit(module_.platform),
            argTypes
        );
        FunctionScope stackframe = new FunctionScope(module_.namespace);
        VarDeclScope argscope = new VarDeclScope(stackframe, true);
        Statement[] argAssignments = new Statement[](this.args.length);
        for (int i = 0; i < this.args.length; i = i + 1)
        {
            Argument arg = this.args[i];
            ArgExpr argExpr = new ArgExpr(i, arg.type);

            argAssignments[i] = argscope.declare(arg.name, arg.type, argExpr);
        }

        Statement functionBody = this.statement.compile(module_.withNamespace(argscope));

        generator.frameReg = generator.fun.alloca(stackframe.structType().emit(module_.platform));

        for (int i = 0; i < argAssignments.length; i = i + 1)
        {
            argAssignments[i].emit(generator);
        }

        functionBody.emit(generator);
        generator.fun.ret(generator.fun.voidLiteral());
        generator.fun = null;
        generator.frameReg = 0;
    }
}

class ASTFunction
{
    string name;

    ASTType ret;

    ASTArgument[] args;

    bool isDeclaration;

    ASTStatement statement;

    this(string name, ASTType ret, ASTArgument[] args, bool isDeclaration, ASTStatement statement)
    {
        this.name = name;
        this.ret = ret;
        this.args = args;
        this.isDeclaration = isDeclaration;
        this.statement = statement;
    }

    Function compile(Context context)
    {
        Argument[] arguments = new Argument[](this.args.length);
        for (int i = 0; i < this.args.length; i = i + 1)
        {
            ASTArgument arg = this.args[i];
            ASTType at = arg.type;
            Type type = at.compile(context);
            arguments[i] = new Argument(arg.name, type);
        }

        return new Function(
            this.name,
            this.ret.compile(context),
            arguments,
            this.isDeclaration,
            this.statement);
    }
}

ASTArgument[] parseIdentifierList(Parser parser)
{
    ASTArgument[] args;
    while (!parser.accept(")"))
    {
        if (args.length)
        {
            if (!parser.accept(","))
            {
                parser.fail("',' or ')' expected");
            }
        }
        ASTType argtype = parseType(parser);
        string argname = parseIdentifier(parser);
        ASTArgument[] prevArgs = args;
        args = new ASTArgument[](prevArgs.length + 1);
        for (int i = 0; i < prevArgs.length; i = i + 1) args[i] = prevArgs[i];
        args[prevArgs.length] = new ASTArgument(argname, argtype);
    }
    return args;
}

class Reference : Expression
{
    int emitLocation(Generator output) { assert(false); }
}

class BinaryOp : Expression
{
    string op;

    Expression left;

    Expression right;

    this(string op, Expression left, Expression right)
    {
        this.op = op;
        this.left = left;
        this.right = right;
    }

    Type type()
    {
        return new Integer;
    }

    int emit(Generator output)
    {
        assert(this.left.type().instanceOf(Integer));
        assert(this.right.type().instanceOf(Integer));
        int leftreg = this.left.emit(output);
        int rightreg = this.right.emit(output);
        return output.fun.binop(this.op, leftreg, rightreg);
    }
}

class ArgExpr : Expression
{
    int index;

    Type type_;

    this(int index, Type type_) { this.index = index; this.type_ = type_; }

    int emit(Generator output)
    {
        return output.fun.arg(this.index);
    }

    Type type()
    {
        return this.type_;
    }
}

Expression implicitConvertTo(Expression from, Type to)
{
    if (from.type().same(to)) return from;
    // void* casts to any pointer
    /*if (to.instanceOf(Pointer) && from.type().same(new Pointer(new Void)))
    {
        return new PointerCast(to, from);
    }
    // any pointer casts to void*
    if (from.type().instanceOf(Pointer) && to.same(new Pointer(new Void)))
    {
        return new PointerCast(to, from);
    }
    if (to.instanceOf(Class) && from.type().instanceOf(Class))
    {
        Class currentClass = from.type().instanceOf(Class);

        while (currentClass)
        {
            if (currentClass.same(to))
            {
                return new PointerCast(to, from);
            }
            currentClass = currentClass.superClass;
        }
    }
    if (cast(Class) to && cast(NullExpr) from)
    {
        return new PointerCast(to, from);
    }
    // TODO bool
    if (cast(Integer) to && (cast(Pointer) from.type || cast(Class) from.type))
    {
        auto voidp = new Pointer(new Void);
        auto rt_ptr_test = new Function("cxruntime_ptr_test",
            new Integer,
            [Argument("", voidp)],
            true, null);
        return new Call(rt_ptr_test, [new PointerCast(voidp, from)]);
    }*/
    print("todo: cast error");
    assert(false);
}

class Call : Expression
{
    Function function_;

    Expression[] args;

    this(Function function_, Expression[] args)
    {
        /*assert(function_.args.length == args.length, format!"'%s' expected %s args, not %s"(
            function_.name, function_.args.length, args.length));*/
        assert(function_.args.length == args.length);

        for (int i = 0; i < args.length; i = i + 1)
        {
            args[i] = implicitConvertTo(args[i], function_.args[i].type);
        }
        this.function_ = function_;
        this.args = args;
    }

    Type type()
    {
        return this.function_.ret;
    }

    int emit(Generator output)
    {
        int[] regs = new int[](this.args.length);
        for (int i = 0; i < this.args.length; i = i + 1) {
            regs[i] = this.args[i].emit(output);
        }
        return output.fun.call(this.type().emit(output.platform), this.function_.name, regs);
    }
}

Expression call(Symbol target, Expression[] args)
{
    if (target.instanceOf(Function))
    {
        return new Call(target.instanceOf(Function), args);
    }
    /*if (auto method = cast(ClassMethod) target)
    {
        return new FuncPtrCall(method.funcPtr, [method.thisPtr] ~ args);
    }
    auto expr = cast(Expression) target;
    if (expr && cast(FunctionPointer) expr.type)
    {
        return new FuncPtrCall(expr, args);
    }*/
    // assert(false, format!"unknown call target %s (%s?)"(target, expr ? expr.type : null));
    assert(false);
}

class ASTCall : ASTSymbol
{
    ASTSymbol target;

    ASTSymbol[] args;

    this(ASTSymbol target, ASTSymbol[] args)
    {
        this.target = target;
        this.args = args;
    }

    Expression compile(Context context)
    {
        Symbol target = this.target.compile(context);
        Expression[] args = new Expression[](this.args.length);
        for (int i = 0; i < this.args.length; i = i + 1)
        {
            args[i] = beExpression(this.args[i].compile(context));
        }
        return call(target, args);
    }
}

ASTSymbol[] parseSymbolList(Parser parser)
{
    ASTSymbol[] args;
    while (!parser.accept(")"))
    {
        if (args.length > 0)
            parser.expect(",");

        ASTSymbol[] prevArgs = args;
        args = new ASTSymbol[](prevArgs.length + 1);
        for (int i = 0; i < prevArgs.length; i = i + 1) args[i] = prevArgs[i];
        args[prevArgs.length] = parseExpression(parser);
    }
    return args;
}

ASTCall parseCall(Parser parser, ASTSymbol base)
{
    parser.begin();
    if (!parser.accept("("))
    {
        parser.revert();
        return null;
    }
    ASTSymbol[] args = parseSymbolList(parser);
    parser.commit();
    return new ASTCall(base, args);
}

ASTSymbol parseProperties(Parser parser, ASTSymbol current)
{
    while (true)
    {
        bool any = false;
        {
            ASTSymbol expr = parseCall(parser, current);
            if (expr)
            {
                any = true;
                current = expr;
            }
        }
        if (!any) return current;
        /*if (auto expr = parser.parseInstanceOf(current))
        {
            current = expr;
            continue;
        }
        if (auto expr = parser.parseCall(current))
        {
            current = expr;
            continue;
        }
        if (auto expr = parser.parseMember(current))
        {
            current = expr;
            continue;
        }
        if (auto expr = parser.parseIndex(current))
        {
            current = expr;
            continue;
        }
        break;*/
    }
}

ASTSymbol parseExpressionLeaf(Parser parser)
{
    /*if (accept("*"))
    {
        auto next = parser.parseExpressionLeaf;

        assert(next !is null);
        return new ASTDereference(next);
    }
    if (accept("&"))
    {
        auto next = parser.parseExpressionLeaf;

        assert(next !is null);
        return new ASTReference(next);
    }
    if (parser.acceptIdentifier("new"))
    {
        auto type = parser.parseType;
        Nullable!(ASTSymbol[]) args;
        if (accept("("))
        {
            args = parser.parseSymbolList;
        }

        return new ASTNewClassExpression(type, args);
    }
    if (accept("!"))
    {
        auto next = parser.parseExpressionLeaf;

        assert(next !is null);
        return new ASTNegation(next);
    }*/
    ASTSymbol currentExpr = parseExpressionBase(parser);
    assert(currentExpr);
    return parseProperties(parser, currentExpr);
}

class Variable : ASTSymbol
{
    string name;

    this(string name) { this.name = name; }

    Symbol compile(Context context)
    {
        Symbol symbol = context.namespace.lookup(this.name);
        if (!symbol) {
            print(ssJoin(this.name, " not found"));
            assert(false);
        }
        return symbol;
    }
}

class ASTLiteral : ASTSymbol
{
    int value;

    this(int value) { this.value = value; }

    Symbol compile(Context context)
    {
        return new Literal(this.value);
    }
}

class Literal : Expression
{
    int value;

    this(int value) { this.value = value; }

    Type type()
    {
        return new Integer;
    }

    int emit(Generator output)
    {
        return output.fun.intLiteral(this.value);
    }
}

class ASTStringLiteral : ASTSymbol
{
    string text;

    this(string text) { this.text = text; }

    Symbol compile(Context context)
    {
        return new StringLiteral(this.text);
    }
}

class StringLiteral : Expression
{
    string text;

    this(string text) { this.text = text; }

    Type type()
    {
        return new Array(new Character);
    }

    int emit(Generator output)
    {
        void* voidp = output.platform.pointerType(output.platform.voidType());
        // TODO allocaless
        void* structType = this.type().emit(output.platform);
        int structReg = output.fun.alloca(structType);
        int ptrField = output.fun.fieldOffset(structType, structReg, 0);
        int lenField = output.fun.fieldOffset(structType, structReg, 1);

        output.fun.store(voidp, ptrField, output.fun.stringLiteral(this.text));
        output.fun.store(output.platform.intType(), lenField, output.fun.intLiteral(this.text.length));
        return output.fun.load(structType, structReg);
    }
}

string replaceEscapes(string text)
{
    string result;
    int i;
    while (i < text.length)
    {
        string ch = text[i .. i + 1];
        i = i + 1;
        if (ch == "\\")
        {
            string ctl = text[i .. i + 1];
            i = i + 1;
            if (ctl == "r") {
                result = ssJoin(result, "\r");
            } else if (ctl == "n") {
                result = ssJoin(result, "\n");
            } else if (ctl == "t") {
                result = ssJoin(result, "\t");
            } else if (ctl == "\\") {
                result = ssJoin(result, "\\");
            } else {
                print(ssJoin("Unknown control sequence \\", ctl));
                assert(false);
            }
        }
        else
        {
            result = ssJoin(result, ch);
        }
    }
    return result;
}

ASTStringLiteral parseStringLiteral(Parser parser, string endMarker)
{
    string str;
    while (parser.text().length < endMarker.length || parser.text()[0 .. endMarker.length] != endMarker)
    {
        if (parser.text().length == 0)
        {
            parser.fail("expected end of string, got end of file");
        }
        if (parser.text()[0 .. 1] == "\\") {
            str = ssJoin(str, parser.text()[0 .. 1]);
            *parser.textp() = parser.text()[1 .. parser.text().length];
        }
        str = ssJoin(str, parser.text()[0 .. 1]);
        *parser.textp() = parser.text()[1 .. parser.text().length];
    }
    if (!parser.accept(endMarker))
    {
        parser.fail("this should never happen");
    }

    return new ASTStringLiteral(replaceEscapes(str));
}

ASTSymbol parseExpressionBase(Parser parser)
{
    string name = parseIdentifier(parser);
    if (name.length)
    {
        return new Variable(name);
    }
    int i;
    if (parseNumber(parser, &i))
    {
        return new ASTLiteral(i);
    }
    if (parser.accept("\""))
    {
        return parseStringLiteral(parser, "\"");
    }
    /*if (parser.accept("("))
    {
        auto result = parser.parseExpression;
        parser.expect(")");
        return result;
    }
    if (auto arrayLiteral = parser.parseArrayLiteral)
    {
        return arrayLiteral;
    }*/
    parser.fail("Base expression expected.");
    assert(false);
}

class ASTBinaryOp : ASTSymbol
{
    string op;

    ASTSymbol left;

    ASTSymbol right;

    this(string op, ASTSymbol left, ASTSymbol right) { this.op = op; this.left = left; this.right = right; }

    Expression compile(Context context)
    {
        Expression left = beExpression(this.left.compile(context));
        Expression right = beExpression(this.right.compile(context));

        return new BinaryOp(this.op, left, right);
    }
}

ASTSymbol parseAddSub(Parser parser, ASTSymbol left, int myLevel)
{
    while (true)
    {
        if (parser.accept("+"))
        {
            ASTSymbol right = parseArithmetic(parser, myLevel + 1);

            left = new ASTBinaryOp("+", left, right);
        }
        else if (parser.accept("-"))
        {
            ASTSymbol right = parseArithmetic(parser, myLevel + 1);

            left = new ASTBinaryOp("-", left, right);
        } else return left;
    }
}

class ASTNegation : ASTSymbol
{
    ASTSymbol next;

    this(ASTSymbol next) { this.next = next; }

    Expression compile(Context context)
    {
        return new Negation(
            implicitConvertTo(
                beExpression(this.next.compile(context)),
                new Integer));
    }
}

class Negation : Expression
{
    Expression next;

    this(Expression next) { this.next = next; }

    Type type()
    {
        return new Integer;
    }

    int emit(Generator output)
    {
        int[] next = new int[](1);
        next[0] = this.next.emit(output);

        return output.fun.call(output.platform.intType(), "cxruntime_int_negate", next);
    }
}

ASTSymbol parseComparison(Parser parser, ASTSymbol left, int myLevel)
{
    if (parser.accept("=="))
    {
        ASTSymbol right = parseArithmetic(parser, myLevel + 1);

        return new ASTBinaryOp("==", left, right);
    }
    if (parser.accept("!=")) // same as !(a == b)
    {
        ASTSymbol right = parseArithmetic(parser, myLevel + 1);

        return new ASTNegation(new ASTBinaryOp("==", left, right));
    }
    if (parser.accept(">="))
    {
        ASTSymbol right = parseArithmetic(parser, myLevel + 1);

        return new ASTBinaryOp(">=", left, right);
    }
    if (parser.accept(">")) // same as !(a == b)
    {
        ASTSymbol right = parseArithmetic(parser, myLevel + 1);

        return new ASTBinaryOp(">", left, right);
    }
    if (parser.accept("<=")) // same as !(a == b)
    {
        ASTSymbol right = parseArithmetic(parser, myLevel + 1);

        return new ASTBinaryOp("<=", left, right);
    }
    if (parser.accept("<")) // same as !(a == b)
    {
        ASTSymbol right = parseArithmetic(parser, myLevel + 1);

        return new ASTBinaryOp("<", left, right);
    }
    return left;
}

ASTSymbol parseArithmetic(Parser parser, int level)
{
    ASTSymbol left = parseExpressionLeaf(parser);

    if (level <= 1)
    {
        left = parseAddSub(parser, left, 1);
    }
    if (level <= 0)
    {
        left = parseComparison(parser, left, 0);
    }
    /*if (level <= 4)
    {
        left = parseMul(parser, left, 4);
    }
    if (level <= 3)
    {
        left = parseAddSub(parser, left, 3);
    }
    if (level <= 2)
    {
        left = parseComparison(parser, left, 2);
    }
    if (level <= 1)
    {
        left = parseBoolAnd(parser, left, 1);
    }
    if (level <= 0)
    {
        left = parseBoolOr(parser, left, 0);
    }*/
    return left;
}

ASTSymbol parseExpression(Parser parser)
{
    return parseArithmetic(parser, 0);
}

class ReturnStatement : Statement
{
    Expression value;

    this(Expression value) { this.value = value; }

    void emit(Generator output)
    {
        int reg = this.value.emit(output);

        output.fun.ret(reg);
    }
}

class ASTReturnStatement : ASTStatement
{
    ASTSymbol value;

    this(ASTSymbol value) { this.value = value; }

    Statement compile(Context context)
    {
        Expression expr = beExpression(this.value.compile(context));

        return new ReturnStatement(expr);
    }
}

ASTReturnStatement parseReturn(Parser parser)
{
    parser.begin();
    string identifier = parseIdentifier(parser);
    if (identifier != "return")
    {
        parser.revert();
        return null;
    }
    ASTSymbol expr;
    /*if (parser.accept(";")) // return;
    {
        expr = new ASTVoidExpression;
    }
    else
    {*/
        expr = parseExpression(parser);
        parser.expect(";");
    //}
    parser.commit();
    return new ASTReturnStatement(expr);
}

class StructMemberDeclaration
{
    string name;

    Type type;

    this(string name, Type type)
    {
        this.name = name;
        this.type = type;
    }
}

class Struct : Type
{
    string name;

    StructMemberDeclaration[] members;

    this(string name, StructMemberDeclaration[] members)
    {
        this.name = name;
        this.members = members;
    }

    bool same(Type other) {
        Struct otherStruct = other.instanceOf(Struct);
        if (!otherStruct || otherStruct.members.length != this.members.length) return false;
        for (int i = 0; i < this.members.length; i = i + 1)
        {
            if (!this.members[i].type.same(otherStruct.members[i].type)) return false;
        }
        return true;
    }

    void* emit(Platform platform)
    {
        void*[] memberTypes = new void*[](this.members.length);
        for (int i = 0; i < this.members.length; i = i + 1)
        {
            memberTypes[i] = this.members[i].type.emit(platform);
        }
        return platform.structType(memberTypes);
    }
}

class StructMember : Reference
{
    Reference base;

    int index;

    this(Reference base, int index)
    {
        this.base = base;
        this.index = index;
    }

    Type type()
    {
        Type type = this.base.type();
        Struct structType = type.instanceOf(Struct);
        assert(structType);
        return structType.members[this.index].type;
    }

    int emit(Generator output)
    {
        int locationReg = this.emitLocation(output);

        return output.fun.load(this.type().emit(output.platform), locationReg);
    }

    int emitLocation(Generator output)
    {
        int reg = this.base.emitLocation(output);

        return output.fun.fieldOffset(this.base.type().emit(output.platform), reg, this.index);
    }
}

class StackFrame : Reference
{
    Type targetType;

    this(Type targetType) { this.targetType = targetType; }

    Type type()
    {
        return this.targetType;
    }

    int emit(Generator generator)
    {
        assert(false);
    }

    int emitLocation(Generator generator)
    {
        return generator.frameReg;
    }
}

class FunctionScope : Namespace
{
    Type[] variableTypes;

    this(Namespace parent) { this.parent = parent; }

    StructMember declare(Type type)
    {
        Type[] prevVariableTypes = this.variableTypes;
        this.variableTypes = new Type[](prevVariableTypes.length + 1);
        for (int i = 0; i < prevVariableTypes.length; i = i + 1) this.variableTypes[i] = prevVariableTypes[i];
        this.variableTypes[prevVariableTypes.length] = type;

        return new StructMember(
            new StackFrame(this.structType()),
            this.variableTypes.length - 1);
    }

    Struct structType()
    {
        StructMemberDeclaration[] members = new StructMemberDeclaration[](this.variableTypes.length);
        for (int i = 0; i < this.variableTypes.length; i = i + 1)
        {
            members[i] = new StructMemberDeclaration("", this.variableTypes[i]);
        }
        return new Struct("", members);
    }

    Symbol lookup(string name)
    {
        assert(this.parent);
        return this.parent.lookup(name);
    }
}

FunctionScope findFunctionScope(Namespace namespace)
{
    FunctionScope functionScope = namespace.instanceOf(FunctionScope);
    if (functionScope) return functionScope;
    assert(namespace.parent);
    return findFunctionScope(namespace.parent);
}

class AssignStatement : Statement
{
    Reference target;

    Expression value;

    this(Reference target, Expression value) { this.target = target; this.value = value; }

    void emit(Generator output)
    {
        Type targetType = this.target.type();
        Type valueType = this.value.type();
        /*assert(targetType == valueType,
                format!"%s - %s => %s - %s"(this.target, this.value, targetType, valueType));*/

        int target_reg = this.target.emitLocation(output);
        int value_reg = this.value.emit(output);

        output.fun.store(valueType.emit(output.platform), target_reg, value_reg);
    }
}

class NoopStatement : Statement
{
    void emit(Generator generator)
    {
    }
}

class DeclaredVariable
{
    string name;

    Expression value;

    this(string name, Expression value) { this.name = name; this.value = value; }
}

class VarDeclScope : Namespace
{
    DeclaredVariable[] declarations;

    bool frameBase; // base of function frame. all variables here are parameters.

    this(Namespace parent, bool frameBase)
    {
        this.parent = parent;
        this.frameBase = frameBase;
    }

    Statement declare(string name, Type type, Expression value)
    {
        StructMember member = findFunctionScope(this).declare(type);

        this.appendDeclaration(name, member);
        return new AssignStatement(member, implicitConvertTo(value, type));
    }

    Statement declareZeroInit(string name, Type type)
    {
        StructMember member = findFunctionScope(this).declare(type);

        this.appendDeclaration(name, member);
        return new NoopStatement;
    }

    void appendDeclaration(string name, StructMember member)
    {
        DeclaredVariable[] prevDeclarations = this.declarations;
        this.declarations = new DeclaredVariable[](prevDeclarations.length + 1);
        for (int i = 0; i < prevDeclarations.length; i = i + 1) this.declarations[i] = prevDeclarations[i];
        this.declarations[prevDeclarations.length] = new DeclaredVariable(name, member);
    }

    Symbol lookup(string name)
    {
        for (int i = 0; i < this.declarations.length; i = i + 1)
        {
            if (this.declarations[i].name == name)
            {
                return this.declarations[i].value;
            }
        }
        if (this.parent)
            return this.parent.lookup(name);
        return null;
    }
}

VarDeclScope findVarDeclScope(Namespace namespace)
{
    VarDeclScope varDeclScope = namespace.instanceOf(VarDeclScope);
    if (varDeclScope) return varDeclScope;
    assert(namespace.parent);
    return findVarDeclScope(namespace.parent);
}

class ASTIfStatement : ASTStatement
{
    ASTSymbol test;

    ASTStatement then;

    ASTStatement else_;

    this(ASTSymbol test, ASTStatement then, ASTStatement else_)
    {
        this.test = test;
        this.then = then;
        this.else_ = else_;
    }

    Statement compile(Context context)
    {
        VarDeclScope ifscope = new VarDeclScope(context.namespace, false);
        Symbol test = this.test.compile(context.withNamespace(ifscope));
        Statement then = this.then.compile(context.withNamespace(ifscope));
        Statement else_;
        if (this.else_) {
            VarDeclScope elsescope = new VarDeclScope(context.namespace, false);
            else_ = this.else_.compile(context.withNamespace(elsescope));
        }

        return new IfStatement(beExpression(test), then, else_);
    }
}

class IfStatement : Statement
{
    Expression test;

    Statement then;

    Statement else_;

    this(Expression test, Statement then, Statement else_)
    {
        this.test = test;
        this.then = then;
        this.else_ = else_;
    }

    void emit(Generator output)
    {
        int reg = this.test.emit(output);

        TestBranchRecord tbrRecord = output.fun.testBranch(reg);

        tbrRecord.resolveThen(output.fun.blockIndex());
        this.then.emit(output);
        BranchRecord brRecord = output.fun.branch();
        tbrRecord.resolveElse(output.fun.blockIndex());

        if (this.else_)
        {
            this.else_.emit(output);
            BranchRecord elseBrRecord = output.fun.branch();

            elseBrRecord.resolve(output.fun.blockIndex());
        }
        brRecord.resolve(output.fun.blockIndex());
    }
}

ASTIfStatement parseIf(Parser parser)
{
    parser.begin();
    string identifier = parseIdentifier(parser);
    if (identifier != "if")
    {
        parser.revert();
        return null;
    }
    parser.expect("(");
    ASTSymbol expr = parseExpression(parser);
    parser.expect(")");
    ASTStatement thenStmt = parseStatement(parser);
    ASTStatement elseStatement;
    if (parser.accept("else"))
    {
        elseStatement = parseStatement(parser);
    }
    parser.commit();
    return new ASTIfStatement(expr, thenStmt, elseStatement);
}

class ASTScopeStatement : ASTStatement
{
    ASTStatement[] statements;

    this(ASTStatement[] statements) { this.statements = statements; }

    Statement compile(Context context)
    {
        VarDeclScope subscope = new VarDeclScope(context.namespace, false);

        Statement[] statements = new Statement[](this.statements.length);
        for (int i = 0; i < this.statements.length; i = i + 1)
        {
            statements[i] = this.statements[i].compile(context.withNamespace(subscope));
        }
        return new SequenceStatement(statements);
    }
}

class SequenceStatement : Statement
{
    Statement[] statements;

    this(Statement[] statements) { this.statements = statements; }

    void emit(Generator output)
    {
        for (int i = 0; i < this.statements.length; i = i + 1)
        {
            this.statements[i].emit(output);
        }
    }
}

ASTScopeStatement parseScope(Parser parser)
{
    if (!parser.accept("{"))
    {
        return null;
    }
    ASTStatement[] statements;
    while (!parser.accept("}"))
    {
        ASTStatement stmt = parseStatement(parser);

        ASTStatement[] prevStatements = statements;
        statements = new ASTStatement[](prevStatements.length + 1);
        for (int i = 0; i < prevStatements.length; i = i + 1) statements[i] = prevStatements[i];
        statements[prevStatements.length] = stmt;
    }
    return new ASTScopeStatement(statements);
}

class ASTAssignStatement : ASTStatement
{
    ASTSymbol target;

    ASTSymbol value;

    this(ASTSymbol target, ASTSymbol value)
    {
        this.target = target;
        this.value = value;
    }

    Statement compile(Context context)
    {
        Symbol target = this.target.compile(context);
        Expression value = beExpression(this.value.compile(context));
        Reference targetref = target.instanceOf(Reference);
        value = implicitConvertTo(value, targetref.type());
        if (!targetref) {
            print("target of assignment must be a reference");
            assert(false);
        }
        return new AssignStatement(targetref, value);
    }
}

class AssignStatement : Statement
{
    Reference target;

    Expression value;

    this(Reference target, Expression value) { this.target = target; this.value = value; }

    void emit(Generator output)
    {
        Type targetType = this.target.type();
        Type valueType = this.value.type();

        // TODO
        /*assert(targetType == valueType,
                format!"%s - %s => %s - %s"(this.target, this.value, targetType, valueType));*/

        int target_reg = this.target.emitLocation(output);
        int value_reg = this.value.emit(output);

        output.fun.store(valueType.emit(output.platform), target_reg, value_reg);
    }
}

ASTAssignStatement parseAssignment(Parser parser)
{
    parser.begin();
    ASTSymbol lhs = parseExpressionLeaf(parser);
    if (!lhs || !parser.accept("="))
    {
        parser.revert();
        return null;
    }
    ASTSymbol expr = parseExpression(parser);
    parser.commit();
    return new ASTAssignStatement(lhs, expr);
}

ASTAssignStatement parseAssignStatement(Parser parser)
{
    ASTAssignStatement ret = parseAssignment(parser);
    if (ret)
    {
        parser.expect(";");
        return ret;
    }
    return null;
}

class ASTVarDeclStatement : ASTStatement
{
    string name;

    ASTType type;

    ASTSymbol initial;

    this(string name, ASTType type, ASTSymbol initial)
    {
        this.name = name;
        this.type = type;
        this.initial = initial;
    }

    Statement compile(Context context)
    {
        if (this.initial)
        {
            Symbol initial = this.initial.compile(context);

            return findVarDeclScope(context.namespace).declare(
                this.name, this.type.compile(context), beExpression(initial));
        }
        else
        {
            return findVarDeclScope(context.namespace).declareZeroInit(
                this.name, this.type.compile(context));
        }
    }
}

ASTVarDeclStatement parseVarDecl(Parser parser)
{
    parser.begin();
    ASTType type = parseType(parser);
    if (!type)
    {
        parser.revert();
        return null;
    }
    string name = parseIdentifier(parser);
    if (!name.length)
    {
        parser.revert();
        return null;
    }
    ASTSymbol initial;
    if (parser.accept("="))
    {
        initial = parseExpression(parser);
        assert(initial);
    }
    parser.expect(";");
    parser.commit();
    return new ASTVarDeclStatement(name, type, initial);
}

class ASTWhile : ASTStatement
{
    ASTSymbol cond;

    ASTStatement body_;

    this(ASTSymbol cond, ASTStatement body_) { this.cond = cond; this.body_ = body_; }

    Statement compile(Context context)
    {
        VarDeclScope subscope = new VarDeclScope(context.namespace, false);
        Expression condExpr = beExpression(this.cond.compile(context.withNamespace(subscope)));
        Statement bodyStmt = this.body_.compile(context.withNamespace(subscope));

        return new WhileLoop(condExpr, bodyStmt);
    }
}

class WhileLoop : Statement
{
    Expression cond;

    Statement body_;

    this(Expression cond, Statement body_) { this.cond = cond; this.body_ = body_; }

    void emit(Generator output)
    {
        /**
         * start:
         * if (cond) goto body; else goto end;
         * body:
         * goto start
         * end:
         */
        BranchRecord start = output.fun.branch(); // start:
        int startIndex = output.fun.blockIndex();

        start.resolve(startIndex);

        int condReg = this.cond.emit(output);
        TestBranchRecord condBranch = output.fun.testBranch(condReg); // if (cond)

        condBranch.resolveThen(output.fun.blockIndex()); // goto body
        this.body_.emit(output);
        output.fun.branch().resolve(startIndex); // goto start
        condBranch.resolveElse(output.fun.blockIndex()); // else goto end
    }
}

ASTWhile parseWhile(Parser parser)
{
    if (!acceptIdentifier(parser, "while"))
    {
        return null;
    }
    parser.expect("(");
    ASTSymbol cond = parseExpression(parser);
    parser.expect(")");
    ASTStatement body_ = parseStatement(parser);

    return new ASTWhile(cond, body_);
}

class ASTExprStatement : ASTStatement
{
    ASTSymbol value;

    this(ASTSymbol value) { this.value = value; }

    Statement compile(Context context)
    {
        return new ExprStatement(beExpression(this.value.compile(context)));
    }
}

class ExprStatement : Statement
{
    Expression value;

    this(Expression value) { this.value = value; }

    void emit(Generator output)
    {
        this.value.emit(output); // discard reg
    }
}

ASTExprStatement parseExprStatement(Parser parser)
{
    parser.begin();
    ASTSymbol value = parseExpression(parser);
    if (!value)
    {
        parser.revert();
        return null;
    }
    parser.expect(";");
    parser.commit();
    return new ASTExprStatement(value);
}

class ASTForLoop : ASTStatement
{
    ASTVarDeclStatement declareLoopVar;

    ASTSymbol condition;

    ASTStatement step;

    ASTStatement body_;

    this(ASTVarDeclStatement declareLoopVar, ASTSymbol condition, ASTStatement step, ASTStatement body_)
    {
        this.declareLoopVar = declareLoopVar;
        this.condition = condition;
        this.step = step;
        this.body_ = body_;
    }

    Statement compile(Context context)
    {
        /*
         * hack until break/continue:
         * for (decl; test; step) body
         * decl; while (test) { body; step; }
         */
        Context forscope = context.withNamespace(new VarDeclScope(context.namespace, false));

        Statement decl = this.declareLoopVar.compile(forscope);
        Expression condition = beExpression(this.condition.compile(forscope));
        Statement[] loopStatements = new Statement[](2);
        loopStatements[0] = this.body_.compile(forscope);
        loopStatements[1] = this.step.compile(forscope);
        Statement loop = new WhileLoop(condition, new SequenceStatement(loopStatements));

        Statement[] sequenceStatements = new Statement[](2);
        sequenceStatements[0] = decl;
        sequenceStatements[1] = loop;

        return new SequenceStatement(sequenceStatements);
    }
}

ASTForLoop parseFor(Parser parser)
{
    if (!acceptIdentifier(parser, "for"))
    {
        return null;
    }
    parser.expect("(");
    ASTVarDeclStatement varDecl = parseVarDecl(parser);
    ASTSymbol condition = parseExpression(parser);
    parser.expect(";");
    ASTStatement step = parseAssignment(parser);
    parser.expect(")");
    ASTStatement body_ = parseStatement(parser);

    return new ASTForLoop(varDecl, condition, step, body_);
}

ASTStatement parseStatement(Parser parser)
{
    {
        ASTStatement stmt = parseReturn(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseIf(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseWhile(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseFor(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseScope(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseVarDecl(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseAssignStatement(parser);
        if (stmt) return stmt;
    }
    {
        ASTStatement stmt = parseExprStatement(parser);
        if (stmt) return stmt;
    }
    parser.fail("statement expected");
}

ASTFunction parseFunction(Parser parser)
{
    parser.begin();
    ASTType ret = parseType(parser);
    if (!ret)
    {
        parser.revert();
        return null;
    }
    string name = parseIdentifier(parser);
    parser.expect("(");
    ASTArgument[] args = parseIdentifierList(parser);
    ASTStatement stmt = parseStatement(parser);
    parser.commit();
    return new ASTFunction(name, ret, args, false, stmt);
}

class ModuleEntry
{
    string name;

    Symbol value;

    this(string name, Symbol value) { this.name = name; this.value = value; }
}

class Module : Namespace
{
    string name;

    this(string name)
    {
        this.parent = null;
        this.name = name;
    }

    Module[] imports;

    ModuleEntry[] entries;

    void add(string name, Symbol symbol)
    {
        ModuleEntry[] prevEntries = this.entries;
        this.entries = new ModuleEntry[](prevEntries.length + 1);
        for (int i = 0; i < prevEntries.length; i = i + 1) this.entries[i] = prevEntries[i];
        this.entries[prevEntries.length] = new ModuleEntry(name, symbol);
    }

    void addImport(Module module_)
    {
        Module[] prevImports = this.imports;
        this.imports = new Module[](prevImports.length + 1);
        for (int i = 0; i < prevImports.length; i = i + 1) this.imports[i] = prevImports[i];
        this.imports[prevImports.length] = module_;
    }

    void emit(Generator generator)
    {
        assert(!generator.fun);
        for (int i = 0; i < this.entries.length; i = i + 1)
        {
            ModuleEntry entry = this.entries[i];
            Function fun = entry.value.instanceOf(Function);
            if (fun && !fun.declaration)
                fun.emit(generator, new Context(generator.platform, this));
            /*Class class_ = entry.value.instanceOf(Class);
            if (class_)
            {
                for (int i = 0; i < class_.methods.length; i = i + 1)
                {
                    class_.methods[i].emit(generator, this, class_);
                }
            }*/
        }
        // TODO each only once!
        for (int i = 0; i < this.imports.length; i = i + 1)
            this.imports[i].emit(generator);
    }

    Symbol lookupPublic(string name)
    {
        // not counting imports (non-transitive)
        for (int i = 0; i < this.entries.length; i = i + 1)
        {
            if (this.entries[i].name == name)
                return this.entries[i].value;
        }
        return null;
    }

    Symbol lookup(string name)
    {
        Symbol public_ = this.lookupPublic(name);
        if (public_) return public_;
        /*foreach (import_; this.imports)
        {
            // TODO error on multiple matches
            if (auto entry = import_.lookupPublic(name))
                return entry;
        }*/
        if (this.parent)
            return this.parent.lookup(name);
        return null;
    }
}

class NullExpr : Expression
{
    Type type_;

    this(Type type_) { this.type_ = type_; }

    Type type()
    {
        return this.type_;
    }

    int emit(Generator generator)
    {
        // TODO allocaless
        // exploit that alloca are zero initialized
        void* type = this.type_.emit(generator.platform);
        int reg = generator.fun.alloca(type);

        return generator.fun.load(type, reg);
    }
}

string moduleToFile(string module_)
{
    string modulePath;
    for (int i = 0; i < module_.length; i = i + 1) {
        if (module_[i .. i + 1] == ".") modulePath = ssJoin(modulePath, "/");
        else modulePath = ssJoin(modulePath, module_[i .. i + 1]);
    }
    return ssJoin(modulePath, ".cx");
}

string findFile(string filename, string[] includes)
{
    if (cxruntime_file_exists(filename))
        return filename;
    for (int i = 0; i < includes.length; i = i + 1)
    {
        string path = sssJoin(includes[i], "/", filename);

        if (cxruntime_file_exists(path))
            return path;
    }
    print(sssJoin("cannot find file '", filename, "' in includes"));
    assert(false);
}

Module parseModule(string filename, string[] includes, Platform platform, Module[] defaultImports)
{
    string path = findFile(filename, includes);
    string code = cxruntime_file_read(path);
    Parser parser = new Parser(code);

    parser.expect("module");
    string modname = parseIdentifier2(parser, ".");
    parser.expect(";");

    assert(filename == moduleToFile(modname));

    Module module_ = new Module(modname);
    Context context = new Context(platform, module_);

    for (int i = 0; i < defaultImports.length; i = i + 1) {
        module_.addImport(defaultImports[i]);
    }

    while (!parser.eof())
    {
        /*if (auto import_ = parser.parseImport)
        {
            auto importedModule = parseModule(
                import_.name.moduleToFile, includes, platform, defaultImports, importCache);

            module_.addImport(importedModule);
            continue;
        }
        if (auto classDecl = parser.parseClassDecl)
        {
            module_.add(classDecl.name, classDecl.compile(context));
            continue;
        }
        if (auto extern_ = parser.parseExtern)
        {
            module_.add(extern_.name, extern_.compile(context));
            continue;
        }
        if (auto strct = parser.parseStructDecl)
        {
            module_.add(strct.name, strct.compile(context));
            continue;
        }
        if (auto fun = parser.parseFunction)
        {
            module_.add(fun.name, fun.compile(context));
            continue;
        }*/

        parser.fail("couldn't parse function or struct");
    }
    return module_;
}

void main(string[] args)
{
    string[] includes;
    {
        string[] remArgs;
        for (int i = 0; i < args.length; i = i + 1) {
            string arg = args[i];

            if (arg.length >= 2 && arg[0 .. 2] == "-I") {
                string[] prevIncludes = includes;
                includes = new string[](prevIncludes.length + 1);
                for (int i = 0; i < prevIncludes.length; i = i + 1) includes[i] = prevIncludes[i];
                includes[prevIncludes.length] = arg[2 .. arg.length];
            } else {
                string[] prevRemArgs = remArgs;
                remArgs = new string[](prevRemArgs.length + 1);
                for (int i = 0; i < prevRemArgs.length; i = i + 1) remArgs[i] = prevRemArgs[i];
                remArgs[prevRemArgs.length] = arg;
            }
        }
        args = remArgs;
    }

    if (args.length != 1)
    {
        print("Usage: stage2 [-Iincludepath]* FILE.cx");
        assert(false);
    }
    Module builtins = new Module("");
    Backend backend = new Backend();
    BackendModule backendModule = backend.createModule();
    Platform platform = new Platform();

    builtins.add("string", new Array(new Character));
    builtins.add("bool", new Integer);
    builtins.add("true", new Literal(1));
    builtins.add("false", new Literal(0));
    builtins.add("null", new NullExpr(new Pointer(new Void)));

    Module[] defaultImports = new Module[](1);
    defaultImports[0] = builtins;

    Module toplevel = parseModule(args[0], includes, platform, defaultImports);
    Generator output = new Generator(platform, backendModule);

    toplevel.emit(output);

    void ret;
    void*[] args;
    backendModule.call(&ret, "main", args);
}
