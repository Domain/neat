module base;

import backend.proxy;

extern(C) void print(char[]);
extern(C) void assert(int);
extern(C) int atoi(char[]);

// something that can be referenced by a name
class Symbol
{
}

class Namespace
{
    Namespace parent; // lexical parent

    this(Namespace parent) { this.parent = parent; }

    Symbol lookup(string name) { assert(false); }
}

class Context
{
    void* platform;

    Namespace namespace;

    this(void* platform, Namespace namespace) { this.platform = platform; this.namespace = namespace; }

    Context withNamespace(Namespace namespace)
    {
        return new Context(this.platform, namespace);
    }
}

class ASTSymbol
{
    Symbol compile(Context context) { assert(false); }
}

class Type
{
    void* emit(Platform platform) { assert(false); }
    bool same(Type type) { return false; }
}

class ASTType
{
    Type compile(Context context) { assert(false); }
}

class Generator
{
    BackendModule mod;

    BackendFunction fun;

    Platform platform;

    int frameReg;

    this(Platform platform, BackendModule mod)
    {
        this.platform = platform;
        this.mod = mod;
        this.fun = null;
    }
}

class Expression : Symbol
{
    Type type() { assert(false); }
    int emit(Generator output) { assert(false); }
}

Expression beExpression(Symbol symbol)
{
    Expression expr = symbol.instanceOf(Expression);
    assert(expr);
    return expr;
}
