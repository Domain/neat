module cx.linenr;

import helpers;

extern(C) int cxruntime_linenr(string, string, int*, int*);

class LineNumberRegistry
{
    this() { }

    (string name, string content)[] files;

    string print(string filename, size_t offset, string msg)
    {
        if (filename == "") {
            .print("???: " ~ msg);
            assert(false);
        }
        string loc = location(filename, offset);

        .print(loc ~ ": " ~ msg);
        assert(false);
    }

    string findFile(string filename) {
        for (auto entry <- files) {
            if (entry.name == filename) return entry.content;
        }
        if (!exists(filename)) {
            .print("file not found: '" ~ filename ~ "'");
            assert(false);
        }
        string content = read(filename);
        files ~= (filename, content);
        return content;
    }

    void sourceLocation(string filename, size_t offset, void delegate(int, int) dg)
    {
        string file = findFile(filename);
        assert(offset <= file.length);
        string where = file[offset .. $];
        int line, column;
        if (cxruntime_linenr(file, where, &line, &column)) {
            dg(line, column);
        } else {
            // fallback
            dg(0, 0);
        }
    }

    string location(string filename, size_t offset)
    {
        string file = findFile(filename);
        assert(offset <= file.length);
        string where = file[offset .. $];
        int line;
        int column;
        if (cxruntime_linenr(file, where, &line, &column)) {
            return filename ~ ":" ~ itoa(line + 1) ~ ":" ~ itoa(column + 1);
        }
        assert(false);
    }
}
