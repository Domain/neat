module cx.function_;

macro import cx.macros.either;
macro import cx.macros.listcomprehension;
macro import cx.macros.once;

import backend.base;
import cx.base;
import cx.hash;
import cx.parser;
import cx.parser_base;
import helpers;

class Function : FunctionDeclaration
{
    Loc loc;

    ASTStatement statement;

    MacroState macroState;

    Namespace parent;

    bool hasThisArg;

    this(this.loc, this.name, this.ret, this.args, this.statement, this.macroState, this.hasThisArg)
    {
        this.contextType = null;
        this.parent = null;
    }

    override string mangle()
    {
        if (this.name == "main") return "_main"; // globally unique
        return this.parent.mangle() ~ "_" ~ this.name;
    }

    string repr()
    {
        string repr = this.name;
        if (hasThisArg) {
            repr = this.contextType.repr ~ "::" ~ repr;
        }
        // TODO
        // if (auto mod = this.parent.instanceOf(Module)) repr = mod.name ~ "." ~ repr;
        return repr;
    }

    override void declare(Generator generator)
    {
        string mangle = this.mangle;
        if (generator.mod.declared(mangle)) return;

        Type voidp = once new Pointer(new Void);

        auto argTypes = [arg.type.emit(generator.platform) for arg in this.args];
        if (this.contextType)
            argTypes = [voidp.emit(generator.platform)] ~ argTypes;

        generator.mod.declare(
            mangle,
            this.ret.emit(generator.platform),
            argTypes
        );
    }

    CompiledFunction compile(CompilerBase compiler, Platform platform)
    {
        auto stackframe = new FunctionScope(compiler, this.ret, this.contextType, this.parent, this.mangle, this.loc);
        Namespace scope_ = stackframe;
        int extra = 0;
        if (this.contextType)
            extra = 1;

        auto argAssignments = new Statement[](this.args.length + extra);

        VariableDeclaration thisDecl;
        if (this.contextType)
        {
            bool owned = true; // is this right ... ?
            // unnamed variable because of "first field in stackframe is 'this'" logic
            string framePtrName;
            if (this.hasThisArg) framePtrName = "this";
            thisDecl = new VariableDeclaration(scope_, framePtrName, this.contextType, owned);

            Type voidp = once new Pointer(new Void);

            scope_ = thisDecl;

            argAssignments[0] = compiler.assignStatement(
                thisDecl.accessDecl(compiler),
                new PointerCast(this.contextType, new ArgExpr(0, voidp)));
        }

        auto context = makeContext(compiler, platform, scope_, this.macroState);

        for (int i <- 0 .. this.args.length) {
            Argument arg = this.args[i];
            auto argExpr = new ArgExpr(extra + i, arg.type);

            if (arg.isThisAssignment) {
                this.loc.assert2s(!!thisDecl, "no this. args outside class");

                auto target = compiler.accessMemberWithLifetime(
                        context, thisDecl.accessDecl(context.compiler), arg.name, this.loc, false)
                    .instanceOf(Reference);
                this.loc.assert2s2(!!target, "not a reference: ", arg.name);

                auto stmt = arg.type.copyInto(context, target, argExpr);
                if (!stmt) stmt = compiler.assignStatement(target, argExpr);
                argAssignments[extra + i] = stmt;
            } else {
                auto argDecl = new VariableDeclaration(scope_, arg.name, arg.type, false);

                argAssignments[extra + i] = compiler.assignStatement(argDecl.accessDecl(context.compiler), argExpr);

                scope_ = argDecl;
            }
        }

        scope_ = new FunctionScopeStart(scope_);
        context = context.withNamespace(scope_);

        auto pair = this.statement.compile(context);
        auto compiledStatement = compiler.unwindScope(pair.context, scope_, pair.statement);

        return new CompiledFunction(this, compiledStatement, stackframe, argAssignments);
    }
}

class CompiledFunction : FinishedSymbol
{
    Function fun;

    Statement compiledStatement;

    FunctionScope stackframe;

    Statement[] argAssignments;

    this(this.fun, this.compiledStatement, this.stackframe, this.argAssignments) { }

    override void emit(Generator generator)
    {
        if (!generator.once(this.fun.mangle)) { print("double-emit " ~ this.fun.mangle); assert(false); }
        // print("emit " ~ this.fun.mangle);

        assert(!generator.fun);
        Type voidp = once new Pointer(new Void);

        auto argTypes = [arg.type.emit(generator.platform) for arg in this.fun.args];
        if (this.fun.contextType)
            argTypes = [voidp.emit(generator.platform)] ~ argTypes;

        generator.fun = generator.mod.define(
            this.fun.mangle,
            this.fun.repr,
            this.fun.ret.emit(generator.platform),
            argTypes,
            this.fun.loc.toBackendLoc
        );

        generator.frameReg = generator.fun.staticAlloca(this.stackframe.structType.emit(generator.platform));

        [assignment.emit(generator) for assignment in this.argAssignments];
        this.compiledStatement.emit(generator);

        generator.fun.ret(generator.fun.voidLiteral);
        generator.fun.done;
        generator.fun = null;
        generator.frameReg = -1;
    }

    override void hash(Hash hash) {
        hash.adds("fndef");
        hash.adds(fun.mangle);
        fun.ret.hash(hash);
        if (fun.contextType) fun.contextType.hash(hash);
        else hash.adds("null");
        hash.addl(fun.args.length);
        [({ hash.adds(arg.name); arg.type.hash(hash); }) for arg in fun.args];
        this.compiledStatement.hash(hash);
    }
}

// variable without stackframe
class LatentVariable
{
    string name;

    Type stackFrameType;

    int offset;

    bool owned;

    this(this.name, this.stackFrameType, this.offset, this.owned) { }
}

class FunctionScope : Namespace
{
    CompilerBase compiler;

    Type ret;

    Type extra;

    StructMemberDeclaration[] variables;

    string mangle_;

    Loc loc;

    Type structType;

    this(this.compiler, this.ret, this.extra, this.parent, this.mangle_, this.loc) {
        // TODO dedicated stackframe type so we don't need to keep recreating struct type instances
        this.structType = compiler.struct_("", this.variables, this.loc, this.mangle_);
        this.isContextScope = true;
    }

    LatentVariable declare(string name, Type type, bool owned)
    {
        this.variables ~= new StructMemberDeclaration(name, type);
        this.structType = this.compiler.struct_("", this.variables, this.loc, this.mangle_);

        return new LatentVariable(name, this.structType, cast(int) this.variables.length - 1, owned);
    }

    override string mangle() { return this.mangle_; }

    override Symbol lookup(string name, Context context, Expression frame)
    {
        assert(!!this.parent);

        Expression nextFrame;
        if (this.extra && frame)
        {
            // first field in stackframe must be parent
            // TODO better?
            auto framePtr = new PointerCast(once new Pointer(new Pointer(new Void)), frame);

            nextFrame = context.compiler.dereference(framePtr);
        }

        return this.parent.lookup(name, context, nextFrame);
    }
}

FunctionScope findFunctionScope(Namespace namespace)
{
    if (auto functionScope = namespace.instanceOf(FunctionScope))
        return functionScope;
    assert(!!namespace.parent);
    return findFunctionScope(namespace.parent);
}

class VariableDeclaration : DeclarationHolder
{
    LatentVariable variable;

    this(this.parent, string name, Type type, bool owned)
    {
        this.variable = findFunctionScope(this).declare(name, type, owned);
        this.isContextScope = true;
    }

    override Reference accessDecl(CompilerBase compiler)
    {
        Expression frame = compiler.reference(new StackFrame(variable.stackFrameType));
        return access(compiler, frame);
    }

    Reference access(CompilerBase compiler, Expression frame)
    {
        Type stackFrameType = variable.stackFrameType;
        auto frame = new PointerCast(new Pointer(stackFrameType), frame);
        auto reference = compiler.structMemberReference(compiler.dereference(frame), variable.offset);
        // an argument, for instance
        if (!variable.owned) return new BorrowedReference(reference);
        return reference;
    }

    override Symbol lookup(string name, Context context, Expression frame)
    {
        if (this.variable.name == name)
        {
            return access(context.compiler, frame);
        }
        if (this.parent) return this.parent.lookup(name, context, frame);
        return null;
    }
}

class StackFrame : Reference
{
    Type targetType;

    this(this.targetType) { }

    override Type type()
    {
        return this.targetType;
    }

    override int emit(Generator generator)
    {
        assert(false);
    }

    override int emitLocation(Generator generator)
    {
        return generator.frameReg;
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("StackFrame"); targetType.hash(hash); }
}

class BorrowedReference : Reference
{
    Reference base;

    this(this.base) { }

    override Type type() { return base.type; }
    override int emit(Generator output) { return base.emit(output); }
    override int emitLocation(Generator output) { return base.emitLocation(output); }
    override void hash(Hash hash) { hash.adds("BorrowedReference"); base.hash(hash); }
    override ExprInfo info() { return ExprInfo(Ownership.borrowed); }
}

class ArgExpr : Expression
{
    int index;

    Type type_;

    this(this.index, this.type_) { }

    override int emit(Generator output)
    {
        return output.fun.arg(this.index);
    }

    override Type type()
    {
        return this.type_;
    }

    override ExprInfo info() { return ExprInfo(Ownership.borrowed); }

    override void hash(Hash hash) { hash.adds("ArgExpr"); hash.addl(index); }
}

// No-op marker namespace: this is the point that Return unrolls to.
class FunctionScopeStart : Namespace
{
    this(this.parent) { this.isContextScope = true; }

    override Symbol lookup(string name, Context context, Expression frame) {
        return parent.lookup(name, context, frame);
    }
}

FunctionScopeStart findFunctionScopeStart(Namespace namespace)
{
    Namespace namespace = namespace; // TODO mut Namespace namespace
    while (true) {
        if (auto functionScopeStart = namespace.instanceOf(FunctionScopeStart))
            return functionScopeStart;
        assert(!!namespace.parent);
        namespace = namespace.parent;
    }
}

Either(ASTArgument, ASTThisAssignment)[] parseArglist(Parser parser, LexicalContext lexicalContext)
{
    Either(ASTArgument, ASTThisAssignment)[] args;
    while (!parser.accept(")"))
    {
        if (args.length > 0)
        {
            if (!parser.accept(","))
            {
                parser.fail("',' or ')' expected");
            }
        }
        auto loc = parser.loc;
        if (parser.accept("this."))
        {
            string argname = parseIdentifier(parser);
            args ~= ASTThisAssignment(argname);
        }
        else
        {
            ASTSymbol argtype = lexicalContext.compiler.parseType(parser, lexicalContext);
            parser.assert_(!!argtype, "argument type expected");
            string argname = parseIdentifier(parser);
            parser.assert_(argname.length > 0, "argument name expected");
            args ~= ASTArgument(argname, argtype, loc);
        }
    }
    return args;
}
