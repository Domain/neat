module cx.function_;

macro import cx.macros.listcomprehension;
macro import cx.macros.once;

import backend.base;
import cx.base;
import cx.hash;
import cx.parser;
import cx.parser_base;
import cx.types;
import helpers;

class Function : FunctionDeclaration
{
    Loc loc;

    ASTStatement statement;

    MacroState macroState;

    Namespace parent;

    bool hasThisArg;

    this(this.loc, this.name, this.ret, this.params, this.statement, this.macroState, this.hasThisArg)
    {
        this.contextType = null;
        this.parent = null;
    }

    override string mangle()
    {
        if (this.name == "main") return "_main"; // globally unique
        return this.parent.mangle() ~ "_" ~ this.name;
    }

    string repr()
    {
        mut string repr = this.name;
        if (hasThisArg) {
            repr = this.contextType.repr ~ "::" ~ repr;
        }
        // TODO
        // if (auto mod = this.parent.instanceOf(Module)) repr = mod.name ~ "." ~ repr;
        return repr;
    }

    override void declare(Generator generator)
    {
        string mangle = this.mangle;
        if (generator.mod.declared(mangle)) return;

        Type voidp = once new Pointer(new Void);

        mut auto paramTypes = [param.type.emit(generator.platform) for param in this.params];
        if (this.contextType)
            paramTypes = [voidp.emit(generator.platform)] ~ paramTypes;

        generator.mod.declare(
            mangle,
            this.ret.emit(generator.platform),
            paramTypes
        );
    }

    CompiledFunction mkCompiledFunction(
        Function fun, Statement compiledStatement, FunctionScope stackframe, Statement[] argAssignments)
    {
        return new CompiledFunction(fun, compiledStatement, stackframe, argAssignments);
    }

    CompiledFunction compile(CompilerBase compiler, Platform platform)
    {
        auto stackframe = new FunctionScope(compiler, this.ret, this.contextType, this.parent, this.mangle, this.loc);
        mut Namespace scope_ = stackframe;
        mut int extra = 0;
        if (this.contextType)
            extra = 1;

        auto argAssignments = new Statement[](this.params.length + extra);

        mut VariableDeclaration thisDecl;
        if (this.contextType)
        {
            // unnamed variable because of "first field in stackframe is 'this'" logic
            mut string framePtrName;
            if (this.hasThisArg) framePtrName = "this";
            thisDecl = new VariableDeclaration(
                scope_, framePtrName, this.contextType, ExprInfo(false, Ownership.borrowed), framePtrName == "");

            Type voidp = once new Pointer(new Void);

            scope_ = thisDecl;

            argAssignments[0] = compiler.assignStatement(
                thisDecl.accessDecl(compiler),
                new PointerCast(this.contextType, new ArgExpr(0, voidp)));
        }

        mut auto context = makeContext(compiler, platform, scope_, this.macroState);

        for (int i <- 0 .. this.params.length) {
            Parameter param = this.params[i];
            auto argExpr = new ArgExpr(extra + i, param.type);

            if (param.isThisAssignment) {
                this.loc.assert2s(!!thisDecl, "no this. args outside class");

                auto target = compiler.accessMemberWithLifetime(
                        context, thisDecl.accessDecl(context.compiler), param.name, this.loc, false)
                    .instanceOf(Reference);
                this.loc.assert2s2(!!target, "not a reference: ", param.name);

                mut auto stmt = param.type.copyInto(context, target, argExpr);
                if (!stmt) stmt = compiler.assignStatement(target, argExpr);
                argAssignments[extra + i] = stmt;
            } else {
                if (param.mutable) {
                    // we're mutable, but functions borrow the caller args - copy them, then declare the arg owned.
                    auto argDecl = new VariableDeclaration(
                        scope_, param.name, param.type, ExprInfo(true, Ownership.owned), false);
                    auto target = argDecl.accessDecl(context.compiler);

                    mut auto assign = param.type.copyInto(context, target, argExpr);
                    if (!assign) assign = compiler.assignStatement(target, argExpr);

                    argAssignments[extra + i] = assign;
                    scope_ = argDecl;
                } else {
                    auto argDecl = new VariableDeclaration(
                        scope_, param.name, param.type, ExprInfo(false, Ownership.borrowed), false);

                    argAssignments[extra + i] = compiler.assignStatement(argDecl.accessDecl(context.compiler), argExpr);

                    scope_ = argDecl;
                }
            }
        }

        context = context.withNamespace(scope_);

        auto pair = this.statement.compile(context);
        auto compiledStatement = compiler.unwindScope(pair.context, stackframe, pair.statement);

        return mkCompiledFunction(this, compiledStatement, stackframe, argAssignments);
    }
}

class CompiledFunction : FinishedSymbol
{
    Function fun;

    Statement compiledStatement;

    FunctionScope stackframe;

    Statement[] argAssignments;

    this(this.fun, this.compiledStatement, this.stackframe, this.argAssignments) { }

    override void emit(Generator generator)
    {
        if (!generator.once(this.fun.mangle)) { print("double-emit " ~ this.fun.mangle); assert(false); }
        // print("emit " ~ this.fun.mangle);

        assert(!generator.fun);
        Type voidp = once new Pointer(new Void);

        mut auto paramTypes = [param.type.emit(generator.platform) for param in this.fun.params];
        if (this.fun.contextType)
            paramTypes = [voidp.emit(generator.platform)] ~ paramTypes;

        generator.fun = generator.mod.define(
            this.fun.mangle,
            this.fun.repr,
            this.fun.ret.emit(generator.platform),
            paramTypes,
            this.fun.loc.toBackendLoc
        );

        generator.frameReg = generator.fun.staticAlloca(this.stackframe.structType.emit(generator.platform));

        [assignment.emit(generator) for assignment in this.argAssignments];
        this.compiledStatement.emit(generator);

        generator.fun.ret(generator.fun.voidLiteral);
        generator.fun.done;
        generator.fun = null;
        generator.frameReg = -1;
    }

    override void hash(Hash hash) {
        hash.adds("fndef");
        hash.adds(fun.mangle);
        fun.ret.hash(hash);
        if (fun.contextType) fun.contextType.hash(hash);
        else hash.adds("null");
        hash.addl(fun.params.length);
        [({ hash.adds(param.name); param.type.hash(hash); }) for param in fun.params];
        this.compiledStatement.hash(hash);
    }
}

// variable without stackframe
class LatentVariable
{
    string name;

    Type stackFrameType;

    int offset;

    ExprInfo info;

    this(this.name, this.stackFrameType, this.offset, this.info) { }
}

class FunctionScope : Namespace
{
    CompilerBase compiler;

    Type ret;

    Type extra;

    StructMemberDeclaration[] variables;

    string mangle_;

    Loc loc;

    Type structType;

    this(this.compiler, this.ret, this.extra, this.parent, this.mangle_, this.loc) {
        // TODO dedicated stackframe type so we don't need to keep recreating struct type instances
        this.structType = compiler.struct_("", this.variables, this.loc, this.mangle_);
        this.isContextScope = true;
    }

    LatentVariable declare(string name, Type type, ExprInfo info)
    {
        assert(info.ownership != Ownership.gifted);
        assert(!info.mutable || info.ownership == Ownership.owned);

        this.variables ~= new StructMemberDeclaration(name, type);
        this.structType = this.compiler.struct_("", this.variables, this.loc, this.mangle_);

        return new LatentVariable(name, this.structType, cast(int) this.variables.length - 1, info);
    }

    override string mangle() { return this.mangle_; }

    override Symbol lookup(string name, Context context, Expression frame)
    {
        assert(!!this.parent);

        mut Expression nextFrame;
        if (this.extra && frame)
        {
            // first field in stackframe must be parent
            // TODO better?
            auto framePtr = new PointerCast(once new Pointer(new Pointer(new Void)), frame);

            nextFrame = context.compiler.dereference(framePtr);
        }

        return this.parent.lookup(name, context, nextFrame);
    }
}

class VariableDeclaration : DeclarationHolder
{
    LatentVariable variable;

    bool hidden;

    this(this.parent, string name, Type type, ExprInfo info, this.hidden)
    {
        this.variable = findParent!FunctionScope(this).declare(name, type, info);
        this.isContextScope = true;
    }

    override Reference accessDecl(CompilerBase compiler)
    {
        Expression frame = compiler.reference(new StackFrame(variable.stackFrameType));
        return access(compiler, frame);
    }

    Reference access(CompilerBase compiler, Expression frame)
    {
        Type stackFrameType = variable.stackFrameType;
        auto frame = new PointerCast(new Pointer(stackFrameType), frame);
        auto reference = compiler.structMemberReference(compiler.dereference(frame), variable.offset);
        // an argument, for instance
        mut ExprInfo info = variable.info;
        if (info.ownership != Ownership.borrowed)
            info.ownership = Ownership.owned;
        return new InfoReference(reference, info);
    }

    override Symbol lookup(string name, Context context, Expression frame)
    {
        if (this.variable.name == name)
        {
            return access(context.compiler, frame);
        }
        // soft destructuring
        if (!hidden && this.variable.name == "") {
            auto unnamedVar = access(context.compiler, frame);
            // TODO lookup(Loc)
            auto loc = Loc(context.compiler.files, __HERE__);
            auto target = context.compiler.accessMemberWithLifetime(
                    context, unnamedVar, name, loc, true);
            if (target) return target;
        }
        if (this.parent) return this.parent.lookup(name, context, frame);
        return null;
    }
}

class StackFrame : Reference
{
    Type targetType;

    this(this.targetType) { this.type = this.targetType; }

    override int emit(Generator generator)
    {
        assert(false);
    }

    override int emitLocation(Generator generator)
    {
        return generator.frameReg;
    }

    override ExprInfo info() { return ExprInfo(false, Ownership.owned); }

    override void hash(Hash hash) { hash.adds("StackFrame"); targetType.hash(hash); }
}

class InfoReference : Reference
{
    Reference base;

    ExprInfo info_;

    this(this.base, this.info_) { this.type = base.type; }

    override int emit(Generator output) { return base.emit(output); }
    override int emitLocation(Generator output) { return base.emitLocation(output); }
    // TODO hash ExprInfo
    override void hash(Hash hash) { hash.adds("InfoReference"); base.hash(hash); }
    override ExprInfo info() { return this.info_; }
}

class ArgExpr : Expression
{
    int index;

    this(this.index, this.type) { }

    override int emit(Generator output)
    {
        return output.fun.arg(this.index);
    }

    override ExprInfo info() { return ExprInfo(false, Ownership.borrowed); }

    override void hash(Hash hash) { hash.adds("ArgExpr"); hash.addl(index); }
}

(ASTParameter | ASTThisAssignment)[] parseParamList(Parser parser, LexicalContext lexicalContext)
{
    mut (ASTParameter | ASTThisAssignment)[] params;
    while (!parser.accept(")"))
    {
        if (params.length > 0)
        {
            if (!parser.accept(","))
            {
                parser.fail("',' or ')' expected");
            }
        }
        auto loc = parser.loc;
        if (parser.accept("this."))
        {
            string argname = parseIdentifier(parser);
            params ~= ASTThisAssignment(argname);
        }
        else
        {
            mut bool mutable;
            if (parser.acceptIdentifier("mut")) mutable = true;
            ASTSymbol argtype = lexicalContext.compiler.parseType(parser, lexicalContext);
            parser.assert_(!!argtype, "argument type expected");
            string argname = parseIdentifier(parser);
            parser.assert_(argname.length > 0, "argument name expected");
            params ~= ASTParameter(name=argname, mutable, argtype, loc);
        }
    }
    return params;
}

class FunctionReference : FunctionReferenceBase
{
    FunctionDeclaration fun;

    this(this.fun) {
        mut auto params = this.fun.params;
        if (this.fun.contextType) params = [Parameter.fromType(once new Pointer(new Void))] ~ params;

        this.type = new FunctionPointer(this.fun.ret, params);
    }

    override FunctionDeclaration getFunction() { return fun; }

    override int emit(Generator output)
    {
        this.fun.declare(output);

        return output.fun.getFuncPtr(this.fun.mangle);
    }

    override ExprInfo info() { return ExprInfo(false, Ownership.owned); }

    override void hash(Hash hash) { hash.adds("FunctionReference"); hash.adds(fun.mangle); }
}

class ASTFunction
{
    Loc loc;

    string name;

    ASTSymbol ret;

    ASTParameter[] params;

    bool isDeclaration;

    ASTStatement statement;

    MacroState macroState;

    this(this.loc, this.name, this.ret, this.params, this.isDeclaration, this.statement, this.macroState) { }

    FunctionDeclaration compile(Context context)
    {
        auto params = [
            Parameter(false, param.name, param.mutable, beType(param.loc, param.type.compile(context)))
            for param in this.params];

        if (this.isDeclaration)
        {
            return new FunctionDeclaration(
                this.name, beType(this.loc, this.ret.compile(context)), params);
        }

        auto fun = new Function(
            this.loc,
            this.name,
            beType(this.loc, this.ret.compile(context)),
            params,
            this.statement, this.macroState, false);

        fun.parent = context.namespace;
        return fun;
    }
}
