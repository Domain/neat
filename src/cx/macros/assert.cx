module cx.macros.assert;

import cx.base;
import cx.expr;
import cx.parser_base;
import cx.statements;
import cx.stuff;
import cx.types;

class ASTAssertion : ASTSymbol
{
    ASTSymbol test;

    Loc loc;

    this(ASTSymbol test, Loc loc) { this.test = test; this.loc = loc; }

    override Expression compile(Context context)
    {
        auto assertArgTypes = new Argument[](0) ~ Argument("test", new Integer);
        auto assertFun = new FunctionDeclaration("assert", new Void, assertArgTypes);

        findModule(context.namespace).add("assert", assertFun);

        auto expr = this.test.compile(context);
        auto assertArgs = new Expression[](0) ~ truthy(beExpression(expr), this.loc);

        return new Call(assertFun, assertArgs, this.loc);
    }
}

class Assert : Macro
{
    this() { }
    override void apply(MacroArgs args) {
        auto args = args.instanceOf(CallMacroArgs);
        if (args && args.name == "assert") {
            args.transformed = this.transform(args.symbols, args.context, args.loc);
        }
    }
    Expression transform(ASTSymbol[] symbols, Context context, Loc loc)
    {
        return (new ASTAssertion(symbols[0], loc)).compile(context);
    }
}

class ParseAssert : Macro
{
    this() { }
    override void apply(MacroArgs args) {
        auto args = args.instanceOf(ParseStatementArgs);
        if (args) {
            args.statement = this.parse(args.parser, args.lexicalContext);
        }
    }

    ASTStatement parse(Parser parser, LexicalContext context)
    {
        parser.begin();
        if (!parser.accept("assert"))
        {
            parser.revert();
            return null;
        }
        // assert(foo) form
        if (parser.accept("("))
        {
            parser.revert();
            return null;
        }
        parser.commit();

        auto expression = parseExpression(parser, context);

        parser.expect(";");

        return new ASTExprStatement(new ASTAssertion(expression, parser.loc()));
    }
}

void assertMacro(MacroState macroState)
{
    macroState.addMacro(new Assert);
    macroState.addMacro(new ParseAssert);
}

macro(assertMacro);
