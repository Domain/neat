module cx.parser_base;

import helpers;
import cx.linenr;

class Parser
{
    string[] stack;

    int level;

    string filename;

    string fulltext;

    LineNumberRegistry lineNumbers;

    IBasicObjectCache cache;

    this(this.filename, this.fulltext, this.cache, this.lineNumbers)
    {
        this.stack = new string[](1);
        this.stack[0] = this.fulltext;
        this.level = 0;
        this.verify();
    }

    void verify()
    {
        assert(this.stack.length > 0);
        assert(this.level < this.stack.length);
    }

    string text()
    {
        if (this.stack.length == 0 || this.level >= this.stack.length)
            assert(false);
        return this.stack[this.level];
    }

    void begin()
    {
        this.verify();
        if (this.level == this.stack.length - 1)
        {
            string[] newStack = new string[](this.stack.length * 2 + 1);
            for (int i = 0; i < this.stack.length; i += 1) newStack[i] = this.stack[i];
            this.stack = newStack;
        }
        this.stack[this.level + 1] = this.text();
        this.level = this.level + 1;
    }

    void commit()
    {
        assert(this.level > 0);
        this.verify();
        this.stack[this.level - 1] = this.text();
        this.level = this.level - 1;
        this.verify();
    }

    void revert()
    {
        this.verify();
        this.level = this.level - 1;
    }

    void drop(size_t length)
    {
        auto text = this.text();

        this.stack[this.level] = text[length .. text.length];
    }

    bool accept(string match)
    {
        this.begin();
        this.strip();
        if (this.text().length < match.length)
        {
            this.revert();
            return false;
        }
        if (this.text()[0 .. match.length] == match)
        {
            this.drop(match.length);
            this.commit();
            return true;
        }
        this.revert();
        return false;
    }

    void expect(string match)
    {
        if (!this.accept(match))
        {
            this.fail("'" ~ match ~ "' expected");
        }
    }

    bool eof()
    {
        this.begin();
        this.strip();
        if (this.text().length == 0)
        {
            this.commit();
            return true;
        }
        this.revert();
        return false;
    }

    void strip()
    {
        string text = this.text();
        while (true)
        {
            /* this.text = this.text.strip; */
            while (text.length > 0 && isWhitespace(text[0]))
            {
                text = text[1 .. text.length];
            }
            if (startsWith(text, "//"))
            {
                int newline = find(text, "\n");
                assert(newline != -1);
                text = text[newline + 1 .. text.length];
            }
            else
            {
                if (!startsWith(text, "/*"))
                {
                    this.stack[this.level] = text;
                    return;
                }
                text = text["/*".length .. text.length];
                int commentLevel = 1;
                while (commentLevel > 0)
                {
                    int more = find(text, "/*");
                    int less = find(text, "*/");

                    if (more == -1 && less == -1) {
                        this.stack[this.level] = text;
                        this.fail("comment spans end of file");
                    }
                    if (less != -1 && (more == -1 || less < more))
                    {
                        text = text[less + "*/".length .. text.length];
                        commentLevel = commentLevel - 1;
                    }
                    if (more != -1 && (less == -1 || more < less))
                    {
                        text = text[more + "/*".length .. text.length];
                        commentLevel = commentLevel + 1;
                    }
                }
            }
        }
    }

    void assert_(bool flag, string message)
    {
        if (!flag) this.fail(message);
    }

    void fail(string message)
    {
        this.strip();
        this.lineNumbers.print(this.filename, this.fulltext.length - this.text().length, "error: " ~ message);
        assert(false);
    }

    Loc loc() { return Loc(this.lineNumbers, ReLoc(this.filename, this.fulltext.length - this.text().length)); }
}

class IBasicObjectCache
{
}

bool isWhitespace(char c)
{
    return c == " "[0] || c == "\t"[0] || c == "\r"[0] || c == "\n"[0];
}

bool startsWith(string haystack, string needle)
{
    return haystack.length >= needle.length && haystack[0 .. needle.length] == needle;
}

int find(string haystack, string needle)
{
    for (int i = 0; i <= haystack.length - needle.length; i += 1)
    {
        if (haystack[i .. i + needle.length] == needle) return i;
    }
    return -1;
}

/**
 * Relative location.
 * Helper form that can be generated by a macro. Used for quasiquoting.
 * Equivalent to `parser_base.Loc`, but does not rely on the LineNumberRegistry
 * class or the source string.
 */
struct ReLoc {
    string filename;

    size_t offset;
}

struct Loc {
    LineNumberRegistry lineNumbers;

    ReLoc reloc;

    string text() {
        auto file = lineNumbers.findFile(reloc.filename);

        return file[reloc.offset .. file.length];
    }

    string location() {
        return this.lineNumbers.location(this.reloc.filename, this.reloc.offset);
    }

    void fail(string message) {
        this.lineNumbers.print(this.reloc.filename, this.reloc.offset, "error: " ~ message);
        assert(false);
    }

    void assert2s(int test, string msg) { if (!test) this.fail(msg); }
    void assert2s2(int test, string a, string b) { if (!test) this.fail(a ~ b); }
    void assert2s3(int test, string a, string b, string c) { if (!test) this.fail(a ~ b ~ c); }
    void assert2s4(int test, string a, string b, string c, string d) {
        if (!test) this.fail(a ~ b ~ c ~ d); }
    void assert2s5(int test, string a, string b, string c, string d, string e) {
        if (!test) this.fail(a ~ b ~ c ~ d ~ e); }
}
