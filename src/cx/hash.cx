module cx.hash;

struct PolyHashState {
    long add;
    long mult;
}

// see runtime.c
extern(C) void print(string);
extern(C) PolyHashState* poly_init();
extern(C) void poly_add_string(PolyHashState*, string);
extern(C) void poly_add_long(PolyHashState*, long);
extern(C) void poly_apply_hash(PolyHashState*, PolyHashState*);
extern(C) string poly_hex_value(PolyHashState*);
extern(C) PolyHashState poly_hash_string(string);

// Polynomial hash for composability
final class Hash
{
    PolyHashState* state;
    this()
    {
        state = poly_init;
    }
    void adds(string s)
    {
        poly_add_string(state, s);
    }
    void addl(long l)
    {
        poly_add_long(state, l);
    }
    void apply(long add, long mult)
    {
        auto hash = PolyHashState(add, mult);
        poly_apply_hash(state, &hash);
    }
    void applyHash(Hash other)
    {
        poly_apply_hash(state, other.state);
    }
    string text()
    {
        return poly_hex_value(state);
    }
}
