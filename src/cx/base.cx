module cx.base;

import backend.base;
import cx.hash;
import cx.linenr;
import cx.parser_base;
import helpers;

void assert2s(int test, string msg) { if (!test) { print(msg); assert(false); } }
void assert2s2(int test, string a, string b) { if (!test) { print(a ~ b); assert(false); } }
void assert2s3(int test, string a, string b, string c) { if (!test) { print(a ~ b ~ c); assert(false); } }
void assert2s4(int test, string a, string b, string c, string d) {
    if (!test) { print(a ~ b ~ c ~ d); assert(false); } }
void assert2s5(int test, string a, string b, string c, string d, string e) {
    if (!test) { print(a ~ b ~ c ~ d ~ e); assert(false); } }

// something that can be referenced by a name
abstract class Symbol
{
}

/**
 * A namespace is a lexical environment that supports identifier lookup.
 * Note that this means "foo", not "a.foo".
 */
abstract class Namespace
{
    Namespace parent; // lexical parent

    this(this.parent) { }

    // frame is a pointer to the stack frame or what was in the 'this'/'context' parameter.
    abstract Symbol lookup(string name, Context context, Expression frame) { assert(false); }

    string mangle() { return this.parent.mangle(); }
}

class LexicalContext
{
    CompilerBase compiler;

    MacroState macroState;

    this(this.compiler, this.macroState) { }
}

/**
 * Delineates a region of control flow in which 'break;' and 'continue;' may be used.
 */
abstract class LoopScope : Namespace
{
    abstract Statement breakFrom(Context context) { assert(false); }
    abstract Statement continueFrom(Context context) { assert(false); }
    // purely a marker
    override Symbol lookup(string name, Context context, Expression frame) {
        return this.parent.lookup(name, context, frame);
    }
}

LoopScope findLoopScope(Namespace namespace)
{
    auto loopScope = namespace.instanceOf(LoopScope);
    if (loopScope) return loopScope;
    if (namespace.parent) return findLoopScope(namespace.parent);
    return null;
}

abstract class ASTSymbol
{
    abstract Symbol compile(Context context) { assert(false); }

    ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTSymbol'!"); assert(false); }
}

abstract class ASTMemberBase : ASTSymbol
{
    ASTSymbol base;

    string member;

    Loc loc;

    this(this.base, this.member, this.loc) { }
}

abstract class Statement
{
    abstract void emit(Generator output) { assert(false); }
    abstract void hash(Hash hash) { assert(false); }
}

abstract class Type : Symbol
{
    abstract BackendType emit(Platform platform) { assert(false); }
    abstract bool same(Type type) { assert(false); }
    abstract string repr() { assert(false); }
    string mangle() { assert(false); }
    abstract void hash(Hash hash) { assert(false); }

    Expression implicitConvertFrom(Expression source)
    {
        return null;
    }

    Expression implicitConvertTo(Context context, Expression source, Type target)
    {
        return null;
    }

    Expression truthy(Context context, Expression expr, Loc loc)
    {
        return null;
    }

    /**
     * Called to create a copy of an expression in a target.
     * Note that `target` is considered uninitialized and must not be destroyed!
     */
    Statement copyInto(Context context, Reference target, Expression source)
    {
        return null;
    }

    /**
     * Called when a scoped expression goes out of scope.
     */
    Statement endLifetime(Context context, Reference reference)
    {
        return null;
    }

    /**
     * Called to resolve 'value.field'.
     * If 'base' is null, this indicates a static field access, 'Type.field'.
     */
    Symbol accessMember(Context context, Expression base, string field)
    {
        return null;
    }

    /**
     * Called to resolve 'lhs op rhs' where op is a binary operator.
     */
    Expression binaryOp(Context context, string op, Expression lhs, Expression rhs, Loc loc)
    {
        return null;
    }
}

abstract class ASTType
{
    abstract Type compile(Context context) { assert(false); }

    abstract ASTSymbol quote(Quoter quoter) { assert(false); }
}

class Void : Type
{
    BackendType type;
    this() { this.type = new BackendVoidType; }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Void); }

    override string repr() { return "void"; }

    override string mangle() { return "void"; }

    override void hash(Hash hash) { hash.adds("void"); }
}

class Pointer : Type
{
    Type target;

    this(this.target) { }

    override BackendType emit(Platform platform)
    {
        return new BackendPointerType(this.target.emit(platform));
    }

    override bool same(Type other)
    {
        Pointer otherPtr = other.instanceOf(Pointer);

        return otherPtr && this.target.same(otherPtr.target);
    }

    override string repr() { return this.target.repr() ~ "*"; }

    override string mangle() { return "ptr_" ~ this.target.mangle(); }

    override void hash(Hash hash) { hash.adds("pointer"); target.hash(hash); }
}

class Generator
{
    BackendModule mod;

    BackendFunction fun;

    Platform platform;

    int frameReg;

    this(this.platform, this.mod)
    {
        this.fun = null;
    }

    bool once(string name)
    {
        return this.mod.once(name);
    }
}

/**
 * Gifted: an expression with an unmanaged lifetime that we can take over
 * Owned: an owning reference to a tracked lifetime.
 * Borrowed: a reference to a tracked lifetime not at the address referenced.
 *
 * Examples:
 * - Gifted: `new Class()`
 * - Owned: `Class obj;`
 * - Borrowed: `void foo(Class obj) { }`
 *
 * Because of "caller owns", Borrowed needs to be its own thing. What if we reassigned
 * obj? We couldn't clean it up, and the caller would double clean the argument.
 * So function arguments can be referenced, but not overwritten.
 *
 * NOTE: Called methods can overwrite fields. This is awkward.
 * TODO: Prevent it.
 */
enum Ownership
{
    gifted,
    owned,
    borrowed,
}

struct ExprInfo
{
    Ownership ownership;
}

abstract class Expression : Symbol
{
    abstract Type type() { assert(false); }
    abstract int emit(Generator output) { assert(false); }
    abstract ExprInfo info() { assert(false); }
    abstract void hash(Hash hash) { assert(false); }
}

Expression beExpression(Symbol symbol)
{
    Expression expr = symbol.instanceOf(Expression);
    assert(!!expr);
    return expr;
}

Expression beExpression2(Symbol symbol, Loc loc)
{
    Expression expr = symbol.instanceOf(Expression);
    loc.assert2s(!!expr, "expression expected");
    return expr;
}

abstract class Reference : Expression
{
    int emitLocation(Generator output) { assert(false); }
}

class PointerCast : Expression
{
    Type target;

    Expression value;

    this(this.target, this.value) { }

    override Type type()
    {
        return this.target;
    }

    override int emit(Generator output)
    {
        int reg = this.value.emit(output);
        return output.fun.bitcast(reg, this.target.emit(output.platform));
    }

    override ExprInfo info() { return value.info(); }

    override void hash(Hash hash) { hash.adds("ptrcast"); target.hash(hash); value.hash(hash); }
}

/*
 * TODO: Right now we mix "callsite" and "function site" arguments.
 * If we separate these, we don't need isThisAssignment here.
 * Possibly separate FunctionDeclaration from FunctionImpl entirely.
 */
struct Argument
{
    // int i; this(this.i) { }  =>  this(int i) { this.i = i; }
    bool isThisAssignment;

    string name;

    Type type;
}

class FunctionDeclaration : Symbol
{
    string name;

    Type ret;

    Argument[] args;

    Type contextType; // must be a pointer

    this(this.name, this.ret, this.args)
    {
        this.contextType = null;
    }

    size_t numArgs()
    {
        if (!!contextType) return this.args.length + 1;
        return this.args.length;
    }

    string mangle() { return this.name; } // TODO extern

    void declare(Generator generator)
    {
        if (generator.mod.declared(this.mangle()))
            return;

        Type voidp = new Pointer(new Void);
        int extra = 0;
        if (this.contextType) extra = 1;
        auto argTypes = new BackendType[](this.numArgs());
        if (this.contextType) argTypes[0] = voidp.emit(generator.platform);
        for (int i = 0; i < this.args.length; i += 1)
            argTypes[extra + i] = this.args[i].type.emit(generator.platform);

        generator.mod.declare(
            this.mangle(),
            this.ret.emit(generator.platform),
            argTypes
        );
    }
}

/**
 * This is in base because it's circular with Context.
 */
class MacroState
{
    Macro[] macros;

    MacroState[] imports;

    this() { }

    MacroState dup() {
        auto newState = new MacroState;
        newState.macros = new Macro[](this.macros.length);
        for (int i = 0; i < this.macros.length; i += 1)
            newState.macros[i] = this.macros[i];
        newState.imports = new MacroState[](this.imports.length);
        for (int i = 0; i < this.imports.length; i += 1)
            newState.imports[i] = this.imports[i];
        return newState;
    }

    void applyMacro(MacroArgs args) {
        this.applyMacroExported(args);
        if (args.done()) return;
        for (int i = 0; i < this.imports.length; i += 1) {
            this.imports[i].applyMacroExported(args);
            if (args.done()) return;
        }
    }

    void applyMacroExported(MacroArgs args) {
        for (int i = 0; i < this.macros.length; i += 1) {
            this.macros[i].apply(args);
            if (args.done()) return;
        }
    }

    void addImport(MacroState target) {
        this.imports ~= target;
    }

    void addMacro(Macro macro_) {
        this.macros ~= macro_;
    }
}

// Something that should be cleaned up on unwind.
abstract class DeclarationHolder : Namespace
{
    abstract Reference accessDecl() { assert(false); }

    // macro backwards compat TODO remove
    Reference accessLocal() { return accessDecl(); }
}

struct TemporaryResult
{
    Statement initialize;

    Reference reference;
}

/**
 * Helper class used to break dependency loops between cx.base, macros and the rest of the compiler.
 */
abstract class CompilerBase
{
    LineNumberRegistry linenr;

    // parser
    abstract ASTSymbol parseExpression(Parser parser, LexicalContext lexicalContext) { assert(false); }

    abstract ASTSymbol parseExpressionLeaf(Parser parser, LexicalContext lexicalContext) { assert(false); }

    abstract ASTType parseType(Parser parser, LexicalContext lexicalContext) { assert(false); }

    abstract ASTStatement parseStatement(Parser parser, LexicalContext lexicalContext) { assert(false); }

    abstract ASTStatement astExpressionStmt(ASTSymbol expr, ReLoc reloc) { assert(false); }

    abstract ASTStatement astScope(ASTStatement[] stmts, ReLoc reloc) { assert(false); }

    // sequence of statements that don't open a new scope
    abstract ASTStatement astSequence(ASTStatement[] stmts, ReLoc reloc) { assert(false); }

    abstract ASTStatement astIf(ASTSymbol test, ASTStatement then, ASTStatement else_, ReLoc reloc) { assert(false); }

    abstract ASTStatement astForLoop(
        ASTStatement init, ASTSymbol test, ASTStatement step, ASTStatement body_, ReLoc reloc) {
        assert(false);
    }

    abstract ASTStatement astAssign(ASTSymbol target, ASTSymbol source, ReLoc reloc) { assert(false); }

    abstract ASTStatement astDeclareVar(string name, ASTSymbol initial, ReLoc reloc) { assert(false); }

    // initial is optional
    abstract ASTStatement astDeclareTypedVar(string name, ASTType type, ASTSymbol initial, ReLoc reloc) {
        assert(false);
    }

    abstract ASTStatement astReturn(ASTSymbol value, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astBinaryOp(string op, ASTSymbol left, ASTSymbol right, ReLoc reloc) {
        assert(false);
    }

    abstract ASTSymbol astCast(ASTType target, ASTSymbol value, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astIndex(ASTSymbol base, ASTSymbol index, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astMember(ASTSymbol base, string name, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astReference(ASTSymbol value, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astDereference(ASTSymbol value, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astIntLiteral(int value, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astLongLiteral(long value, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astStringLiteral(string text, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astArrayLiteral(ASTSymbol[] values, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astArraySlice(ASTSymbol array, ASTSymbol lower, ASTSymbol upper, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astVoidLiteral(ReLoc reloc) { assert(false); }

    abstract ASTSymbol astIdentifier(string name, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astNegation(ASTSymbol value, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astCall(ASTSymbol target, ASTSymbol[] args, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astNewExpression(ASTType type, ASTSymbol[] args, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astDestroy(ASTSymbol target, ReLoc reloc) { assert(false); }

    abstract ASTSymbol astStatementExpression(ASTStatement[] statements, ASTSymbol expr, ReLoc reloc) {
        assert(false);
    }

    abstract ASTType astArray(ASTType elementType, ReLoc reloc) { assert(false); }

    abstract ASTType astNamedType(string name, ReLoc reloc) { assert(false); }

    abstract ASTType astTypeOf(ASTSymbol symbol, ReLoc reloc) { assert(false); }

    abstract ASTType astPointer(ASTType target, ReLoc reloc) { assert(false); }

    // expressions and statements
    abstract Expression implicitConvertTo(Context context, Expression from, Type to) { assert(false); }

    abstract Expression binaryOp(string op, Context context, Expression left, Expression right, Loc loc) {
        assert(false);
    }

    abstract Expression intLiteral(int value) { assert(false); }

    abstract Expression truthy(Context context, Expression value, Loc loc) { assert(false); }

    abstract Expression castTo(Type target, Expression source) { assert(false); }

    abstract Expression stringLiteral(string value) { assert(false); }

    abstract Expression call(FunctionDeclaration fun, Expression[] args, Loc loc) { assert(false); }

    abstract Expression callWithLifetime(Context context, Symbol target, Expression[] args, Loc loc) {
        assert(false);
    }

    abstract Expression pointerOffset(Expression pointer, Expression offset) { assert(false); }

    // evaluate first `statement`, then `expression`.
    abstract Expression statementExpression(Statement statement, Expression expression) { assert(false); }

    abstract Reference dereference(Expression value) { assert(false); }

    abstract Expression reference(Reference ref_) { assert(false); }

    abstract Expression wrap(Statement before, Expression value, Statement after) { assert(false); }

    // wrap(), allowing References
    abstract Expression wrapRef(Statement before, Expression value, Statement after) { assert(false); }

    // Call dg with expr or copy of expr.
    // If expr was a gift, it is freed after.
    abstract Expression consume(Context context, Expression expr, Expression delegate(Expression) dg) { assert(false); }

    // Call dg with owned temp ref of expr.
    // If expr was a gift, it is freed after.
    abstract Expression consumeTemporary(
            Context context, bool allowRefReturn, Expression expr, Expression delegate(Reference) dg) {
        assert(false);
    }

    abstract Statement consumeTemporaryStmt(Context context, Expression expr, Statement delegate(Reference) dg) {
        assert(false);
    }

    // look up name following the namespace in context
    abstract Symbol lookup(Context context, string name) { assert(false); }

    abstract Statement assignStatement(Reference target, Expression value) { assert(false); }

    abstract Statement sequence(Statement first, Statement second) { assert(false); }

    abstract Statement sequenceStatement(Statement[] stmts) { assert(false); }

    abstract Statement ifStatement(Expression test, Statement then, Statement else_) { assert(false); }

    abstract Statement loopStatement(
            Context context, Statement initializer, Expression test, Statement body_, Statement step) {
        assert(false);
    }

    abstract Statement exprStatement(Expression test) { assert(false); }

    abstract Statement move(Context context, Reference target, Expression source) { assert(false); }

    abstract Statement stmtWithTemporary(Expression value, Statement delegate(Expression) callback) { assert(false); }

    abstract Statement unwindScope(Context context, Namespace target, Statement next) { assert(false); }

    abstract Expression exprWithTemporary(Expression value, Expression delegate(Expression) callback) { assert(false); }

    /**
    * Create a runtime function that, given some parameters, declares and calls the ASTStatement
    * provided.
    * The function will be automatically linked in.
    */
    abstract FunctionDeclaration createRuntimeFunction(
        Context context, string name, Type ret, Argument[] args, ASTStatement delegate() makeBody)
    {
        assert(false);
    }

    abstract Namespace exprAlias(Namespace parent, string name, Symbol value) { assert(false); }

    abstract DeclarationHolder variableDeclaration(Namespace parent, string name, Type type) { assert(false); }

    abstract Type nativeWordType(Platform platform) { assert(false); }

    Expression expectImplicitConvertTo(Context context, Expression from, Type to, Loc loc)
    {
        auto result = implicitConvertTo(context, from, to);
        if (result) return result;
        loc.assert2s4(false, "todo: cast(", to.repr(), ") ", from.type().repr());
    }
}

// TODO document where exactly this is used
struct Context
{
    // all members should be treated as immutable

    CompilerBase compiler;

    Platform platform;

    Namespace namespace;

    MacroState macroState;

    // here for caching reasons
    Type nativeWordType;

    int* idCounter;

    Context withNamespace(Namespace namespace)
    {
        return Context(this.compiler, this.platform, namespace, this.macroState, this.nativeWordType, this.idCounter);
    }

    string getLabel() { int i = *this.idCounter; *this.idCounter += 1; return "uniq" ~ itoa(i); }
}

extern(C) void* calloc(size_t nmemb, size_t size);

Context makeContext(CompilerBase compiler, Platform platform, Namespace namespace, MacroState macroState)
{
    return Context(
        compiler, platform, namespace, macroState, compiler.nativeWordType(platform), cast(int*) calloc(1, 4));
}

// TODO Statement, Context multi-return
struct StatementCompileResult
{
    Statement statement;

    Context context;
}

abstract class ASTStatement
{
    StatementCompileResult compile(Context context) { assert(false); }

    ASTSymbol quote(Quoter quoter) { assert(false); }
}

/**
 * Helper class used for quasiquoting.
 * Transforms an AST* into an ASTSymbol representing a CompilerBase call producing this thing.
 */
abstract class Quoter {
    CompilerBase compiler; // for use by quote() methods

    abstract ASTSymbol compilerCall(string name, ASTSymbol[] parameters, ReLoc reloc) { assert(false); }
    abstract ASTSymbol quoteReloc(ReLoc reloc) { assert(false); }
}

abstract class Macro
{
    abstract void apply(MacroArgs args) { assert(false); }
}

// macro subclasses are differentiated by args
abstract class MacroArgs
{
    abstract bool done() { assert(false); }
}

// hook the ASTCall -> Call transform
class CallMacroArgs : MacroArgs
{
    ASTSymbol target;
    ASTSymbol[] args;
    Context context;
    Loc loc;
    Expression transformed; // out
    this(this.target, this.args, this.context, this.loc) {
        this.transformed = null;
    }
    override bool done() { return !!this.transformed; }
}

// hook parseExpressionBase
class ParseExpressionBaseArgs : MacroArgs
{
    Parser parser;
    LexicalContext lexicalContext;
    ASTSymbol symbol; // out
    this(this.parser, this.lexicalContext) {
        this.symbol = null;
    }
    override bool done() { return !!this.symbol; }
}

// hook parseProperties
class ParsePropertyArgs : MacroArgs
{
    Parser parser;
    LexicalContext lexicalContext;
    ASTSymbol left;
    ASTSymbol result; // out
    this(this.parser, this.lexicalContext, this.left) {
        this.result = null;
    }
    override bool done() { return !!this.result; }
}

// hook parseStatement
class ParseStatementArgs : MacroArgs
{
    Parser parser;
    LexicalContext lexicalContext;
    ASTStatement statement; // out
    this(this.parser, this.lexicalContext) {
        this.statement = null;
    }
    override bool done() { return !!this.statement; }
}

class Package
{
    string name;
    string path;
    Package[] deps;

    this(this.name, this.path) { }

    void addDependency(Package dep) {
        this.deps ~= dep;
    }
}

class BasicObjectCache : IBasicObjectCache
{
    this(this.astvoid, this.astchar, this.astshort, this.astint, this.astlong, this.astfloat) { }
    ASTType astvoid;
    ASTType astchar;
    ASTType astshort;
    ASTType astint;
    ASTType astlong;
    ASTType astfloat;
}

// class.member
// here so we can destructure on it later
class ClassMethodPtr : Symbol
{
    Expression funcPtr;

    Expression thisPtr;

    this(this.funcPtr, this.thisPtr) { }
}

// here so we can destructure on it later
abstract class FunctionReferenceBase : Expression
{
    abstract FunctionDeclaration getFunction() { assert(false); }
}

// here so we can destructure on it later
abstract class StringLiteralBase : Expression
{
    string text;

    this(this.text) { }
}
