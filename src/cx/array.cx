module cx.array;

import backend.base;
// import backend.proxy;
import cx.base;
import cx.parser_base;
import cx.types;
import helpers;

int getArrayLen(Generator output, Type arrayType, int arrayReg)
{
    return output.fun.field(arrayType.emit(output.platform), arrayReg, 0);
}

class ArrayLength : Expression
{
    Expression arrayValue;

    Type type_;

    this(Expression arrayValue, Type type_) {
        this.arrayValue = arrayValue;
        this.type_ = type_;
    }

    override Type type()
    {
        return this.type_;
    }

    override int emit(Generator output)
    {
        int arrayReg = this.arrayValue.emit(output);

        return getArrayLen(output, this.arrayValue.type(), arrayReg);
    }
}

int getArrayPtr(Generator output, Type arrayType, int arrayReg)
{
    return output.fun.field(arrayType.emit(output.platform), arrayReg, 1);
}

class ArrayPointer : Expression
{
    Type elementType;

    Expression arrayValue;

    this(Type elementType, Expression arrayValue) { this.elementType = elementType; this.arrayValue = arrayValue; }

    override Type type()
    {
        return new Pointer(this.elementType);
    }

    override int emit(Generator output)
    {
        int arrayReg = this.arrayValue.emit(output);

        return getArrayPtr(output, this.arrayValue.type(), arrayReg);
    }
}

int makeArray(Generator output, Type elementType, int lenReg, int ptrReg)
{
    BackendType elemp = (new Pointer(elementType)).emit(output.platform);
    BackendType wordType = output.platform.nativeWordType();

    // TODO allocaless
    BackendType structType = (new Array(elementType)).emit(output.platform);
    auto stack = output.fun.saveStack();
    int structReg = output.fun.alloca(structType);
    int lenField = output.fun.fieldOffset(structType, structReg, 0);
    int ptrField = output.fun.fieldOffset(structType, structReg, 1);

    output.fun.store(wordType, lenField, lenReg);
    output.fun.store(elemp, ptrField, ptrReg);
    auto ret = output.fun.load(structType, structReg);
    output.fun.restoreStack(stack);
    return ret;
}

class ArrayExpression : Expression
{
    Expression pointer;

    Expression length;

    this(Expression pointer, Expression length) { this.pointer = pointer; this.length = length; }

    override Type type()
    {
        Pointer ptrType = this.pointer.type().instanceOf(Pointer);
        assert(!!ptrType);
        return new Array(ptrType.target);
    }

    override int emit(Generator output)
    {
        int pointer = this.pointer.emit(output);
        int length = this.length.emit(output);

        return makeArray(output, this.type().instanceOf(Array).elementType, length, pointer);
    }
}

class ArraySlice : Expression
{
    Expression array;

    Expression lower;

    Expression upper;

    Loc loc;

    this(Expression array, Expression lower, Expression upper, Loc loc)
    {
        this.array = array;
        this.lower = lower;
        this.upper = upper;
        this.loc = loc;
    }

    override Type type() { return this.array.type(); }

    override int emit(Generator output)
    {
        BackendType voidp = new BackendPointerType(new BackendVoidType);

        Array arrayType = this.array.type().instanceOf(Array);
        this.loc.assert2s(!!arrayType, "slice of non-array");
        int elementSize = arrayType.elementType.emit(output.platform).size(output.platform);

        int arrayReg = this.array.emit(output);
        int lowerReg = this.lower.emit(output);
        int upperReg = this.upper.emit(output);
        int ptr = getArrayPtr(output, arrayType, arrayReg);
        ptr = output.fun.bitcast(ptr, voidp);
        // ptr = ptr + lower
        int lowerOffset = output.fun.binop(
            "*", output.platform.nativeWordType(),
            lowerReg, output.fun.wordLiteral(output.platform, elementSize));
        int newPtr = output.fun.call(voidp, "ptr_offset", new int[](0) ~ ptr ~ lowerOffset);
        // len = upper - lower
        int newLen = output.fun.binop(
            "-", output.platform.nativeWordType(),
            upperReg, lowerReg);

        newPtr = output.fun.bitcast(newPtr, (new Pointer(arrayType.elementType)).emit(output.platform));
        return makeArray(output, arrayType.elementType, newLen, newPtr);
    }
}

class ArrayEqual : Expression
{
    Expression left;

    Expression right;

    this(Expression left, Expression right)
    {
        this.left = left;
        this.right = right;
    }

    override Type type() { return new Integer; }

    override int emit(Generator output)
    {
        Array leftArray = this.left.type().instanceOf(Array);
        Array rightArray = this.right.type().instanceOf(Array);
        assert(leftArray && rightArray);
        // TODO temp expr once array properties work on nonreferences
        assert(leftArray.same(rightArray));
        int left = this.left.emit(output);
        int right = this.right.emit(output);
        int leftLen = getArrayLen(output, leftArray, left);
        int rightLen = getArrayLen(output, rightArray, right);
        int leftPtr = getArrayPtr(output, leftArray, left);
        int rightPtr = getArrayPtr(output, rightArray, right);
        int leftSize = output.fun.wordLiteral(
            output.platform,
            leftArray.elementType.emit(output.platform).size(output.platform));
        return output.fun.call(new BackendIntType, "_arraycmp", new int[](0)
            ~ leftPtr ~ rightPtr ~ leftLen ~ rightLen ~ leftSize);
    }
}

class ArrayCat : Expression
{
    Expression left;

    Expression right;

    Loc loc;

    this(Expression left, Expression right, Loc loc) { this.left = left; this.right = right; this.loc = loc; }

    override Type type() {
        Array leftArray = this.left.type().instanceOf(Array);
        this.loc.assert2s(!!leftArray, "left type is not an array");
        Array rightArray = this.right.type().instanceOf(Array);
        this.loc.assert2s(
            this.right.type().same(leftArray.elementType)
            || rightArray && rightArray.same(leftArray),
            "right array is incompatible with left"
        );

        return leftArray;
    }

    override int emit(Generator output)
    {
        // TODO simplify this?
        BackendType voidp = (new Pointer(new Void)).emit(output.platform);
        int leftReg = this.left.emit(output);
        Array leftType = this.left.type().instanceOf(Array);
        this.loc.assert2s(!!leftType, "left expression is not an array");
        Type rightType = this.right.type();
        int leftLen = getArrayLen(output, leftType, leftReg);
        int leftPtr = getArrayPtr(output, leftType, leftReg);
        leftPtr = output.fun.bitcast(leftPtr, voidp);
        int elementSize = output.fun.wordLiteral(
            output.platform,
            leftType.elementType.emit(output.platform).size(output.platform));
        if (leftType.elementType.same(rightType))
        {
            // size = sizeof(T) * (array.length + 1)
            int oldSize = output.fun.binop(
                "*", output.platform.nativeWordType(),
                leftLen, elementSize);
            int newSize = output.fun.binop(
                "+", output.platform.nativeWordType(),
                oldSize, elementSize);

            int newArrayPtr = output.fun.call(voidp, "cxruntime_alloc", new int[](0) ~ newSize);
            output.fun.call(voidp, "memcpy", new int[](0) ~ newArrayPtr ~ leftPtr ~ oldSize);
            // *(ptr + prevLength) = right;
            int newElement = output.fun.call(voidp, "ptr_offset", new int[](0) ~ newArrayPtr ~ oldSize);
            newElement = output.fun.bitcast(newElement, (new Pointer(this.right.type())).emit(output.platform));
            output.fun.store(this.right.type().emit(output.platform), newElement, this.right.emit(output));

            // return ptr[0 .. prevLength + 1];
            int newArrayLen = output.fun.binop(
                "+", output.platform.nativeWordType(),
                leftLen, output.fun.wordLiteral(output.platform, 1));

            newArrayPtr = output.fun.bitcast(newArrayPtr, (new Pointer(leftType.elementType)).emit(output.platform));
            return makeArray(output, leftType.elementType, newArrayLen, newArrayPtr);
        }
        if (leftType.same(rightType))
        {
            auto rightReg = this.right.emit(output);
            auto rightLen = getArrayLen(output, rightType, rightReg);
            auto rightPtr = getArrayPtr(output, rightType, rightReg);
            rightPtr = output.fun.bitcast(rightPtr, voidp);
            auto newArrayLen = output.fun.binop("+", output.platform.nativeWordType(), leftLen, rightLen);
            auto leftBytes = output.fun.binop("*", output.platform.nativeWordType(), leftLen, elementSize);
            auto rightBytes = output.fun.binop("*", output.platform.nativeWordType(), rightLen, elementSize);
            // size = sizeof(T) * (left.length + right.length)
            auto newBytes = output.fun.binop("*", output.platform.nativeWordType(), newArrayLen, elementSize);

            auto voidp = (new Pointer(new Void)).emit(output.platform);
            auto newArrayPtr = output.fun.call(voidp, "cxruntime_alloc", new int[](0) ~ newBytes);
            // write left at 0
            output.fun.call(voidp, "memcpy", new int[](0) ~ newArrayPtr ~ leftPtr ~ leftBytes);
            // write right at ptr + leftLen
            auto startRightPtr = output.fun.call(voidp, "ptr_offset", new int[](0) ~ newArrayPtr ~ leftBytes);
            output.fun.call(voidp, "memcpy", new int[](0) ~ startRightPtr ~ rightPtr ~ rightBytes);

            newArrayPtr = output.fun.bitcast(newArrayPtr, (new Pointer(leftType.elementType)).emit(output.platform));
            return makeArray(output, leftType.elementType, newArrayLen, newArrayPtr);
        }
        this.loc.assert2s(false, "left and right types don't match");
    }
}
