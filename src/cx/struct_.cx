module cx.struct_;

import backend.base;
import cx.base;
import helpers;

class StructMemberDeclaration
{
    string name;

    Type type;

    this(string name, Type type)
    {
        this.name = name;
        this.type = type;
    }
}

class Struct : Type
{
    string name;

    StructMemberDeclaration[] members;

    FunctionDeclaration[] methods;

    this(string name, StructMemberDeclaration[] members)
    {
        this.name = name;
        this.members = members;
    }

    override bool same(Type other) {
        // TODO mangling
        Struct otherStruct = other.instanceOf(Struct);
        if (!otherStruct) return false;
        return this.name == otherStruct.name;
    }

    override BackendType emit(Platform platform)
    {
        auto memberTypes = new BackendType[](this.members.length);
        for (int i = 0; i < this.members.length; i += 1)
        {
            memberTypes[i] = this.members[i].type.emit(platform);
        }
        return new BackendStructType(memberTypes);
    }

    override string repr() { return this.name; }
}

class StructMember : Reference
{
    Reference base;

    int index;

    this(Reference base, int index)
    {
        this.base = base;
        Struct structType = this.base.type().instanceOf(Struct);
        assert(!!structType);
        this.index = index;
    }

    override Type type()
    {
        Type type = this.base.type();
        Struct structType = type.instanceOf(Struct);
        assert(!!structType);
        return structType.members[this.index].type;
    }

    override int emit(Generator output)
    {
        int locationReg = this.emitLocation(output);

        return output.fun.load(this.type().emit(output.platform), locationReg);
    }

    override int emitLocation(Generator output)
    {
        int reg = this.base.emitLocation(output);

        return output.fun.fieldOffset(this.base.type().emit(output.platform), reg, this.index);
    }
}
