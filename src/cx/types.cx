module cx.types;

import backend.base;
import cx.base;
import helpers;
import cx.parser;
import cx.parser_base;

class ASTCharacter : ASTType
{
    Type type;
    this() { this.type = new Character; }
    override Type compile(Context context) { return this.type; }
}

class Character : Type
{
    BackendType type;
    this() { this.type = new BackendCharType; }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other)
    {
        return !!other.instanceOf(Character);
    }

    override string repr() { return "char"; }
}

class ASTInteger : ASTType
{
    Type type;
    this() { this.type = new Integer; }
    override Type compile(Context context) { return this.type; }
}

class Integer : Type
{
    BackendType type;
    this() { this.type = new BackendIntType; }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Integer); }

    override string repr() { return "int"; }
}

class ASTLong : ASTType
{
    Type type;
    this() { this.type = new Long; }

    override Type compile(Context context) { return this.type; }
}

class Long : Type
{
    BackendType type;
    this() { this.type = new BackendLongType; }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Long); }

    override string repr() { return "long"; }
}

class ASTShort : ASTType
{
    Type type;
    this() { this.type = new Short; }

    override Type compile(Context context) { return this.type; }
}

class Short : Type
{
    BackendType type;
    this() { this.type = new BackendShortType; }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Short); }

    override string repr() { return "short"; }
}

class ASTVoid : ASTType
{
    Type type;
    this() { this.type = new Void; }

    override Type compile(Context context) { return this.type; }
}

class ASTFloat : ASTType
{
    Type type;
    this() { this.type = new Float; }

    override Type compile(Context context) { return this.type; }
}

class Float : Type
{
    BackendType type;
    this() { this.type = new BackendFloatType; }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Float); }

    override string repr() { return "float"; }
}

class ASTPointer : ASTType
{
    ASTType subType;

    this(ASTType subType) { this.subType = subType; }

    override Type compile(Context context)
    {
        Type subType = this.subType.compile(context);

        return new Pointer(subType);
    }
}

class NamedType : ASTType
{
    string name;

    Loc loc;

    this(string name, Loc loc) {
        assert(name.length > 0);
        this.name = name;
        this.loc = loc;
    }

    override Type compile(Context context)
    {
        Symbol target = context.namespace.lookup(this.name, null);

        this.loc.assert2s2(target && target.instanceOf(Type), this.name, " is not a type");
        return target.instanceOf(Type);
    }
}

// hook type parsing
class TypeMacroArgs : MacroArgs
{
    Parser parser;
    LexicalContext lexicalContext;
    ASTType astType;
    this(Parser parser, LexicalContext lexicalContext) {
        this.parser = parser;
        this.lexicalContext = lexicalContext;
        this.astType = null;
    }
    override bool done() { return !!this.astType; }
}

ASTType parseLeafType(Parser parser, LexicalContext lexicalContext)
{
    {
        auto typeMacroArgs = new TypeMacroArgs(parser, lexicalContext);
        lexicalContext.macroState.applyMacro(typeMacroArgs);
        if (typeMacroArgs.astType) return typeMacroArgs.astType;
    }
    parser.begin();

    string identifier = parseIdentifier(parser);

    if (!identifier.length)
    {
        parser.revert();
        return null;
    }

    if (identifier == "long")
    {
        parser.commit();
        if (!parser.cache.astlong) parser.cache.astlong = new ASTLong;
        return parser.cache.astlong;
    }

    if (identifier == "int")
    {
        parser.commit();
        if (!parser.cache.astint) parser.cache.astint = new ASTInteger;
        return parser.cache.astint;
    }

    if (identifier == "short")
    {
        parser.commit();
        if (!parser.cache.astshort) parser.cache.astshort = new ASTShort;
        return parser.cache.astshort;
    }

    if (identifier == "char")
    {
        parser.commit();
        if (!parser.cache.astchar) parser.cache.astchar = new ASTCharacter;
        return parser.cache.astchar;
    }

    if (identifier == "void")
    {
        parser.commit();
        if (!parser.cache.astvoid) parser.cache.astvoid = new ASTVoid;
        return parser.cache.astvoid;
    }

    if (identifier == "float")
    {
        parser.commit();
        if (!parser.cache.astfloat) parser.cache.astfloat = new ASTFloat;
        return parser.cache.astfloat;
    }

    parser.commit();
    return new NamedType(identifier, parser.loc());
}

// length, ptr
class Array : Type
{
    Type elementType;

    this(Type elementType) { this.elementType = elementType; }

    override BackendType emit(Platform platform)
    {
        auto types = new BackendType[](2);
        types[0] = platform.nativeWordType();
        types[1] = new BackendPointerType(this.elementType.emit(platform));
        return new BackendStructType(types);
    }

    override bool same(Type other)
    {
        Array otherArray = other.instanceOf(Array);

        return otherArray && otherArray.elementType.same(this.elementType);
    }

    override string repr() { return this.elementType.repr() ~ "[]"; }
}

class ASTArray : ASTType
{
    ASTType elementType;

    this(ASTType elementType) { this.elementType = elementType; }

    override Type compile(Context context)
    {
        return new Array(this.elementType.compile(context));
    }
}

class ASTFunctionPointer : ASTType
{
    ASTType ret;

    ASTType[] args;

    this(ASTType ret, ASTType[] args) { this.ret = ret; this.args = args; }

    override Type compile(Context context)
    {
        Type ret = this.ret.compile(context);
        Type[] args = new Type[](this.args.length);
        for (int i = 0; i < this.args.length; i += 1) args[i] = this.args[i].compile(context);

        return new FunctionPointer(ret, args);
    }
}

class FunctionPointer : Type
{
    Type ret;

    Type[] args;

    this(Type ret, Type[] args) { this.ret = ret; this.args = args; }

    override BackendType emit(Platform platform)
    {
        auto args = new BackendType[](this.args.length);
        for (int i = 0; i < this.args.length; i += 1) args[i] = this.args[i].emit(platform);
        return new BackendFunctionPointerType(this.ret.emit(platform), args);
    }

    override bool same(Type other)
    {
        FunctionPointer otherPtr = other.instanceOf(FunctionPointer);
        if (!otherPtr) return false;
        if (!this.ret.same(otherPtr.ret)) return false;
        if (this.args.length != otherPtr.args.length) return false;
        for (int i = 0; i < this.args.length; i += 1)
            if (!this.args[i].same(otherPtr.args[i])) return false;
        return true;
    }

    override string repr() { return this.ret.repr() ~ "(...)"; }
}

ASTType parseType(Parser parser, LexicalContext lexicalContext)
{
    ASTType current = parseLeafType(parser, lexicalContext);
    if (!current) return null;
    while (true)
    {
        if (parser.accept("*"))
        {
            current = new ASTPointer(current);
        }
        else
        {
            parser.begin();
            string identifier = parseIdentifier(parser);
            if (identifier == "function")
            {
                parser.expect("(");
                ASTType[] args;
                while (!parser.accept(")"))
                {
                    if (args.length)
                    {
                        if (!parser.accept(","))
                        {
                            parser.fail("',' or ')' expected");
                        }
                    }
                    ASTType argType = parseType(parser, lexicalContext);
                    assert(!!argType);

                    args ~= argType;
                }
                parser.commit();
                current = new ASTFunctionPointer(current, args);
            } else {
                parser.revert();
                parser.begin();
                if (parser.accept("[") && parser.accept("]"))
                {
                    parser.commit();

                    current = new ASTArray(current);
                } else {
                    parser.revert();
                    return current;
                }
            }
        }
    }
}

Type nativeWordType(Platform platform)
{
    BackendType type = platform.nativeWordType();
    if (type.instanceOf(BackendIntType)) return new Integer;
    if (type.instanceOf(BackendLongType)) return new Long;
    assert(false);
}
