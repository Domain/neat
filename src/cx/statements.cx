module cx.statements;

macro import cx.macros.once;

import backend.base;
import cx.base;
import cx.expr;
import cx.hash;
import cx.parser;
import cx.parser_base;
import helpers;

class ASTAssignStatement : ASTStatement
{
    ASTSymbol target;

    ASTSymbol value;

    Loc loc;

    this(this.target, this.value, this.loc) {}

    override StatementCompileResult compile(Context context)
    {
        auto compiler = context.compiler;

        Symbol target = this.target.compile(context);
        Expression value = beExpression3(context, this.value.compile(context), this.loc);
        Reference targetref = target.instanceOf(Reference);
        this.loc.assert2s(!!targetref, "target of assignment must be a reference");
        // Broadly, this check is the reason that 'borrowed' exists.
        // FIXME hasDestructor
        bool hasDtor = !!targetref.type.endLifetime(context, targetref);
        this.loc.assert2s(
            targetref.info.ownership != Ownership.borrowed || !hasDtor,
            "cannot reassign to borrowed value with destructor");
        auto type = targetref.type;
        value = expectImplicitConvertTo(context, value, type, this.loc);

        /**
         * Order is important here.
         *
         * 1. temporize the RHS. (NO copy ctor!)
         * 2. temporize the old LHS.
         * 3. overwrite the LHS with the temporized RHS. (copy here)
         * 4. destroy the old LHS value.
         *
         * Why this order? Evaluating the RHS might change the LHS address
         * (consider: *f() = *g() - in that case, g() is more likely to
         * invalidate f() than the other way around).
         * Also, the RHS may just *be* the LHS, as in "s = s;"
         * Hence we need to temporize the RHS.
         * The address of LHS is temporized so that the destructor call
         * doesn't lead to a double evaluation.
         * The old LHS value is rescued so that more complex versions of
         * "s = s" don't leave the references in "s" abandoned between
         * endLifetime and moveInto. In other words, since s_2 may depend on s_1,
         * their lifetimes need to overlap.
         *
         * But man, what an ugly-ass dataflow...
         */

        Statement do1(Expression tmpValue) {
            Statement do2(Expression tmpLhsPtr) {
                auto tmpLhs = compiler.dereference(tmpLhsPtr);

                Statement do3(Expression oldLhs) {
                    assert(!!oldLhs.instanceOf(Reference));
                    auto reassign = compiler.move(context, tmpLhs, tmpValue);
                    auto cleanup = oldLhs.type.endLifetime(context, oldLhs.instanceOf(Reference));

                    return sequence(reassign, cleanup);
                }
                return compiler.stmtWithTemporary(tmpLhs, &do3);
            }
            return compiler.stmtWithTemporary(compiler.reference(targetref), &do2);
        }
        return StatementCompileResult(
            compiler.stmtWithTemporary(value, &do1), context);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astAssign", [target.quote(quoter), value.quote(quoter)], loc.reloc);
    }
}

class AssignStatement : Statement
{
    Reference target;

    Expression value;

    this(this.target, this.value) {
        assert(target.type.same(value.type));
    }

    override void emit(Generator output)
    {
        Type valueType = this.value.type;
        int target_reg = this.target.emitLocation(output);
        int value_reg = this.value.emit(output);

        output.fun.store(valueType.emit(output.platform), target_reg, value_reg);
    }

    override void hash(Hash hash) { hash.adds("AssignStatement"); target.hash(hash); value.hash(hash); }
}

class NoopStatement : Statement
{
    this() { }

    override void emit(Generator generator)
    {
    }

    override void hash(Hash hash) { hash.adds("NoopStatement"); }
}

class ReturnStatement : Statement
{
    Expression value;

    this(this.value) { }

    override void emit(Generator output)
    {
        int reg = this.value.emit(output);

        output.fun.ret(reg);
        output.fun.setLabel(output.fun.getLabel);
    }

    override void hash(Hash hash) { hash.adds("ReturnStatement"); value.hash(hash); }
}

class IfStatement : Statement
{
    Expression test;

    Statement then;

    Statement else_;

    this(this.test, this.then, this.else_) { }

    override void emit(Generator output)
    {
        int reg = this.test.emit(output);

        string label = output.fun.getLabel;
        if (this.else_)
            output.fun.testBranch(reg, label ~ "_then", label ~ "_else");
        else
            output.fun.testBranch(reg, label ~ "_then", label ~ "_fin");

        output.fun.setLabel(label ~ "_then");
        this.then.emit(output);
        output.fun.branch(label ~ "_fin");

        if (this.else_)
        {
            output.fun.setLabel(label ~ "_else");
            this.else_.emit(output);
            output.fun.branch(label ~ "_fin");
        }
        output.fun.setLabel(label ~ "_fin");
    }

    override void hash(Hash hash) {
        hash.adds("IfStatement");
        test.hash(hash);
        then.hash(hash);
        if (else_) else_.hash(hash);
        else hash.adds("no else");
    }
}

class ASTBreakStatement : ASTStatement
{
    ReLoc reloc;

    this(this.reloc) { }

    override StatementCompileResult compile(Context context)
    {
        auto loc = Loc(context.compiler.linenr, this.reloc);
        auto loopScope = findParent!LoopScope(context.namespace);
        loc.assert2s(!!loopScope, "Cannot 'break': not in a loop.");
        return StatementCompileResult(loopScope.breakFrom(context), context);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTBreakStatement", reloc), [
                quoter.quoteReloc(reloc)], reloc);
    }
}

class ASTContinueStatement : ASTStatement
{
    ReLoc reloc;

    this(this.reloc) { }

    override StatementCompileResult compile(Context context)
    {
        auto loc = Loc(context.compiler.linenr, this.reloc);
        auto loopScope = findParent!LoopScope(context.namespace);
        loc.assert2s(!!loopScope, "Cannot 'continue': not in a loop.");
        return StatementCompileResult(loopScope.continueFrom(context), context);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTContinueStatement", reloc), [
                quoter.quoteReloc(reloc)], reloc);
    }
}

class Branch : Statement
{
    string label;

    this(this.label) { }

    override void emit(Generator output)
    {
        output.fun.branch(this.label);
    }

    override void hash(Hash hash) { hash.adds("Branch"); hash.adds(label); }
}

class ASTExprStatement : ASTStatement
{
    ASTSymbol value;

    Loc loc;

    this(this.value, this.loc) { }

    override StatementCompileResult compile(Context context)
    {
        auto expr = beExpression3(context, this.value.compile(context), this.loc);
        return StatementCompileResult(discard(context, expr), context);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astExpressionStmt", [value.quote(quoter)], loc.reloc);
    }
}

// see ExprInfo info in Expression
// this is a "move" not in the sense that the source gets destroyed,
// as that it steals the reference belonging to the source. Essentially,
// it takes ownership of the source expression.
Statement move(Context context, Reference target, Expression source)
{
    if (source.info.ownership == Ownership.gifted) {
        // steal the reference
        return new AssignStatement(target, source);
    }
    auto type = target.type;
    auto copyInto = type.copyInto(context, target, source);
    if (!copyInto) copyInto = new AssignStatement(target, source);
    return copyInto;
}

class ExprStatement : Statement
{
    Expression value;

    this(this.value) { assert(!!value); }

    override void emit(Generator output)
    {
        this.value.emit(output);
    }

    override void hash(Hash hash) { hash.adds("ExprStatement"); value.hash(hash); }
}

Statement destroy(Context context, Expression expr)
{
    auto type = expr.type;
    auto reference = expr.instanceOf(Reference);
    if (reference) return type.endLifetime(context, reference);
    // TODO hasDestructor?
    Reference temp = new Temporary(new NullExpr(type));
    // call destructor on result
    auto stmt = type.endLifetime(context, temp);
    if (stmt) return sequence(new AssignStatement(temp, expr), stmt);
    return new ExprStatement(expr);
}

Statement discard(Context context, Expression expr)
{
    auto type = expr.type;
    if (expr.info.ownership == Ownership.gifted && !type.same(once new Void)) {
        return destroy(context, expr);
    } else {
        return new ExprStatement(expr);
    }
}

/**
 * Generic loop class, covering For and While.
 *
 *  setup // may be null for while loop
 * start:
 *  if (!condition) goto break
 *  body
 * continue:
 *  loopstep // may be null for while loop
 *  goto start
 * break:
 */
class Loop : Statement
{
    string label;

    Statement setup;

    Expression condition;

    Statement body_;

    Statement loopstep;

    this(this.label, this.setup, this.condition, this.body_, this.loopstep) { }

    override void emit(Generator output)
    {
        if (this.setup) this.setup.emit(output);

        output.fun.branch(label ~ "_start");

        output.fun.setLabel(label ~ "_start"); // start:
        int condReg = this.condition.emit(output);
        output.fun.testBranch(condReg, label ~ "_body", label ~ "_break");

        output.fun.setLabel(label ~ "_body");
        this.body_.emit(output);
        output.fun.branch(label ~ "_continue");
        output.fun.setLabel(label ~ "_continue");
        if (this.loopstep) this.loopstep.emit(output);
        output.fun.branch(label ~ "_start");
        output.fun.setLabel(label ~ "_break");
    }

    override void hash(Hash hash) {
        hash.adds("LoopStatement");
        hash.adds(label);
        if (setup) setup.hash(hash);
        else hash.adds("no setup");
        condition.hash(hash);
        body_.hash(hash);
        if (loopstep) loopstep.hash(hash);
        else hash.adds("no loopstep");
    }
}

class LabelLoopScope : LoopScope
{
    string label;
    this(this.label, this.parent) { this.isContextScope = true; }
    override Statement breakFrom(Context context) {
        auto branch = new Branch(this.label ~ "_break");

        return sequence(context.compiler.unwindScope(context, this, null), branch);
    }
    override Statement continueFrom(Context context) {
        auto branch = new Branch(this.label ~ "_continue");

        return sequence(context.compiler.unwindScope(context, this, null), branch);
    }
}

class SequenceStatement : Statement
{
    Statement[] statements;

    this(this.statements) { }

    override void emit(Generator output)
    {
        for (auto statement <- this.statements) {
            statement.emit(output);
        }
    }

    override void hash(Hash hash)
    {
        hash.adds("SequenceStatement");
        hash.addl(statements.length);
        for (auto statement <- statements)
            statement.hash(hash);
    }
}

Statement sequence(Statement left, Statement right)
{
    if (!left) return right;
    if (!right) return left;
    if (left.instanceOf(NoopStatement)) return right;
    if (right.instanceOf(NoopStatement)) return left;
    auto prevSequence = left.instanceOf(SequenceStatement);
    if (prevSequence) return new SequenceStatement(prevSequence.statements ~ right);
    return new SequenceStatement([left, right]);
}

class StatementExpression : Expression
{
    Statement statement;

    Expression expression;

    bool gifted;

    this(this.statement, this.expression, this.gifted) {
        assert(!!statement);
        assert(!!expression);
        this.type = this.expression.type;
    }

    override int emit(Generator generator)
    {
        this.statement.emit(generator);
        return this.expression.emit(generator);
    }

    override ExprInfo info() {
        if (gifted) return ExprInfo(false, Ownership.gifted);
        return expression.info;
    }

    override void hash(Hash hash) {
        hash.adds("StatementExpression");
        statement.hash(hash);
        expression.hash(hash);
    }
}
