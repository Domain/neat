module cx.expr;

macro import cx.macros.hash;
macro import cx.macros.once;

import backend.base;
import cx.array;
import cx.base;
import cx.hash;
import cx.parser;
import cx.parser_base;
import cx.types;
import helpers;

Expression expectImplicitConvertTo(Context context, Expression from, Type to, Loc loc)
{
    loc.assert2s(!!to, "no implconv target type");
    auto result = implicitConvertTo(context, from, to);
    if (result) return result;
    loc.assert2s4(false, "todo: cast(", to.repr(), ") ", from.type().repr());
}

Expression implicitConvertTo(Context context, Expression from, Type to)
{
    auto fromType = from.type();

    if (fromType.same(to)) return from;
    // void* casts to any pointer
    if (to.instanceOf(Pointer) && fromType.same(once new Pointer(new Void)))
    {
        return new PointerCast(to, from);
    }
    if (fromType.instanceOf(Integer) && to.instanceOf(Long))
    {
        return new IntToLong(from);
    }
    if (fromType.instanceOf(Short) && to.instanceOf(Integer))
    {
        return new ShortToInt(from);
    }
    if (fromType.instanceOf(Short) && to.instanceOf(Long))
    {
        return new IntToLong(new ShortToInt(from));
    }
    if (fromType.instanceOf(Integer) && to.instanceOf(Float))
    {
        return new IntToFloat(from);
    }
    // short-sized literals shrink to short
    auto literal = from.instanceOf(IntLiteral);

    if (literal && to.instanceOf(Short) && literal.value >= -32768 && literal.value <= 32767)
    {
        return new ShortLiteral(literal.value);
    }
    // FIXME byte
    if (literal && to.instanceOf(Character) && literal.value >= -128 && literal.value <= 127)
    {
        return new CharLiteral(literal.value);
    }
    // any pointer casts to void*
    if (fromType.instanceOf(Pointer) && to.same(once new Pointer(new Void)))
    {
        return new PointerCast(to, from);
    }
    Expression fromImplicit = to.implicitConvertFrom(from);
    if (fromImplicit) return fromImplicit;
    Expression toImplicit = fromType.implicitConvertTo(context, from, to);
    if (toImplicit) return toImplicit;
    return null;
}

class BinaryOp : Expression
{
    string op;

    Expression left;

    Expression right;

    Loc loc;

    this(this.op, this.left, this.right, this.loc) { }

    override Type type()
    {
        string op = this.op;
        if (op == "+" || op == "-" || op == "*" || op == "/" || op == "&" || op == "|") {
            Type rightType = this.right.type();
            if (rightType.instanceOf(Long)) return rightType;
            if (rightType.instanceOf(Float)) return rightType;
            return this.left.type();
        }
        if (op == "==" || op == "!=" || op == ">=" || op == "<=" || op == ">" || op == "<" || op == "is")
            return once new Integer;
        assert(false);
    }

    override int emit(Generator output)
    {
        Expression left = this.left;
        Expression right = this.right;
        auto ltype = left.type();
        auto rtype = right.type();
        if (ltype.instanceOf(Integer) && rtype.instanceOf(Long)) {
            left = new IntToLong(left);
            ltype = rtype;
        }
        if (ltype.instanceOf(Long) && rtype.instanceOf(Integer)) {
            right = new IntToLong(right);
            rtype = ltype;
        }
        if (ltype.instanceOf(Integer) && rtype.instanceOf(Float)) {
            left = new IntToFloat(left);
            ltype = rtype;
        }
        if (ltype.instanceOf(Float) && rtype.instanceOf(Integer)) {
            right = new IntToFloat(right);
            rtype = ltype;
        }
        string op = this.op;
        if (this.op == "is")
        {
            op = "==";
        }
        else
        {
            this.loc.assert2s3(
                ltype.instanceOf(Integer) || ltype.instanceOf(Long) ||
                ltype.instanceOf(Float) || ltype.instanceOf(Character),
                this.op, " (l) expected int/float/long/char, not ", ltype.repr());
        }
        this.loc.assert2s5(!!ltype.same(rtype),
            this.op, ": types don't match, ", ltype.repr(), ", ", rtype.repr());
        int leftreg = left.emit(output);
        int rightreg = right.emit(output);
        return output.fun.binop(op, ltype.emit(output.platform), leftreg, rightreg);
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("BinaryOp"); hash.adds(op); left.hash(hash); right.hash(hash); }
}

class PointerOffset : Expression
{
    Expression pointer;

    Expression offset;

    this(this.pointer, this.offset)
    {
        assert(!!this.pointer.type().instanceOf(Pointer));
    }

    override Type type()
    {
        return pointer.type();
    }

    override int emit(Generator output)
    {
        auto type = pointer.type().instanceOf(Pointer);

        int baseReg = pointer.emit(output);
        int offsetReg = offset.emit(output);
        return output.fun.ptrOffset(type.target.emit(output.platform), baseReg, offsetReg);
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("PointerOffset"); pointer.hash(hash); offset.hash(hash); }
}

class IntToLong : Expression
{
    Expression intValue;

    this(this.intValue) { }

    override Type type() { return once new Long; }

    override int emit(Generator output) {
        assert(!!this.intValue.type().instanceOf(Integer));

        int intValue = this.intValue.emit(output);
        return output.fun.signExtend(intValue, once new BackendLongType);
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("IntToLong"); intValue.hash(hash); }
}

class ShortToInt : Expression
{
    Expression shortValue;

    this(this.shortValue) { }

    override Type type() { return once new Integer; }

    override int emit(Generator output) {
        assert(!!this.shortValue.type().instanceOf(Short));

        int shortValue = this.shortValue.emit(output);
        return output.fun.signExtend(shortValue, once new BackendIntType);
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("ShortToInt"); shortValue.hash(hash); }
}

class IntToFloat : Expression
{
    Expression intValue;

    this(this.intValue) { }

    override Type type() { return new Float; }

    override int emit(Generator output) {
        assert(!!this.intValue.type().instanceOf(Integer));

        int intValue = this.intValue.emit(output);
        return output.fun.intToFloat(intValue);
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("IntToFloat"); intValue.hash(hash); }
}

class BoolOr : Expression
{
    Expression left;

    Expression right;

    this(this.left, this.right) { }

    override Type type() { return once new Integer; }

    override int emit(Generator output)
    {
        /**
         * result = left;
         * if (left) goto past;
         * result = right;
         * past:
         */
        BackendType intType = once new BackendIntType;
        int result = output.fun.staticAlloca(intType);

        int leftValue = this.left.emit(output);
        output.fun.store(intType, result, leftValue);

        auto label = output.fun.getLabel();
        output.fun.testBranch(leftValue, label ~ "_past", label ~ "_right"); // if (left)
        output.fun.setLabel(label ~ "_right");

        int rightValue = this.right.emit(output);
        output.fun.store(intType, result, rightValue);
        output.fun.branch(label ~ "_past");

        output.fun.setLabel(label ~ "_past");
        return output.fun.load(intType, result);
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("BoolOr"); left.hash(hash); right.hash(hash); }
}

class BoolAnd : Expression
{
    Expression left;

    Expression right;

    this(this.left, this.right) { }

    override Type type() { return once new Integer; }

    override int emit(Generator output)
    {
        /**
         * result = left;
         * if (left) result = right;
         */
        BackendType intType = once new BackendIntType;
        int result = output.fun.staticAlloca(intType);

        int leftValue = this.left.emit(output);
        output.fun.store(intType, result, leftValue);

        auto label = output.fun.getLabel();
        output.fun.testBranch(leftValue, label ~ "_true", label ~ "_past"); // if (left)
        output.fun.setLabel(label ~ "_true");

        int rightValue = this.right.emit(output);
        output.fun.store(intType, result, rightValue);
        output.fun.branch(label ~ "_past");

        output.fun.setLabel(label ~ "_past");
        return output.fun.load(intType, result);
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("BoolAnd"); left.hash(hash); right.hash(hash); }
}

class IntLiteral : Expression
{
    int value;
    this(this.value) { }
    override Type type() { return once new Integer; }
    override int emit(Generator output) { return output.fun.intLiteral(this.value); }
    override ExprInfo info() { return ExprInfo(Ownership.owned); }
    override void hash(Hash hash) { hash.adds("IntLiteral"); hash.addl(value); }
}

class LongLiteral : Expression
{
    long value;
    this(this.value) { }
    override Type type() { return once new Long; }
    override int emit(Generator output) { return output.fun.longLiteral(this.value); }
    override ExprInfo info() { return ExprInfo(Ownership.owned); }
    override void hash(Hash hash) { hash.adds("LongLiteral"); hash.addl(value); }
}

class ShortLiteral : Expression
{
    int value;

    this(this.value) { }

    override Type type()
    {
        return once new Short;
    }

    override int emit(Generator output)
    {
        return output.fun.shortLiteral(this.value);
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("ShortLiteral"); hash.addl(value); }
}

class CharLiteral : Expression
{
    int value;

    this(this.value) { }

    override Type type()
    {
        return once new Character;
    }

    override int emit(Generator output)
    {
        return output.fun.byteLiteral(this.value);
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("CharLiteral"); hash.addl(value); }
}

class FloatLiteral : Expression
{
    float value;

    this(this.value) { }

    override Type type()
    {
        return once new Float;
    }

    override int emit(Generator output)
    {
        return output.fun.floatLiteral(this.value);
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("FloatLiteral"); hash.adds(ftoa(value)); }
}

class StringLiteral : StringLiteralBase
{
    this(this.text) { }

    override Type type()
    {
        return once new Array(new Character);
    }

    override int emit(Generator output)
    {
        int len = output.fun.wordLiteral(output.platform, this.text.length);
        int ptr = output.fun.stringLiteral(this.text);
        int nullptr = output.fun.bitcast(output.fun.wordLiteral(output.platform, 0), output.platform.voidp);

        return makeArray(output, once new Character, len, ptr, nullptr);
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("StringLiteral"); hash.adds(text); }
}

class Call : Expression
{
    FunctionDeclaration fun;

    Expression[] args;

    Loc loc;

    this(this.fun, this.args, this.loc)
    {
        loc.assert2s5(
            fun.numArgs() == args.length,
            fun.name, " expected ", ltoa(fun.numArgs()), " args, not ", ltoa(args.length));
        int extra = !!fun.contextType;
        for (int i = extra; i < fun.args.length; i += 1) {
            assert(args[extra + i].type().same(fun.args[i].type));
        }
    }

    override Type type()
    {
        return this.fun.ret;
    }

    override int emit(Generator output)
    {
        this.fun.declare(output);

        int[] regs = new int[](this.args.length);
        for (int i = 0; i < this.args.length; i += 1) {
            regs[i] = this.args[i].emit(output);
        }
        return output.fun.call(this.type().emit(output.platform), this.fun.mangle(), regs);
    }

    // we take over the returned value
    override ExprInfo info() { return ExprInfo(Ownership.gifted); }

    override void hash(Hash hash) {
        hash.adds("Call");
        hash.adds(fun.mangle());
        hash.addl(args.length);
        for (int i = 0; i < args.length; i += 1)
            args[i].hash(hash);
    }
}

Expression truthy(Context context, Expression value, Loc loc) {
    Type type = value.type();
    loc.assert2s(!!type, "internal error");
    Expression truthyExpr = type.truthy(context, value, loc);
    if (truthyExpr) return truthyExpr;

    if (type.instanceOf(Pointer))
    {
        auto sizeT = context.nativeWordType;

        return new BinaryOp("!=", new CastExpr(sizeT, value), once new IntLiteral(0), loc);
    }
    loc.assert2s(type.instanceOf(Integer) || type.instanceOf(Long), "integer expected");
    return new BinaryOp("!=", value, once new IntLiteral(0), loc);
}

class ASTBinaryOp : ASTSymbol
{
    string op;

    ASTSymbol left;

    ASTSymbol right;

    Loc loc;

    this(this.op, this.left, this.right, this.loc) { }

    override Expression compile(Context context)
    {
        Expression left = beExpression2(this.left.compile(context), this.loc);
        Expression right = beExpression2(this.right.compile(context), this.loc);
        auto leftType = left.type(), rightType = right.type();

        auto opOverload = leftType.binaryOp(context, this.op, left, right, this.loc);
        if (opOverload) return opOverload;

        if (this.op == "~")
        {
            loc.assert2s2(
                !!leftType.instanceOf(Array),
                "Left hand side of concatenation isn't array, but ", leftType.repr());
            auto converted = implicitConvertTo(context, right, leftType.instanceOf(Array).elementType);
            if (converted) {
                return context.compiler.binaryOp("~", context, left, converted, this.loc);
            }

            return context.compiler.binaryOp("~", context, left, right, this.loc);
        }
        if (this.op == "&&")
            return new BoolAnd(truthy(context, left, this.loc), truthy(context, right, this.loc));
        if (this.op == "||")
            return new BoolOr(truthy(context, left, this.loc), truthy(context, right, this.loc));
        if (this.op == "==" && leftType.instanceOf(Array) && rightType.instanceOf(Array))
        {
            Expression do1(Expression left)
            {
                Expression do2(Expression right)
                {
                    return new ArrayEqual(left, right);
                }
                return context.compiler.consume(context, right, &do2);
            }
            return context.compiler.consume(context, left, &do1);
        }

        return new BinaryOp(this.op, left, right, this.loc);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astBinaryOp", [
            quoter.compiler.astStringLiteral(op, loc.reloc),
            left.quote(quoter),
            right.quote(quoter)], loc.reloc);
    }
}

class ReferenceExpression : Expression
{
    Reference base;

    this(this.base) { }

    override Type type()
    {
        Type superType = this.base.type();

        return new Pointer(superType);
    }

    override int emit(Generator output)
    {
        return this.base.emitLocation(output);
    }

    override ExprInfo info() { return base.info(); }

    override void hash(Hash hash) { hash.adds("ReferenceExpression"); base.hash(hash); }
}

/**
 * Must be initialized once with a InitializeTemporaryStatement.
 */
class PairedTemporary : Reference
{
    Type type_;

    int reg;

    bool temporary_;

    this(this.type_, this.temporary_)
    {
        this.reg = -1;
    }

    override Type type() { return this.type_; }

    override int emitLocation(Generator output)
    {
        assert(reg != -1);

        return reg;
    }

    override int emit(Generator output)
    {
        auto type = this.type().emit(output.platform);

        return output.fun.load(type, emitLocation(output));
    }

    override ExprInfo info() {
        // FIXME
        if (temporary_)
            return ExprInfo(Ownership.gifted);
        return ExprInfo(Ownership.owned);
    }

    // temp value change identified in InitializeTemporaryStatement
    // TODO use label?
    override void hash(Hash hash) {
        hash.adds("PairedTemporary");
        if (this.temporary_) hash.adds("is temporary");
        else hash.adds("not temporary");
        type_.hash(hash);
    }
}

class UninitializeTemporaryStatement : Statement
{
    PairedTemporary target;

    this(this.target) { }

    override void emit(Generator output)
    {
        // does double-emit ever happen?
        // yes! - macros!
        // TODO figure out a Generator based way (named regs?) to avoid double emit.
        // assert(target.reg == -1);

        auto type = target.type_.emit(output.platform);

        target.reg = output.fun.staticAlloca(type);
    }

    // TODO id here?
    override void hash(Hash hash) {
        hash.adds("UninitializeTemporaryStatement");
    }
}

// assignment that defines a register
class InitializeTemporaryStatement : Statement
{
    PairedTemporary target;

    Expression value;

    this(this.target, this.value) { }

    override void emit(Generator output)
    {
        // does double-emit ever happen?
        // yes! - macros!
        // TODO figure out a Generator based way (named regs?) to avoid double emit.
        // assert(target.reg == -1);

        auto type = target.type_.emit(output.platform);

        target.reg = output.fun.staticAlloca(type);
        int value = value.emit(output);
        output.fun.store(type, target.reg, value);
    }

    // TODO id here?
    override void hash(Hash hash) {
        hash.adds("InitializeTemporaryStatement");
        value.hash(hash);
    }
}

class Temporary : Reference
{
    Expression expr;

    string label;

    this(this.expr)
    {
        this.label = ptrId(this);
    }

    override Type type() { return expr.type(); }

    override int emitLocation(Generator output)
    {
        if (output.fun.hasNamedReg(label))
            return output.fun.getNamedReg(label);

        BackendType type = this.type().emit(output.platform);
        int ptr = output.fun.staticAlloca(type);
        int value = this.expr.emit(output);
        output.fun.store(type, ptr, value);

        output.fun.setNamedReg(label, ptr);
        return ptr;
    }

    override int emit(Generator output)
    {
        auto type = this.type().emit(output.platform);

        return output.fun.load(type, emitLocation(output));
    }

    override ExprInfo info() { return expr.info(); }

    override void hash(Hash hash) {
        hash.adds("temporary");
        expr.hash(hash);
    }
}

class NullExpr : Expression
{
    Type type_;

    this(this.type_) { }

    override Type type()
    {
        return this.type_;
    }

    override int emit(Generator generator)
    {
        return generator.fun.zeroLiteral(this.type_.emit(generator.platform));
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("NullExpr"); type_.hash(hash); }
}

class CastExpr : Expression
{
    Type target;

    Expression value;

    this(this.target, this.value) { }

    override Type type() { return target; }

    override int emit(Generator generator)
    {
        auto type = value.type();
        auto value = this.value.emit(generator);
        auto target = this.target.emit(generator.platform);
        if (type.instanceOf(Long) && this.target.instanceOf(Integer)) {
            return generator.fun.trunc(value, target);
        }
        if (type.instanceOf(Float) && this.target.instanceOf(Integer)) {
            return generator.fun.floatToInt(value);
        }

        return generator.fun.bitcast(value, target);
    }

    override ExprInfo info() { return ExprInfo(Ownership.owned); }

    override void hash(Hash hash) { hash.adds("CastExpr"); target.hash(hash); value.hash(hash); }
}

class ASTCastExpr : ASTSymbol
{
    ASTType target;

    ASTSymbol value;

    Loc loc;

    this(this.target, this.value, this.loc) { }

    override Expression compile(Context context)
    {
        auto target = this.target.compile(context);
        auto value = beExpression2(this.value.compile(context), loc);

        return new CastExpr(target, value);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astCast", [
            target.quote(quoter),
            value.quote(quoter)], loc.reloc);
    }
}
