module cx.expr;

import backend.base;
import cx.array;
import cx.base;
import cx.parser;
import cx.parser_base;
import cx.types;
import helpers;

Expression implicitConvertTo(Expression from, Type to, Loc loc)
{
    if (from.type().same(to)) return from;
    // void* casts to any pointer
    if (to.instanceOf(Pointer) && from.type().same(new Pointer(new Void)))
    {
        return new PointerCast(to, from);
    }
    if (from.type().instanceOf(Integer) && to.instanceOf(Long))
    {
        return new IntToLong(from);
    }
    if (from.type().instanceOf(Integer) && to.instanceOf(Float))
    {
        return new IntToFloat(from);
    }
    // any pointer casts to void*
    if (from.type().instanceOf(Pointer) && to.same(new Pointer(new Void)))
    {
        return new PointerCast(to, from);
    }
    Expression fromImplicit = to.implicitConvertFrom(from);
    if (fromImplicit) return fromImplicit;
    Expression toImplicit = from.type().implicitConvertTo(from, to);
    if (toImplicit) return toImplicit;
    loc.assert2s4(false, "todo: cast(", to.repr(), ") ", from.type().repr());
}

class BinaryOp : Expression
{
    string op;

    Expression left;

    Expression right;

    Loc loc;

    this(string op, Expression left, Expression right, Loc loc)
    {
        this.op = op;
        this.left = left;
        this.right = right;
        this.loc = loc;
    }

    override Type type()
    {
        string op = this.op;
        if (op == "+" || op == "-" || op == "*" || op == "&") {
            Type rightType = this.right.type();
            if (rightType.instanceOf(Long)) return rightType;
            return this.left.type();
        }
        if (op == "==" || op == ">=" || op == "<=" || op == ">" || op == "<")
            return new Integer;
        assert(false);
    }

    override int emit(Generator output)
    {
        Expression left = this.left;
        Expression right = this.right;
        auto ltype = left.type();
        auto rtype = right.type();
        if (ltype.instanceOf(Integer) && rtype.instanceOf(Long)) {
            left = new IntToLong(left);
            ltype = rtype;
        }
        if (ltype.instanceOf(Long) && rtype.instanceOf(Integer)) {
            right = new IntToLong(right);
            rtype = ltype;
        }
        if (ltype.instanceOf(Integer) && rtype.instanceOf(Float)) {
            left = new IntToFloat(left);
            ltype = rtype;
        }
        if (ltype.instanceOf(Float) && rtype.instanceOf(Integer)) {
            right = new IntToFloat(right);
            rtype = ltype;
        }
        this.loc.assert2s3(ltype.instanceOf(Integer) || ltype.instanceOf(Long) || ltype.instanceOf(Float),
            this.op, " (l) expected int/float/long, not ", ltype.repr());
        this.loc.assert2s5(!!ltype.same(rtype),
            this.op, ": types don't match, ", ltype.repr(), ", ", rtype.repr());
        int leftreg = left.emit(output);
        int rightreg = right.emit(output);
        return output.fun.binop(this.op, ltype.emit(output.platform), leftreg, rightreg);
    }
}

class IntToLong : Expression
{
    Expression intValue;

    this(Expression intValue) { this.intValue = intValue; }

    override Type type() { return new Long; }

    override int emit(Generator output) {
        assert(!!this.intValue.type().instanceOf(Integer));

        int intValue = this.intValue.emit(output);
        return output.fun.signExtend(intValue, 4, 8);
    }
}

class IntToFloat : Expression
{
    Expression intValue;

    this(Expression intValue) { this.intValue = intValue; }

    override Type type() { return new Float; }

    override int emit(Generator output) {
        assert(!!this.intValue.type().instanceOf(Integer));

        int intValue = this.intValue.emit(output);
        return output.fun.intToFloat(intValue);
    }
}

class ArrayCat : Expression
{
    Expression left;

    Expression right;

    this(Expression left, Expression right) { this.left = left; this.right = right; }

    override Type type() {
        Array leftArray = this.left.type().instanceOf(Array);
        assert(!!leftArray);
        Array rightArray = this.right.type().instanceOf(Array);
        assert(
            this.right.type().same(leftArray.elementType)
            || rightArray && rightArray.same(leftArray)
        );

        return leftArray;
    }

    override int emit(Generator output)
    {
        // TODO simplify this?
        BackendType voidp = (new Pointer(new Void)).emit(output.platform);
        int leftReg = this.left.emit(output);
        Array leftType = this.left.type().instanceOf(Array);
        assert(!!leftType);
        Type rightType = this.right.type();
        int leftLen = getArrayLen(output, leftType, leftReg);
        int leftPtr = getArrayPtr(output, leftType, leftReg);
        leftPtr = output.fun.bitcast(leftPtr, voidp);
        int elementSize = output.fun.wordLiteral(
            output.platform,
            leftType.elementType.emit(output.platform).size(output.platform));
        if (leftType.elementType.same(rightType))
        {
            // size = sizeof(T) * (array.length + 1)
            int oldSize = output.fun.binop(
                "*", output.platform.nativeWordType(),
                leftLen, elementSize);
            int newSize = output.fun.binop(
                "+", output.platform.nativeWordType(),
                oldSize, elementSize);

            int newArrayPtr = output.fun.call(voidp, "cxruntime_alloc", new int[](0) ~ newSize);
            output.fun.call(voidp, "memcpy", new int[](0) ~ newArrayPtr ~ leftPtr ~ oldSize);
            // *(ptr + prevLength) = right;
            int newElement = output.fun.call(voidp, "ptr_offset", new int[](0) ~ newArrayPtr ~ oldSize);
            newElement = output.fun.bitcast(newElement, (new Pointer(this.right.type())).emit(output.platform));
            output.fun.store(this.right.type().emit(output.platform), newElement, this.right.emit(output));

            // return ptr[0 .. prevLength + 1];
            int newArrayLen = output.fun.binop(
                "+", output.platform.nativeWordType(),
                leftLen, output.fun.wordLiteral(output.platform, 1));

            newArrayPtr = output.fun.bitcast(newArrayPtr, (new Pointer(leftType.elementType)).emit(output.platform));
            return makeArray(output, leftType.elementType, newArrayLen, newArrayPtr);
        }
        if (leftType.same(rightType))
        {
            auto rightReg = this.right.emit(output);
            auto rightLen = getArrayLen(output, rightType, rightReg);
            auto rightPtr = getArrayPtr(output, rightType, rightReg);
            rightPtr = output.fun.bitcast(rightPtr, voidp);
            auto newArrayLen = output.fun.binop("+", output.platform.nativeWordType(), leftLen, rightLen);
            auto leftBytes = output.fun.binop("*", output.platform.nativeWordType(), leftLen, elementSize);
            auto rightBytes = output.fun.binop("*", output.platform.nativeWordType(), rightLen, elementSize);
            // size = sizeof(T) * (left.length + right.length)
            auto newBytes = output.fun.binop("*", output.platform.nativeWordType(), newArrayLen, elementSize);

            auto voidp = (new Pointer(new Void)).emit(output.platform);
            auto newArrayPtr = output.fun.call(voidp, "cxruntime_alloc", new int[](0) ~ newBytes);
            // write left at 0
            output.fun.call(voidp, "memcpy", new int[](0) ~ newArrayPtr ~ leftPtr ~ leftBytes);
            // write right at ptr + leftLen
            auto startRightPtr = output.fun.call(voidp, "ptr_offset", new int[](0) ~ newArrayPtr ~ leftBytes);
            output.fun.call(voidp, "memcpy", new int[](0) ~ startRightPtr ~ rightPtr ~ rightBytes);

            newArrayPtr = output.fun.bitcast(newArrayPtr, (new Pointer(leftType.elementType)).emit(output.platform));
            return makeArray(output, leftType.elementType, newArrayLen, newArrayPtr);
        }
        assert(false);
    }
}

class BoolOr : Expression
{
    Expression left;

    Expression right;

    this(Expression left, Expression right)
    {
        this.left = left;
        this.right = right;
    }

    override Type type() { return new Integer; }

    override int emit(Generator output)
    {
        /**
         * result = left;
         * if (left) goto past;
         * result = right;
         * past:
         */
        BackendType intType = new BackendIntType;
        int result = output.fun.alloca(intType);

        int leftValue = this.left.emit(output);
        output.fun.store(intType, result, leftValue);

        auto label = output.fun.getLabel();
        output.fun.testBranch(leftValue, label ~ "_past", label ~ "_right"); // if (left)
        output.fun.setLabel(label ~ "_right");

        int rightValue = this.right.emit(output);
        output.fun.store(intType, result, rightValue);
        output.fun.branch(label ~ "_past");

        output.fun.setLabel(label ~ "_past");
        return output.fun.load(intType, result);
    }
}

class BoolAnd : Expression
{
    Expression left;

    Expression right;

    this(Expression left, Expression right)
    {
        this.left = left;
        this.right = right;
    }

    override Type type() { return new Integer; }

    override int emit(Generator output)
    {
        /**
         * result = left;
         * if (left) result = right;
         */
        BackendType intType = new BackendIntType;
        int result = output.fun.alloca(intType);

        int leftValue = this.left.emit(output);
        output.fun.store(intType, result, leftValue);

        auto label = output.fun.getLabel();
        output.fun.testBranch(leftValue, label ~ "_true", label ~ "_past"); // if (left)
        output.fun.setLabel(label ~ "_true");

        int rightValue = this.right.emit(output);
        output.fun.store(intType, result, rightValue);
        output.fun.branch(label ~ "_past");

        output.fun.setLabel(label ~ "_past");
        return output.fun.load(intType, result);
    }
}

class Literal : Expression
{
    int value;

    this(int value) { this.value = value; }

    override Type type()
    {
        return new Integer;
    }

    override int emit(Generator output)
    {
        return output.fun.intLiteral(this.value);
    }
}

class StringLiteral : Expression
{
    string text;

    this(string text) { this.text = text; }

    override Type type()
    {
        return new Array(new Character);
    }

    override int emit(Generator output)
    {
        int len = output.fun.wordLiteral(output.platform, this.text.length);
        int ptr = output.fun.stringLiteral(this.text);

        return makeArray(output, new Character, len, ptr);
    }
}

class Call : Expression
{
    FunctionDeclaration fun;

    Expression[] args;

    Loc loc;

    this(FunctionDeclaration fun, Expression[] args, Loc loc)
    {
        loc.assert2s5(
            fun.args.length == args.length,
            fun.name, " expected ", ltoa(fun.args.length), " args, not ", ltoa(args.length));

        for (int i = 0; i < args.length; i += 1)
        {
            args[i] = implicitConvertTo(args[i], fun.args[i].type, loc);
        }
        this.fun = fun;
        this.args = args;
        this.loc = loc;
    }

    override Type type()
    {
        return this.fun.ret;
    }

    override int emit(Generator output)
    {
        int[] regs = new int[](this.args.length);
        for (int i = 0; i < this.args.length; i += 1) {
            regs[i] = this.args[i].emit(output);
        }
        return output.fun.call(this.type().emit(output.platform), this.fun.mangle(), regs);
    }
}

Expression truthy(Expression value, Loc loc) {
    Type type = value.type();
    Expression truthyExpr = type.truthy(value, loc);
    if (truthyExpr) return truthyExpr;

    if (type.instanceOf(Pointer))
    {
        Type voidp = new Pointer(new Void);
        FunctionDeclaration rt_ptr_test = new FunctionDeclaration("cxruntime_ptr_test",
            new Integer,
            new Argument[](0) ~ new Argument("", voidp));
        Expression ptrCast = new PointerCast(voidp, value);
        return new Call(rt_ptr_test, new Expression[](0) ~ ptrCast, loc);
    }
    loc.assert2s(type.instanceOf(Integer) || type.instanceOf(Long), "integer expected");
    // (a == 0) == 0
    return new BinaryOp(
        "==",
        new BinaryOp("==", value, new Literal(0), loc),
        new Literal(0), loc);
}

class ASTBinaryOp : ASTSymbol
{
    string op;

    ASTSymbol left;

    ASTSymbol right;

    Loc loc;

    this(string op, ASTSymbol left, ASTSymbol right, Loc loc) {
        this.op = op;
        this.left = left;
        this.right = right;
        this.loc = loc;
    }

    override Expression compile(Context context)
    {
        Expression left = beExpression(this.left.compile(context));
        Expression right = beExpression(this.right.compile(context));
        if (this.op == "~")
            return new ArrayCat(left, right);
        if (this.op == "&&")
            return new BoolAnd(truthy(left, this.loc), truthy(right, this.loc));
        if (this.op == "||")
            return new BoolOr(truthy(left, this.loc), truthy(right, this.loc));
        if (this.op == "==" && left.type().instanceOf(Array) && right.type().instanceOf(Array))
            return new ArrayEqual(left, right);

        return new BinaryOp(this.op, left, right, this.loc);
    }
}
