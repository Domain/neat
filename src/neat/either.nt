module neat.either;

macro import neat.macros.quasiquoting;

import backend.base;
import helpers;
import neat.base;
import neat.parser;
import neat.hash;
import neat.parser_base;
import neat.types;

/**
 * Note: Either field offset is member index + 1!
 * This way, the uninitialized state can be detected and caught.
 * (It isn't yet, though.)
 */

/**
 * What is 'fail'?
 * A "failing member" is a member of an Either decl that represents a failure of the function.
 * When extracting a result from the call, "failing" members are considered falsy and excluded.
 */
struct ASTEitherDeclEntry
{
    Loc loc;

    bool fail;

    ASTSymbol symbol;
}

class ASTEitherDecl : ASTSymbol
{
    ASTEitherDeclEntry[] partTypes;

    this(this.partTypes) { }

    override Type compile(Context context)
    {
        auto partTypes = new (bool fail, Type)[](this.partTypes.length);
        for (i, partType in this.partTypes) {
            partTypes[i] = (
                partType.fail,
                beType(partType.loc, partType.symbol.compile(context)));
        }

        return new Either(partTypes);
    }

    override ASTSymbol quote(Quoter quoter)
    {
        // TODO move into quoter?
        ASTSymbol quoteBool(bool b) {
            if (b) return quoter.compiler.astIdentifier("true", __HERE__);
            return quoter.compiler.astIdentifier("false", __HERE__);
        }
        mut ASTSymbol[] quotedParts;
        for (entry in this.partTypes) {
            quotedParts ~= quoter.compiler.astCall(
                quoter.compiler.astIdentifier("ASTEitherDeclEntry", __HERE__), [
                    quoter.quoteLoc(entry.loc),
                    quoteBool(entry.fail),
                    entry.symbol.quote(quoter)], __HERE__);
        }
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTEitherDecl", __HERE__), [
                quoter.compiler.astArrayLiteral(quotedParts, __HERE__)], __HERE__);
    }
}

class EitherExpr : Expression
{
    Either either;

    Expression value;

    int offset;

    this(this.either, this.value, this.offset) {
        this.type = this.either;
    }

    override int emit(Generator generator)
    {
        BackendType eitherType = either.emit(generator.platform);
        int reg = generator.fun.staticAlloca(eitherType);
        int offsetTarget = generator.fun.fieldOffset(eitherType, reg, 0);
        int offsetValue = generator.fun.intLiteral(offset + 1);
        int rawValueTarget = generator.fun.fieldOffset(eitherType, reg, 1);
        BackendType backendValueType = either.types[offset].type.emit(generator.platform);
        int valueTarget = generator.fun.bitcast(rawValueTarget, new BackendPointerType(backendValueType));
        int value = this.value.emit(generator);

        generator.fun.store(new BackendIntType, offsetTarget, offsetValue);
        generator.fun.store(backendValueType, valueTarget, value);

        return generator.fun.load(eitherType, reg);
    }

    // consume value's lifetime
    override ExprInfo info() { return value.info(); }

    override void hash(Hash hash) { hash.adds("EitherExpr"); value.hash(hash); hash.addl(offset); }
}

class EitherType : Expression
{
    Expression value;

    this(this.value) {
        this.type = new Integer;
    }

    override int emit(Generator generator)
    {
        auto eitherType = this.value.type.emit(generator.platform);
        int eitherValue = this.value.emit(generator);
        return generator.fun.field(eitherType, eitherValue, 0);
    }

    override ExprInfo info() { return ExprInfo(false, Ownership.owned); }

    override void hash(Hash hash) { hash.adds("EitherType"); value.hash(hash); }
}

class EitherTypeReference : Reference
{
    Reference base;

    this(this.base) {
        this.type = new Integer;
    }

    override int emitLocation(Generator output)
    {
        auto eitherType = this.base.type.emit(output.platform);
        int baseptr = this.base.emitLocation(output);
        return output.fun.fieldOffset(eitherType, baseptr, 0);
    }

    override int emit(Generator output)
    {
        return output.fun.load(this.type.emit(output.platform), this.emitLocation(output));
    }

    override ExprInfo info() { return ExprInfo(false, Ownership.owned); }

    override void hash(Hash hash) { hash.adds("EitherTypeReference"); base.hash(hash); }
}

class EitherReference : Reference
{
    Reference base;

    int offset;

    this(this.base, this.offset) {
        this.type = this.base.type.instanceOf(Either).types[this.offset].type;
    }

    override int emitLocation(Generator output)
    {
        BackendType eitherType = this.base.type.emit(output.platform);
        int eitherPtr = this.base.emitLocation(output);
        int eitherUnionPtr = output.fun.fieldOffset(eitherType, eitherPtr, 1);
        BackendType backendValueType = this.type.emit(output.platform);
        int valuePtr = output.fun.bitcast(eitherUnionPtr, new BackendPointerType(backendValueType));

        return valuePtr;
    }

    override int emit(Generator output)
    {
        return output.fun.load(
            this.type.emit(output.platform),
            emitLocation(output));
    }

    // EitherReference should not participate in memory management
    override ExprInfo info() { return ExprInfo(false, Ownership.owned); }

    override void hash(Hash hash) { hash.adds("EitherReference"); base.hash(hash); hash.addl(offset); }
}

class EitherMember : Expression
{
    Expression value;

    int offset;

    this(this.value, this.offset) {
        this.type = this.value.type.instanceOf(Either).types[this.offset].type;
    }

    override int emit(Generator generator)
    {
        BackendType eitherType = this.value.type.emit(generator.platform);
        int eitherValuePtr = generator.fun.staticAlloca(eitherType);

        int eitherValue = this.value.emit(generator);
        generator.fun.store(eitherType, eitherValuePtr, eitherValue);

        int eitherUnionPtr = generator.fun.fieldOffset(eitherType, eitherValuePtr, 1);
        // load the union value
        BackendType backendValueType = this.type.emit(generator.platform);
        int valuePtr = generator.fun.bitcast(eitherUnionPtr, new BackendPointerType(backendValueType));
        return generator.fun.load(backendValueType, valuePtr);
    }

    // TODO work out memory management
    override ExprInfo info() { return ExprInfo(false, Ownership.owned); }

    override void hash(Hash hash) { hash.adds("EitherMember"); value.hash(hash); hash.addl(offset); }
}

class Either : Type
{
    (bool fail, Type type)[] types;

    this(this.types) {
        this.zeroInitializable = false;
    }

    override BackendType emit(Platform platform) {
        mut int size = 0;
        mut int alignment = 1;
        for (i, pair in this.types) {
            auto llvmType = pair.type.emit(platform);
            int memberSize = llvmType.size(platform);
            int memberAlignment = llvmType.alignment(platform);

            if (memberSize > size) size = memberSize;
            if (memberAlignment > alignment) alignment = memberAlignment;
        }
        auto parts = new BackendType[](2);
        parts[0] = new BackendIntType;
        parts[1] = new BackendSpacerType(size, alignment);
        return new BackendStructType(parts);
    }

    override nullable Expression implicitConvertFrom(Context context, Expression source)
    {
        for (int i, entry in this.types) {
            if (entry.type.same(source.type)) return new EitherExpr(this, source, i);
        }
        for (int i, entry in this.types) {
            if (auto converted = context.compiler.implicitConvertTo(context, source, entry.type))
                return new EitherExpr(this, converted, i);
        }
        return null;
    }

    override nullable Expression implicitConvertTo(Context context, Expression source, Type targetType)
    {
        // Check that every member can be converted.
        for (int i, _ in this.types) {
            auto member = new EitherMember(source, i);
            auto converted <- context.compiler.implicitConvertTo(context, member, targetType);
        }
        nullable Expression do1(Expression source) {
            nullable Statement do2(Reference target) {
                mut nullable Statement ifTree = null;
                auto sourceType = new EitherType(source);
                for (int i, type in this.types) {
                    auto member = new EitherMember(source, i);
                    auto converted <- context.compiler.implicitConvertTo(context, member, targetType);
                    Expression test = context.compiler.binaryOp(
                        "==", context, sourceType, context.compiler.intLiteral(i + 1), __HERE__);
                    Statement assign = context.compiler.assignStatement(target, converted);
                    ifTree = context.compiler.ifStatement(test, assign, ifTree);
                }
                return ifTree;
            }
            // TODO settle ownership
            return context.compiler.exprWithScratchspace(targetType, false, &do2);
        }
        return context.compiler.exprWithTemporaryExpr(source, &do1);
    }

    override bool same(Type type) {
        auto other = type.instanceOf(Either);
        if (!other || types.length != other.types.length)
            return false;
        for (i, type in types)
            if (!type.type.same(other.types[i].type))
                return false;
        return true;
    }

    override string mangle() {
        mut string ret = "either";
        for (i, type in types)
            ret ~= "_" ~ type.type.mangle();
        return ret;
    }

    override string repr() {
        mut string ret = "(";
        for (i, entry in types) {
            if (i) ret ~= " | ";
            ret ~= entry.type.repr();
        }
        ret ~= ")";
        return ret;
    }

    override void hash(Hash hash) {
        hash.adds("Either");
        hash.addl(types.length);
        for (entry in types)
            entry.type.hash(hash);
    }

    /**
     * Called to create a copy of an expression in a target.
     */
    override nullable Statement copyInto(Context context, Reference target, Expression source)
    {
        nullable Statement do_(Expression source) {
            auto sourceType = new EitherType(source);
            auto targetType = new EitherTypeReference(target);
            auto typeAssignment = context.compiler.assignStatement(targetType, sourceType);

            mut nullable Statement ifTree;
            for (int i, entry in types) {
                auto targetMember = new EitherReference(target, i);
                auto sourceMember = new EitherMember(source, i);

                Statement copy() {
                    if (auto copyInto = entry.type.copyInto(context, targetMember, sourceMember))
                        return copyInto;
                    return context.compiler.assignStatement(targetMember, sourceMember);
                }
                Expression test = context.compiler.binaryOp(
                    "==", context, sourceType, context.compiler.intLiteral(i + 1), __HERE__);
                ifTree = context.compiler.ifStatement(test, copy, ifTree);
            }
            if (auto ifTree = ifTree)
                return context.compiler.sequenceStatement([typeAssignment, ifTree]);
            return null; // no copyInto for any member
        }
        // TODO tmpize `target`
        return context.compiler.stmtWithTemporaryExpr(source, &do_);
    }

    /**
     * Called when a scoped expression goes out of scope.
     */
    override nullable Statement endLifetime(Context context, Reference reference)
    {
        nullable Statement do_(Expression refPtr) {
            auto reference = context.compiler.dereference(refPtr);
            auto valueType = new EitherType(reference);

            mut nullable Statement ifTree;
            for (int i, entry in types) {
                auto member = new EitherReference(reference, i);

                if (auto destroy = entry.type.endLifetime(context, member))
                {
                    Expression test = context.compiler.binaryOp(
                        "==", context, valueType, context.compiler.intLiteral(i + 1), __HERE__);
                    ifTree = context.compiler.ifStatement(test, destroy, ifTree);
                }
            }

            return ifTree;
        }
        return context.compiler.stmtWithTemporaryExpr(
            context.compiler.reference(reference),
            &do_);
    }

    override nullable Expression binaryOp(Context context, string op, Expression lhs, Expression rhs, Loc loc)
    {
        if (op == "==") {
            mut auto rhs = rhs;
            if (auto converted = context.compiler.implicitConvertTo(context, rhs, lhs.type)) {
                rhs = converted;
            } else {
                return null;
            }

            auto eitherType = notNull!Either(rhs.type.instanceOf(Either));

            nullable Expression do1(Expression lhs) {
                nullable Expression do2(Expression rhs) {
                    auto lhsType = new EitherType(lhs);
                    auto rhsType = new EitherType(rhs);
                    auto typeEq = context.compiler.astBinaryOp(
                        "==", new ASTSymbolHelper(lhsType), new ASTSymbolHelper(rhsType), __HERE__);
                    mut ASTEitherCaseExprCase[] eqCases;
                    for (i, entry in eitherType.types) {
                        auto rhsMember = new EitherMember(rhs, cast(int) i);
                        auto memberEq = context.compiler.astBinaryOp(
                            "==",
                            context.compiler.astIdentifier("a", __HERE__),
                            new ASTSymbolHelper(rhsMember), __HERE__);

                        eqCases ~= ASTEitherCaseExprCase(
                            __HERE__, new ASTSymbolHelper(entry.type), "a", return_=false, memberEq);
                    }
                    auto eqTest = new ASTEitherCaseExpr(__HERE__, new ASTSymbolHelper(lhs), eqCases);
                    auto combinedExpr = context.compiler.astBinaryOp("&&", typeEq, eqTest, __HERE__);

                    return combinedExpr.compile(context).beExpression;
                }
                return context.compiler.exprWithTemporaryExpr(rhs, &do2);
            }
            return context.compiler.exprWithTemporaryExpr(lhs, &do1);
        }
        return null;
    }
}

/**
 * a.case(T t: 5, U u: 6)
 */
struct ASTEitherCaseExprCase
{
    Loc loc;

    ASTSymbol type;

    string identifier;

    // FIXME remove this - easily done with T t: ({ return t; })
    bool return_;

    ASTSymbol expr;
}

class ASTEitherCaseExpr : ASTSymbol
{
    Loc loc;

    ASTSymbol base;

    ASTEitherCaseExprCase[] cases;

    this(this.loc, this.base, this.cases) { }

    override Symbol compile(Context context) {
        auto baseExpr = base.compile(context).beExpressionImplCall(context, loc);
        // FIXME
        // loc.assert2s(baseExpr.info.ownership != Ownership.gifted, "TODO: Either base expr must not be gifted");
        auto either = baseExpr.type.instanceOf(Either);

        loc.assert2s(!!either, "Expected Either for case expression");

        bool[] handled = new bool[](either.types.length);

        // TODO implicitConvertTo should only require Type - ie. return a Expression function(Expression).
        mut Type[] resultTypes;
        void mergeType(Loc loc, Expression expr) {
            auto exprType = expr.type;
            for (resultType in resultTypes)
                if (resultType.same(exprType)) return;
            resultTypes ~= exprType;
        }
        for (case_ in this.cases) {
            if (case_.return_) continue;

            auto caseType = beType(loc, case_.type.compile(context));
            auto caseLoc = case_.loc;

            auto namespace = context.compiler.variableDeclaration(
                context.namespace, case_.identifier, caseType, ExprInfo(mutable=false, Ownership.borrowed), false);
            auto subContext = context.withNamespace(namespace);

            Expression expr = case_.expr.compile(subContext).beExpressionImplCall(context, caseLoc);
            mergeType(caseLoc, expr);
        }

        assert(resultTypes.length > 0);
        mut uninitialized Type mergeType;
        if (resultTypes.length == 1) mergeType = resultTypes[0];
        else {
            mut (bool fail, Type)[] members;
            for (type in resultTypes) members ~= (false, type);
            mergeType = new Either(members);
        }
        auto resultNamespace = context.compiler.variableDeclaration(
            context.namespace, "", mergeType, ExprInfo(mutable=false, Ownership.owned), true);
        auto resultContext = context.withNamespace(resultNamespace);
        // FIXME rename to accessDecl
        Reference resultVar = resultNamespace.accessDecl2(context.compiler);
        mut nullable Statement ifTree;

        for (case_ in this.cases) {
            auto caseLoc = case_.loc;
            Type type = beType(caseLoc, case_.type.compile(resultContext));

            mut int matched = -1;
            for (int k, eitherType in either.types) {
                if (type.same(eitherType.type)) {
                    caseLoc.assert2s(matched == -1, "either type " ~ type.repr() ~ " matched twice");
                    matched = k;
                }
            }
            caseLoc.assert2s(matched != -1, "Type is not listed in Either!");
            handled[matched] = true;

            auto namespace = context.compiler.variableDeclaration(
                resultContext.namespace, case_.identifier, type, ExprInfo(mutable=false, Ownership.borrowed), false);
            // FIXME rename to accessDecl
            Reference variable = namespace.accessDecl2(context.compiler);
            Statement assignment = context.compiler.assignStatement(variable, new EitherMember(baseExpr, matched));
            Expression userExpr = case_.expr.compile(resultContext.withNamespace(namespace))
                .beExpressionImplCall(context, caseLoc);
            Statement userStmt() {
                if (case_.return_) {
                    // TODO cast?
                    return context.compiler.returnStatement(userExpr);
                } else {
                    Expression typeCorrectedUserExpr = context.compiler.expectImplicitConvertTo(context, userExpr, mergeType, caseLoc);
                    return context.compiler.assignStatement(resultVar, typeCorrectedUserExpr);
                }
            }
            Statement then = context.compiler.sequenceStatement([assignment, userStmt]);
            Expression test = context.compiler.binaryOp(
                "==", context, new EitherType(baseExpr), context.compiler.intLiteral(matched + 1), loc);

            ifTree = context.compiler.ifStatement(test, then, ifTree);
        }
        for (i, handled in handled) {
            loc.assert2s(handled, "Type " ~ either.types[i].type.repr() ~ " not handled!");
        }
        assert(!!ifTree);

        return context.compiler.statementExpression(notNull!Statement(ifTree), resultVar);
    }

    override ASTSymbol quote(Quoter quoter) {
        mut ASTSymbol[] quotedCases;
        ASTSymbol quoteBool(bool b) {
            if (b) return quoter.compiler.astIdentifier("true", __HERE__);
            return quoter.compiler.astIdentifier("false", __HERE__);
        }
        for (case_ in this.cases) {
            quotedCases ~= quoter.compiler.astCall(
                quoter.compiler.astIdentifier("ASTEitherCaseExprCase", __HERE__), [
                    quoter.quoteLoc(case_.loc),
                    case_.type.quote(quoter),
                    quoter.compiler.astStringLiteral(case_.identifier, __HERE__),
                    quoteBool(case_.return_),
                    case_.expr.quote(quoter)], __HERE__);
        }
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTEitherCaseExpr", __HERE__), [
                quoter.quoteLoc(this.loc),
                this.base.quote(quoter),
                quoter.compiler.astArrayLiteral(quotedCases, __HERE__)], __HERE__);
    }
}

nullable ASTSymbol parseEitherCaseExpr(Parser parser, LexicalContext lexicalContext, ASTSymbol current)
{
    parser.begin();
    if (!(parser.accept(".") && acceptIdentifier(parser, "case") && parser.accept("(")))
    {
        parser.revert();
        return null;
    }
    parser.commit();

    mut ASTEitherCaseExprCase[] cases;
    while (!parser.accept(")"))
    {
        if (cases.length) parser.expect(",");
        nullable ASTSymbol type = lexicalContext.compiler.parseType(parser, lexicalContext);
        parser.assert_(!!type, "case type expected");
        string identifier = parseIdentifier(parser);
        parser.expect(":");
        bool return_ = parser.acceptIdentifier("return");
        auto loc = parser.loc;
        ASTSymbol expr = notNull!ASTSymbol(lexicalContext.compiler.parseExpression(parser, lexicalContext));
        cases ~= ASTEitherCaseExprCase(loc, notNull!ASTSymbol(type), identifier, return_, expr);
    }
    return new ASTEitherCaseExpr(parser.loc, current, cases);
}

/**
 * a.case {
 *   T t: foo;
 *   U u: { bar; }
 * }
 */

struct ASTEitherCaseStmtCase
{
    Loc loc;

    ASTSymbol type;

    string identifier;

    ASTStatement stmt;
}

class ASTEitherCaseStmt : ASTStatement
{
    Loc loc;

    ASTSymbol base;

    ASTEitherCaseStmtCase[] cases;

    this(this.loc, this.base, this.cases) { }

    override StatementCompileResult compile(Context context) {
        auto baseExpr = base.compile(context).beExpressionImplCall(context, loc);
        // FIXME
        // loc.assert2s(baseExpr.info.ownership != Ownership.gifted, "TODO: Either base expr must not be gifted");
        auto baseType = baseExpr.type;
        auto either = baseType.instanceOf(Either);

        loc.assert2s(!!either, "Expected Either for case expression");

        nullable Statement do_(Expression baseExpr) {
            bool[] handled = new bool[](either.types.length);
            mut nullable Statement ifTree = null;
            for (case_ in this.cases) {
                Type type = beType(case_.loc, case_.type.compile(context));

                mut int matched = -1;
                for (int k, entry in either.types) {
                    if (type.same(entry.type)) {
                        case_.loc.assert2s(matched == -1, "either type " ~ type.repr() ~ " matched twice");
                        matched = k;
                    }
                }
                case_.loc.assert2s(matched != -1, "Type is not listed in Either!");
                handled[matched] = true;

                with (context.compiler) {
                    auto namespace = variableDeclaration(
                        context.namespace, case_.identifier, type, ExprInfo(mutable=false, Ownership.borrowed), false);
                    // FIXME rename to accessDecl
                    Reference variable = namespace.accessDecl2(context.compiler);
                    Statement assignment = assignStatement(variable, new EitherMember(baseExpr, matched));
                    auto userStmtPair = case_.stmt.compile(context.withNamespace(namespace));
                    Statement then = sequenceStatement([assignment, userStmtPair.statement]);
                    Expression test = binaryOp(
                        "==", context, new EitherType(baseExpr), intLiteral(matched + 1), this.loc);

                    ifTree = ifStatement(test, then, ifTree);
                }
            }
            for (i, handled in handled) {
                loc.assert2s(handled, "Type " ~ either.types[i].type.repr() ~ " not handled!");
            }
            return ifTree;
        }
        return StatementCompileResult(
            notNull!Statement(context.compiler.stmtWithTemporaryExpr(baseExpr, &do_)),
            context);
    }

    override ASTSymbol quote(Quoter quoter) {
        mut ASTSymbol[] quotedCases;
        for (case_ in this.cases) {
            quotedCases ~= quoter.compiler.astCall(
                quoter.compiler.astIdentifier("ASTEitherCaseStmtCase", __HERE__), [
                    quoter.quoteLoc(case_.loc),
                    case_.type.quote(quoter),
                    quoter.compiler.astStringLiteral(case_.identifier, __HERE__),
                    case_.stmt.quote(quoter)], __HERE__);
        }
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTEitherCaseStmt", __HERE__), [
                quoter.quoteLoc(this.loc),
                this.base.quote(quoter),
                quoter.compiler.astArrayLiteral(quotedCases, __HERE__)], __HERE__);
    }
}

nullable ASTStatement parseEitherCaseStmt(Parser parser, LexicalContext lexicalContext)
{
    parser.begin();
    auto expr = lexicalContext.compiler.parseExpressionLeaf(parser, lexicalContext);
    if (!expr) {
        parser.revert();
        return null;
    }
    auto member = expr.instanceOf(ASTMemberBase);
    if (!member || member.member != "case" || !parser.accept("{")) {
        parser.revert();
        return null;
    }
    parser.commit();

    mut ASTEitherCaseStmtCase[] cases;
    while (!parser.accept("}"))
    {
        auto type = lexicalContext.compiler.parseType(parser, lexicalContext);
        parser.assert_(!!type, "case type expected");
        // identifier can be empty
        string identifier = parseIdentifier(parser);
        parser.expect(":");
        auto loc = parser.loc;
        ASTStatement stmt = lexicalContext.compiler.parseStatement(parser, lexicalContext);
        cases ~= ASTEitherCaseStmtCase(loc, notNull!ASTSymbol(type), identifier, stmt);
    }
    return new ASTEitherCaseStmt(parser.loc, member.base, cases);
}
