module neat.runtime;

string itoa(int i) {
    import neat.runtime.stdlib : snprintf;

    int len = snprintf(null, 0, "%i".ptr, i);
    string res = new string(len + 1);

    return res[0 .. snprintf(res.ptr, res.length, "%i".ptr, i)];
}

int atoi(string s) {
    import neat.runtime.stdlib : atoi;

    char* temp = toStringz(s);
    int res = atoi(temp);
    free(temp);
    return res;
}

string ftoa(double d) {
    import neat.runtime.stdlib : snprintf;

    int len = snprintf(null, 0, "%f".ptr, d);
    string res = new string(len + 1);

    return res[0 .. snprintf(res.ptr, res.length, "%f".ptr, d)];
}

string dtoa_hex(double d) {
    import neat.runtime.stdlib : snprintf;

    int len = snprintf(null, 0, "%llx".ptr, *cast(long*) &d);
    string res = new string(len + 1);
    return res[0 .. snprintf(res.ptr, res.length, "%llx".ptr, *cast(long*) &d)];
}

char* toStringz(string s) {
    import neat.runtime.stdlib : malloc, memcpy;

    char* ret = malloc(s.length + 1);
    memcpy(dest=ret, src=s.ptr, s.length);
    ret[s.length] = "\0"[0];
    return ret;
}

double atof(string s) {
    import neat.runtime.stdlib : atof, free;

    char *temp = toStringz(s);
    double res = atof(temp);
    free(temp);
    return res;
}

string ltoa(long l) {
    import neat.runtime.stdlib : snprintf;

    int len = snprintf(null, 0, "%lld".ptr, l);
    string res = new string(len + 1);

    return res[0 .. snprintf(res.ptr, res.length, "%lld".ptr, l)];
}

void assert(int test) {
    import neat.runtime.stdlib : exit, fprintf, stderr;

    if (!test) {
        fprintf(stderr, "Assertion failed! Aborting.\n".ptr);
        exit(1);
    }
}

void print(string str) {
    import neat.runtime.stdlib : fflush, printf, stdout;

    printf("%.*s\n".ptr, cast(int) str.length, str.ptr);
    fflush(stdout);
}
