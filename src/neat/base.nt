module neat.base;

import backend.base;
import helpers;
import neat.hash;
import neat.parser_base;

void assert2s(int test, string msg) { if (!test) { print(msg); exit(1); } }
void assert2s2(int test, string a, string b) { if (!test) { print(a ~ b); exit(1); } }
void assert2s3(int test, string a, string b, string c) { if (!test) { print(a ~ b ~ c); exit(1); } }
void assert2s4(int test, string a, string b, string c, string d) {
    if (!test) { print(a ~ b ~ c ~ d); exit(1); } }
void assert2s5(int test, string a, string b, string c, string d, string e) {
    if (!test) { print(a ~ b ~ c ~ d ~ e); exit(1); } }

// something that can be referenced by a name
abstract class Symbol
{
}

/**
 * A namespace is a lexical environment that supports identifier lookup.
 * Note that this means "foo", not "a.foo".
 */
abstract class Namespace
{
    Namespace parent; // lexical parent

    bool isContextScope;

    this(this.parent, this.isContextScope) { }

    // frame is a pointer to the stack frame or what was in the 'this'/'context' parameter.
    abstract Symbol lookup(string name, Context context, Loc loc, Expression frame) { assert(false); }

    string mangle() { return this.parent.mangle; }
}

class ASTImportStatement
{
    (:normal, string name, string pak | :macro_, ASTModuleBase module_) target;

    bool isMacroImport;

    string[] symbols;

    Loc loc;

    this(this.target, this.isMacroImport, this.symbols, this.loc) { }
}

// bleh cycle
class ASTModuleBase
{
}

class LexicalContext
{
    CompilerBase compiler;

    MacroState macroState;

    // break an annoying dependency cycle
    // TODO subclass LexicalContext in stuff.nt
    ASTModuleBase delegate(ASTImportStatement) resolveImport;

    this(this.compiler, this.macroState, this.resolveImport) { }
}

/**
 * Delineates a region of control flow in which 'break;' and 'continue;' may be used.
 */
abstract class LoopScope : Namespace
{
    abstract Statement breakFrom(Context context) { assert(false); }
    abstract Statement continueFrom(Context context) { assert(false); }
    // purely a marker
    override Symbol lookup(string name, Context context, Loc loc, Expression frame) {
        return this.parent.lookup(name, context, loc, frame);
    }
}

template findParent(T) {
    T findParent(Namespace namespace) {
        auto hit = namespace.instanceOf(T);
        if (hit) return hit;
        if (namespace.parent) return findParent!T(namespace.parent);
        return null;
    }
}

abstract class ASTSymbol
{
    abstract Symbol compile(Context context) { assert(false); }

    ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTSymbol'!"); assert(false); }

    // TODO this.classname
    string repr() { return "TODO repr(ASTSymbol)"; }
}

abstract class ASTMemberBase : ASTSymbol
{
    ASTSymbol base;

    string member;

    Loc loc;

    this(this.base, this.member, this.loc) { }
}

abstract class Statement
{
    abstract void emit(Generator output) { assert(false); }
    abstract void hash(Hash hash) { assert(false); }
}

abstract class Type : Symbol
{
    // TODO this should be a field
    abstract BackendType emit(Platform platform) { assert(false); }
    abstract bool same(Type type) { assert(false); }
    abstract string repr() { assert(false); }
    string mangle() { assert(false); }
    abstract void hash(Hash hash) { assert(false); }

    Expression implicitConvertFrom(Expression source)
    {
        return null;
    }

    // TODO take Loc
    Expression implicitConvertTo(Context context, Expression source, Type target)
    {
        return null;
    }

    Expression truthy(Context context, Expression expr, Loc loc)
    {
        return null;
    }

    /**
     * Called to create a copy of an expression in a target.
     * Note that `target` is considered uninitialized and must not be destroyed!
     */
    Statement copyInto(Context context, Reference target, Expression source)
    {
        return null;
    }

    /**
     * Called when a scoped expression goes out of scope.
     */
    Statement endLifetime(Context context, Reference reference)
    {
        return null;
    }

    /**
     * Called to resolve 'value.field'.
     * If 'base' is null, this indicates a static field access, 'Type.field'.
     */
    Symbol accessMember(Loc loc, Context context, Expression base, string field)
    {
        return null;
    }

    /**
     * Called to resolve 'lhs op rhs' where op is a binary operator.
     */
    Expression binaryOp(Context context, string op, Expression lhs, Expression rhs, Loc loc)
    {
        return null;
    }

    /**
     * Called to resolve 'Type(a, b, c)'.
     */
    Expression call(Context context, Loc loc, ASTArgument[] args)
    {
        return null;
    }
}

class Void : Type
{
    this() { }

    override BackendType emit(Platform platform) { return platform.void_; }

    override bool same(Type other) { return !!other.instanceOf(Void); }

    override string repr() { return "void"; }

    override string mangle() { return "void"; }

    override void hash(Hash hash) { hash.adds("void"); }
}

class Pointer : Type
{
    Type target;

    this(this.target) { }

    override BackendType emit(Platform platform)
    {
        return new BackendPointerType(this.target.emit(platform));
    }

    override bool same(Type other)
    {
        Pointer otherPtr = other.instanceOf(Pointer);

        return otherPtr && this.target.same(otherPtr.target);
    }

    override string repr() { return this.target.repr ~ "*"; }

    override string mangle() { return "ptr_" ~ this.target.mangle; }

    override void hash(Hash hash) { hash.adds("pointer"); target.hash(hash); }
}

class Generator
{
    BackendModule mod;

    BackendFunction fun;

    Platform platform;

    int frameReg;

    this(this.platform, this.mod)
    {
        this.fun = null;
    }

    bool once(string name)
    {
        return this.mod.once(name);
    }
}

/**
 * Gifted: an expression with an unmanaged lifetime that we can take over
 * Owned: an owning reference to a tracked lifetime.
 * Borrowed: a reference to a tracked lifetime not at the address referenced.
 * Global: a value that is not reference tracked, such as a literal.
 *
 * Examples:
 * - Gifted: `new Class()`
 * - Owned: `Class obj;`
 * - Borrowed: `void foo(Class obj) { }`
 * - Global: `"string"`
 *
 * Because of "caller owns", Borrowed needs to be its own thing. What if we reassigned
 * obj? We couldn't clean it up, and the caller would double clean the argument.
 * So function arguments can be referenced, but not overwritten.
 *
 * NOTE: Called methods can overwrite fields. This is awkward.
 * TODO: Prevent it.
 */
enum Ownership
{
    gifted,
    owned,
    borrowed,
    global,
}

struct ExprInfo
{
    bool mutable;
    Ownership ownership;
}

abstract class Expression : Symbol
{
    Type type;
    abstract int emit(Generator output) { assert(false); }
    abstract ExprInfo info() { assert(false); }
    abstract void hash(Hash hash) { assert(false); }
}

Expression beExpression(Symbol symbol)
{
    if (auto symbolIdent = symbol.instanceOf(SymbolIdentifier))
        return new SymbolIdentifierExpression(symbolIdent.name);
    Expression expr = symbol.instanceOf(Expression);
    assert(!!expr);
    return expr;
}

Expression beExpression2(Symbol symbol, Loc loc)
{
    if (auto symbolIdent = symbol.instanceOf(SymbolIdentifier))
        return new SymbolIdentifierExpression(symbolIdent.name);
    Expression expr = symbol.instanceOf(Expression);

    loc.assert2s(!!expr, "expression expected");
    return expr;
}

Type beType(Loc loc, Symbol symbol)
{
    if (auto type = symbol.instanceOf(Type))
        return type;
    if (auto symbolIdent = symbol.instanceOf(SymbolIdentifier))
        return new SymbolIdentifierType(symbolIdent.name);
    loc.assert2s(false, "type expected");
}

abstract class Reference : Expression
{
    int emitLocation(Generator output) { assert(false); }
}

class PointerCast : Expression
{
    Type target;

    Expression value;

    this(this.target, this.value) {
        this.type = this.target;
        assert(!!target);
        assert(!!value);
    }

    override int emit(Generator output)
    {
        int reg = this.value.emit(output);
        return output.fun.bitcast(reg, this.target.emit(output.platform));
    }

    override ExprInfo info() { return value.info; }

    override void hash(Hash hash) { hash.adds("ptrcast"); target.hash(hash); value.hash(hash); }
}

/**
 * `SymbolIdentifier` is the core of the :name symbol type impl.
 * Because :foo a = :foo; and we can't double inherit,
 * `SymbolIdentifier` has special handling in `beType` and `beExpression`.
 */
class SymbolIdentifier : Symbol
{
    string name;
    this(this.name) { }
}

class SymbolIdentifierType : Type
{
    string name;
    this(this.name) { }
    override BackendType emit(Platform platform) { return new BackendVoidType; }
    override bool same(Type type) {
        if (auto other = type.instanceOf(SymbolIdentifierType))
            return other.name == this.name;
        return false;
    }
    override string repr() { return ":" ~ this.name; }
    override string mangle() { return "symbol_" ~ name; }
    override void hash(Hash hash) { hash.adds("SymbolType"); hash.adds(name); }
}

class SymbolIdentifierExpression : Expression
{
    string name;
    this(this.name) { this.type = new SymbolIdentifierType(name); }
    override int emit(Generator output) { return output.fun.voidLiteral; }
    override ExprInfo info() { return ExprInfo(false, Ownership.global); }
    override void hash(Hash hash) { hash.adds("SymbolExpr"); hash.adds(name); }
}

/*
 * Stackoverflow insists that "parameters" are the stuff in the function parameter list,
 * and "arguments" are the values you pass to a function.
 *
 * Fine by me.
 *
 * We could separate "declaration parameters" and "definition parameters."
 * For instance, extern(C) declarations are only interesting for generating a call,
 * and will never generate a function body. However, usually when meaningful information
 * is used to customize the define-site, this is also interesting for the call-site,
 * especially with regards to lifetime. As such, it's probably good there is only one type.
 */
struct Parameter
{
    bool isThisAssignment;

    string name;

    bool mutable;

    Type type;

    static Parameter fromType(Type type) {
        return Parameter(false, "", false, type);
    }
}

struct ASTParameter
{
    string name;

    bool mutable;

    ASTSymbol type;

    // ASTSymbol defaultValue;

    Loc loc;
}

// this(this.name)
struct ASTThisAssignment
{
    string name;
}

/**
 * A value being passed to a callable parameter.
 */
struct Argument
{
    Expression value;

    string name;
}

struct ASTArgument
{
    ASTSymbol sym;

    string name;
}

class FunctionDeclaration : Symbol
{
    string name;

    Type ret;

    Parameter[] params;

    Type contextType; // must be a pointer

    this(this.name, this.ret, this.params)
    {
        this.contextType = null;
    }

    size_t numArgs()
    {
        if (!!contextType) return this.params.length + 1;
        return this.params.length;
    }

    string mangle() { return this.name; } // TODO extern

    void declare(Generator generator)
    {
        if (generator.mod.declared(this.mangle))
            return;

        Type voidp = new Pointer(new Void);
        mut int extra = 0;
        if (this.contextType) extra = 1;
        auto paramTypes = new BackendType[](this.numArgs);
        if (this.contextType) paramTypes[0] = voidp.emit(generator.platform);
        for (int i <- 0 .. this.params.length)
            paramTypes[extra + i] = this.params[i].type.emit(generator.platform);

        generator.mod.declare(
            this.mangle,
            this.ret.emit(generator.platform),
            paramTypes
        );
    }
}

void validateCall(Parameter[] params, ASTArgument[] args, Loc loc)
{
    loc.assert2s(params.length == args.length, "unexpected number of arguments");
    for (int i <- 0 .. params.length) {
        auto param = params[i];
        if (args[i].name.length > 0) {
            // TODO args.loc
            loc.assert2s(
                args[i].name == param.name,
                "expected parameter named '" ~ param.name ~ "', but got '" ~ args[i].name ~ "'");
        }
    }
}

/**
 * This is in base because it's circular with Context.
 */
class MacroState
{
    Macro[] macros;

    MacroState[] imports;

    this() { }

    MacroState dup() {
        auto newState = new MacroState;
        newState.macros = new Macro[](this.macros.length);
        for (int i <- 0 .. this.macros.length)
            newState.macros[i] = this.macros[i];
        newState.imports = new MacroState[](this.imports.length);
        for (int i <- 0 .. this.imports.length)
            newState.imports[i] = this.imports[i];
        return newState;
    }

    void applyMacro(MacroArgs args) {
        this.applyMacroExported(args);
        if (args.done) return;
        for (auto import_ <- this.imports) {
            import_.applyMacroExported(args);
            if (args.done) return;
        }
    }

    void applyMacroExported(MacroArgs args) {
        for (auto macro_ <- this.macros) {
            macro_.apply(args);
            if (args.done) return;
        }
    }

    void addImport(MacroState target) {
        this.imports ~= target;
    }

    void addMacro(Macro macro_) {
        this.macros ~= macro_;
    }
}

// Something that should be cleaned up on unwind.
abstract class DeclarationHolder : Namespace
{
    abstract Reference accessDecl(CompilerBase compiler) { assert(false); }

    Reference accessDecl2(CompilerBase compiler) { return accessDecl(compiler); }
}

// cycle breaker helper: needed for CompilerBase
abstract class ModuleBase : Namespace
{
    abstract void addImport(ModuleBase module_, string[] symbols) { assert(false); }
}

/**
 * Helper class used to break dependency loops between neat.base, macros and the rest of the compiler.
 */
abstract class CompilerBase
{
    // for neat.macros.cimport
    string[] cFlags;

    // parser
    abstract ASTSymbol parseExpression(Parser parser, LexicalContext lexicalContext) { assert(false); }

    abstract ASTSymbol parseExpressionLeaf(Parser parser, LexicalContext lexicalContext) { assert(false); }

    abstract ASTSymbol parseType(Parser parser, LexicalContext lexicalContext) { assert(false); }

    abstract ASTStatement parseStatement(Parser parser, LexicalContext lexicalContext) { assert(false); }

    abstract ASTStatement astExpressionStmt(ASTSymbol expr, Loc loc) { assert(false); }

    abstract ASTStatement astScope(ASTStatement[] stmts, Loc loc) { assert(false); }

    // sequence of statements that don't open a new scope
    abstract ASTStatement astSequence(ASTStatement[] stmts, Loc loc) { assert(false); }

    abstract ASTStatement astIf(ASTSymbol test, ASTStatement then, ASTStatement else_, Loc loc) { assert(false); }

    abstract ASTStatement astForLoop(
        ASTStatement init, ASTSymbol test, ASTStatement step, ASTStatement body_, Loc loc) {
        assert(false);
    }

    abstract ASTStatement astAssign(ASTSymbol target, ASTSymbol source, Loc loc) { assert(false); }

    abstract ASTStatement astDeclareVar(string name, bool mutable, ASTSymbol initial, Loc loc) { assert(false); }

    // initial is optional
    abstract ASTStatement astDeclareTypedVar(string name, bool mutable, ASTSymbol type, ASTSymbol initial, Loc loc) {
        assert(false);
    }

    abstract ASTStatement astReturn(ASTSymbol value, Loc loc) { assert(false); }

    abstract ASTSymbol astBinaryOp(string op, ASTSymbol left, ASTSymbol right, Loc loc) {
        assert(false);
    }

    abstract ASTSymbol astCast(ASTSymbol target, ASTSymbol value, Loc loc) { assert(false); }

    abstract ASTSymbol astIndex(ASTSymbol base, ASTSymbol index, Loc loc) { assert(false); }

    abstract ASTSymbol astMember(ASTSymbol base, string name, Loc loc) { assert(false); }

    abstract ASTSymbol astReference(ASTSymbol value, Loc loc) { assert(false); }

    abstract ASTSymbol astDereference(ASTSymbol value, Loc loc) { assert(false); }

    abstract ASTSymbol astIntLiteral(int value, Loc loc) { assert(false); }

    abstract ASTSymbol astLongLiteral(long value, Loc loc) { assert(false); }

    abstract ASTSymbol astStringLiteral(string text, Loc loc) { assert(false); }

    ASTSymbol astBoolLiteral(bool value, Loc loc) {
        if (value) return astIdentifier("true", loc);
        else return astIdentifier("false", loc);
    }

    abstract ASTSymbol astArrayLiteral(ASTSymbol[] values, Loc loc) { assert(false); }

    abstract ASTSymbol astTupleLiteral(ASTSymbol[] entries, Loc loc) { assert(false); }

    abstract ASTSymbol astArraySlice(ASTSymbol array, ASTSymbol lower, ASTSymbol upper, Loc loc) { assert(false); }

    abstract ASTSymbol astVoidLiteral(Loc loc) { assert(false); }

    abstract ASTSymbol astIdentifier(string name, Loc loc) { assert(false); }

    abstract ASTSymbol astNegation(ASTSymbol value, Loc loc) { assert(false); }

    abstract ASTSymbol astCall(ASTSymbol target, ASTSymbol[] args, Loc loc) { assert(false); }

    abstract ASTSymbol astNewExpression(ASTSymbol type, (ASTSymbol[] | ASTArgument[]) args, Loc loc) { assert(false); }

    abstract ASTSymbol astDestroy(ASTSymbol target, Loc loc) { assert(false); }

    abstract ASTSymbol astStatementExpression(ASTStatement[] statements, ASTSymbol expr, Loc loc) {
        assert(false);
    }

    abstract ASTSymbol astArray(ASTSymbol elementType, Loc loc) { assert(false); }

    abstract ASTSymbol astBasicType(string name, Loc loc) { assert(false); }

    abstract ASTSymbol astTypeOf(ASTSymbol symbol, Loc loc) { assert(false); }

    abstract ASTSymbol astPointer(ASTSymbol target, Loc loc) { assert(false); }

    // expressions and statements
    abstract Expression implicitConvertTo(Context context, Expression from, Type to) { assert(false); }

    abstract Expression binaryOp(string op, Context context, Expression left, Expression right, Loc loc) {
        assert(false);
    }

    abstract Expression intLiteral(int value) { assert(false); }

    abstract Expression truthy(Context context, Expression value, Loc loc) { assert(false); }

    abstract Expression castTo(Type target, Expression source) { assert(false); }

    abstract Expression stringLiteral(string value) { assert(false); }

    abstract Reference stackFrame(Type type) { assert(false); }

    abstract Expression plainCall(Context context, Symbol sym, Expression[] args, Loc loc,
        bool isImplCall) {
        assert(false);
    }

    abstract Expression call(Context context, ASTSymbol target, ASTArgument[] args, Loc loc,
        bool isImplCall) {
        assert(false);
    }

    abstract Expression mkCall(Symbol target, Expression[] args, Loc loc) {
        assert(false);
    }

    abstract Expression pointerOffset(Expression pointer, Expression offset) { assert(false); }

    // evaluate first `statement`, then `expression`.
    abstract Expression statementExpression(Statement statement, Expression expression) { assert(false); }

    abstract Reference dereference(Expression value) { assert(false); }

    abstract Expression reference(Reference ref_) { assert(false); }

    abstract Expression wrap(Statement before, Expression value, Statement after) { assert(false); }

    // wrap(), allowing References
    abstract Expression wrapRef(Statement before, Expression value, Statement after) { assert(false); }

    // Call dg with expr or copy of expr.
    // If expr was a gift, it is freed after.
    abstract Expression consume(Context context, Expression expr, Expression delegate(Expression) dg) {
        assert(false);
    }

    /// Call dg with owned temp ref of expr.
    /// If expr was a gift, it is freed after.
    ///
    /// Set `mayUnwind` to true if `dg()` may unwind.
    /// in that case, borrowed `expr` must be copied.
    abstract Expression consumeTemporary(
            Context context, bool allowRefReturn, bool mayUnwind, Expression expr, Expression delegate(Reference) dg) {
        assert(false);
    }

    abstract Statement consumeTemporaryStmt(Context context, Expression expr, Statement delegate(Reference) dg) {
        assert(false);
    }

    abstract Symbol accessMember(Context context, Symbol base, string member, Loc loc, bool allowUndefined) {
        assert(false);
    }

    abstract Reference structMemberReference(Reference base, int index) { assert(false); }

    abstract Symbol accessMemberWithLifetime(Context context, Symbol base, string member, Loc loc, bool allowUndefined)
    {
        assert(false);
    }

    // look up name following the namespace in context
    abstract Symbol lookup(Context context, Loc loc, string name) { assert(false); }

    abstract Statement assignStatement(Reference target, Expression value) { assert(false); }

    abstract Statement sequence(Statement first, Statement second) { assert(false); }

    abstract Statement sequenceStatement(Statement[] stmts) { assert(false); }

    abstract Statement ifStatement(Expression test, Statement then, Statement else_) { assert(false); }

    abstract Statement loopStatement(
            Context context, Statement initializer, Expression test, Statement body_, Statement step) {
        assert(false);
    }

    abstract Statement returnStatement(Expression value) { assert(false); }

    abstract Statement exprStatement(Expression test) { assert(false); }

    abstract Statement move(Context context, Reference target, Expression source) { assert(false); }

    /// Create a temporary of `type`. Temporary is passed to `callback`, which returns an initializer.
    /// Returns Expression evaluating to "Initializer, then temporary".
    abstract Expression exprWithScratchspace(Type type, bool temporary, Statement delegate(Reference) callback) { assert(false); }

    abstract Statement unwindScope(Context context, Namespace target, Statement next) { assert(false); }

    abstract Statement stmtWithTemporary(Expression value, Statement delegate(Reference) callback) { assert(false); }

    abstract Expression exprWithTemporary(Expression value, Expression delegate(Reference) callback) { assert(false); }

    // don't create referenceable memory
    abstract Statement stmtWithTemporaryExpr(Expression value, Statement delegate(Expression) callback) { assert(false); }

    abstract Expression exprWithTemporaryExpr(Expression value, Expression delegate(Expression) callback) { assert(false); }

    abstract Expression referenceFunction(FunctionDeclaration decl) { assert(false); }

    /**
    * Create a runtime function that, given some parameters, declares and calls the ASTStatement
    * provided.
    * The function will be automatically linked in.
    */
    abstract FunctionDeclaration createRuntimeFunction(
        Context context, string name, Type ret, Parameter[] params, ASTStatement delegate() makeBody)
    {
        assert(false);
    }

    Namespace exprAlias(Namespace parent, string name, Symbol value) {
        return symbolAlias(parent, name, value);
    }

    abstract Namespace symbolAlias(Namespace parent, string name, Symbol value) { assert(false); }

    abstract DeclarationHolder variableDeclaration(Namespace parent, string name, Type type, ExprInfo info, bool hidden) {
        assert(false);
    }

    abstract Type nativeWordType(Platform platform) { assert(false); }

    abstract Type struct_(string name, StructMemberDeclaration[] members, Loc loc, string manglePrefix) {
        assert(false);
    }

    Expression expectImplicitConvertTo(Context context, Expression from, Type to, Loc loc)
    {
        auto result = implicitConvertTo(context, from, to);
        if (result) return result;
        loc.assert2s4(false, "todo: cast(", to.repr, ") ", from.type.repr);
    }

    abstract void addDefaultImports(Context context, ModuleBase module_) { assert(false); }

    // module cache
    abstract ModuleBase findModule(string key) { assert(false); }

    abstract void addModule(string key, ModuleBase module_) { assert(false); }
}

class IdCounter
{
    int count;

    this() { }

    int next() {
        int ret = this.count;
        this.count += 1;
        return ret;
    }
}

// TODO document where exactly this is used
struct Context
{
    // all members should be treated as immutable

    CompilerBase compiler;

    Platform platform;

    Namespace namespace;

    MacroState macroState;

    // here for caching reasons
    // TODO replace with once
    Type nativeWordType;

    IdCounter idCounter;

    Context withNamespace(Namespace namespace)
    {
        return Context(this.compiler, this.platform, namespace, this.macroState, this.nativeWordType, this.idCounter);
    }

    string getLabel() { return "uniq" ~ itoa(idCounter.next); }
}

Expression isExpressionImplCall(Symbol symbol, Context context, Loc loc)
{
    if (auto symbolIdent = symbol.instanceOf(SymbolIdentifier))
        return new SymbolIdentifierExpression(symbolIdent.name);

    // implicit function calls
    // TODO check if we should propagate this upcall
    auto astSymbol = new ASTSymbolHelper(symbol);
    mut Expression expr = context.compiler.call(context, astSymbol, [], loc, true);
    // mut Expression expr = context.compiler.plainCall(context, symbol, [], loc, true);
    if (!expr) expr = symbol.instanceOf(Expression);
    return expr;
}

Expression beExpression3(Context context, Symbol symbol, Loc loc)
{
    return symbol.beExpressionImplCall(context, loc);
}

Expression beExpressionImplCall(Symbol symbol, Context context, Loc loc)
{
    auto expr = symbol.isExpressionImplCall(context, loc);
    loc.assert2s(!!expr, "expression expected");
    return expr;
}

Context makeContext(CompilerBase compiler, Platform platform, Namespace namespace, MacroState macroState)
{
    return Context(
        compiler, platform, namespace, macroState, compiler.nativeWordType(platform), new IdCounter);
}

// TODO Statement, Context multi-return
struct StatementCompileResult
{
    Statement statement;

    Context context;
}

abstract class ASTStatement
{
    StatementCompileResult compile(Context context) { assert(false); }

    ASTSymbol quote(Quoter quoter) { assert(false); }
}

class ASTIdentifier : ASTSymbol
{
    string name;

    bool moduleLevel; // .name

    Loc loc;

    this(this.name, this.moduleLevel, this.loc) { }

    override Symbol compile(Context context)
    {
        mut Symbol symbol;
        if (this.moduleLevel) {
            auto module_ = findParent!ModuleBase(context.namespace);
            symbol = module_.lookup(this.name, context, loc, null);
        } else if (context.namespace.isContextScope) {
            auto stackframe = context.compiler.reference(context.compiler.stackFrame(new Void));
            symbol = context.namespace.lookup(this.name, context, loc, stackframe);
        } else {
            symbol = context.namespace.lookup(this.name, context, loc, null);
        }
        this.loc.assert2s2(!!symbol, this.name, " not found");
        return symbol;
    }

    override ASTSymbol quote(Quoter quoter) {
        assert(!moduleLevel);
        // $foo is quoted as 'foo'
        if (name[0 .. 1] == "\$") {
            return quoter.compiler.astIdentifier(name[1 .. $], loc);
        }
        return quoter.compilerCall("astIdentifier", [
            quoter.compiler.astStringLiteral(this.name, loc)
        ], loc);
    }
}

// :name
class ASTSymbolIdentifier : ASTSymbol
{
    string name;

    this(this.name) { }

    override Symbol compile(Context context) {
        return new SymbolIdentifier(this.name);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTSymbolIdentifier", __HERE__), [
                quoter.compiler.astStringLiteral(this.name, __HERE__)], __HERE__);
    }
}

/**
 * Helper class used for quasiquoting.
 * Transforms an AST* into an ASTSymbol representing a CompilerBase call producing this thing.
 */
abstract class Quoter {
    CompilerBase compiler; // for use by quote() methods

    abstract ASTSymbol compilerCall(string name, ASTSymbol[] parameters, Loc loc) { assert(false); }
    abstract ASTSymbol quoteLoc(Loc loc) { assert(false); }
}

abstract class Macro
{
    abstract void apply(MacroArgs args) { assert(false); }
}

// macro subclasses are differentiated by args
abstract class MacroArgs
{
    abstract bool done() { assert(false); }
}

// hook the ASTCall -> Call transform
class CallMacroArgs : MacroArgs
{
    ASTSymbol target;
    ASTArgument[] args;
    Context context;
    Loc loc;
    Expression transformed; // out
    this(this.target, this.args, this.context, this.loc) {
        this.transformed = null;
    }
    override bool done() { return !!this.transformed; }
}

// hook parseExpressionBase
class ParseExpressionBaseArgs : MacroArgs
{
    Parser parser;
    LexicalContext lexicalContext;
    ASTSymbol symbol; // out
    this(this.parser, this.lexicalContext) {
        this.symbol = null;
    }
    override bool done() { return !!this.symbol; }
}

// hook parseProperties
class ParsePropertyArgs : MacroArgs
{
    Parser parser;
    LexicalContext lexicalContext;
    ASTSymbol left;
    ASTSymbol result; // out
    this(this.parser, this.lexicalContext, this.left) {
        this.result = null;
    }
    override bool done() { return !!this.result; }
}

// hook parseStatement
class ParseStatementArgs : MacroArgs
{
    Parser parser;
    LexicalContext lexicalContext;
    ASTStatement statement; // out
    this(this.parser, this.lexicalContext) {
        this.statement = null;
    }
    override bool done() { return !!this.statement; }
}

// hook "import "
class ParseImportArgs : MacroArgs
{
    Parser parser;
    LexicalContext lexicalContext;
    ASTModuleBase module_; // out
    this(this.parser, this.lexicalContext) {
        this.module_ = null;
    }
    override bool done() { return !!this.module_; }
}

class Package
{
    string name;
    string path;
    Package[] deps;

    this(this.name, this.path, this.deps) { }

    void addDependency(Package dep) {
        this.deps ~= dep;
    }
}

/**
 * A symbol that depends on some sort of expression:
 *
 * - class method (this)
 * - struct method (this) NOT IMPLEMENTED
 * - nested function (stackframe) NOT IMPLEMENTED
 *
 * The symbol will give rise to an expression, such as a function call.
 * The contained expression must be temporized around that resulting expression,
 * and then fed back into the `LateSymbol` to gain `funcptr`.
 */
abstract class LateSymbol : Symbol
{
    Expression baseExpr;

    abstract Expression resolve(Context context, Expression baseExpr) { }
}

// class.member
// here so we can destructure on it later
// TODO fold this into LateSymbol
class ClassMethodPtr : Symbol
{
    Expression funcPtr;

    // must only be evaluated once!
    Expression thisValue;

    // if not, tmpize and take the address
    bool valueIsPtr;

    // fallback for once macro, TODO remove
    Expression thisPtr() { return thisValue; }

    this(this.funcPtr, this.thisValue, this.valueIsPtr) { }
}

// here so we can destructure on it later
abstract class FunctionReferenceBase : Expression
{
    abstract FunctionDeclaration getFunction() { assert(false); }
}

class StructMemberDeclaration
{
    string name;

    Type type;

    this(this.name, this.type) { }
}

// here so we can destructure on it later
abstract class StringLiteralBase : Expression
{
    string text;

    this(this.text) { }
}

// Helper for quasiquoted AST blocks that need to reference back to an already resolved symbol.
class ASTSymbolHelper : ASTSymbol
{
    Symbol symbol;

    this(this.symbol) { }

    override Symbol compile(Context context) { return this.symbol; }
}

// TODO clear all this up
abstract class FinishedSymbol
{
    abstract void emit(Generator generator) { assert(false); }
    abstract void hash(Hash hash) { assert(false); }
}

/**
 * Symbol that is currently being compiled
 */
abstract class PendingSymbol : Symbol
{
    abstract Symbol resolve() { assert(false); }
}
