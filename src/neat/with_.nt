module neat.with_;

import helpers;
import neat.base;
import neat.parser;
import neat.parser_base;

class WithNamespace : DeclarationHolder
{
    // This can't work!
    // When you do with() { void nested() { accessWithMember; } }, then the
    // lookup will try to access a nonlocal register.
    // We need to localize the reference in the stackframe,
    // by declaring it as an anonymous variable.
    Reference temporary;

    this(this.parent, this.temporary) { this.isContextScope = parent.isContextScope; }

    override Reference accessDecl(CompilerBase compiler)
    {
        return temporary;
    }

    override nullable Symbol lookup(string name, Context context, Loc loc, nullable Expression frame)
    {
        auto member = context.compiler.accessMemberWithLifetime(context, temporary, name, loc, true);
        if (member) return member;
        if (this.parent) return this.parent.lookup(name, context, loc, frame);
        return null;
    }
}

class ASTWithStatement : ASTStatement
{
    ASTSymbol expr;

    ASTStatement stmt;

    Loc loc;

    this(this.expr, this.stmt, this.loc) { }

    override StatementCompileResult compile(Context context)
    {
        Expression expr = beExpression3(context, this.expr.compile(context), this.loc);

        nullable Statement do_(Reference temp)
        {
            auto subContext = context.withNamespace(new WithNamespace(context.namespace, temp));
            auto subStmtPair = this.stmt.compile(subContext);
            return subStmtPair.statement;
        }
        auto stmt = notNull!Statement(context.compiler.consumeTemporaryStmt(context, expr, &do_));

        return StatementCompileResult(stmt, context);
    }

    override ASTSymbol quote(Quoter quoter) {
        print("TODO: quote(ASTWithStatement)");
        assert(false);
    }
}

nullable ASTStatement parseWithStatement(Parser parser, LexicalContext lexicalContext)
{
    auto loc = parser.loc;
    if (!acceptIdentifier(parser, "with"))
    {
        return null;
    }
    parser.expect("(");
    auto subExpr = lexicalContext.compiler.parseExpression(parser, lexicalContext);
    parser.assert_(!!subExpr, "with expression expected");
    parser.expect(")");
    auto body_ = lexicalContext.compiler.parseStatement(parser, lexicalContext);

    return new ASTWithStatement(notNull!ASTSymbol(subExpr), body_, loc);
}
