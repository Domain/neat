module neat.unittest_;

import helpers;
import neat.base;
import neat.function_;
import neat.parser_base;
import neat.types;

ASTUnitTest parseUnitTest(Parser parser, LexicalContext lexicalContext)
{
    if (!parser.accept("unittest"))
        return null;
    auto loc = parser.loc;
    ASTStatement body_ = lexicalContext.compiler.parseStatement(parser, lexicalContext);
    return new ASTUnitTest(loc, body_, lexicalContext.macroState);
}

class ASTUnitTest
{
    Loc loc;

    ASTStatement body_;

    MacroState macroState;

    this(this.loc, this.body_, this.macroState) { }

    FunctionDeclaration compile(Context context)
    {
        auto unittestFun = new UnittestFunction(this.loc, this.body_, this.macroState);

        unittestFun.parent = context.namespace;
        return unittestFun;
    }
}

class UnittestFunction : Function
{
    this(this.loc, this.statement, this.macroState)
    {
        this.name = "";
        this.ret = new Void;
        this.params = [];
        this.hasThisArg = false;
    }

    override string mangle()
    {
        return "unittest_" ~ loc.filename.cleanup ~ "_" ~ ltoa(loc.row);
    }

    // FIXME isn't this kinda sus?
    override CompiledFunction mkCompiledFunction(
        Function fun, Statement compiledStatement, FunctionScope stackframe, Statement[] argAssignments)
    {
        return new CompiledUnittestFunction(fun, compiledStatement, stackframe, argAssignments);
    }
}

string cleanup(string filename) {
    import std.string : replace;

    return filename.replace("/", "_").replace(".", "_");
}

class CompiledUnittestFunction : CompiledFunction
{
}
