module neat.decl;

import neat.base;
import neat.parser;
import neat.parser_base;
import neat.statements;

// Glue between ASTDeclaration and ASTStatement.
class ASTDeclarationStatement : ASTStatement
{
    ASTDeclaration decl;

    this(this.decl) { }

    override StatementCompileResult compile(Context context) {
        return StatementCompileResult(
            new NoopStatement,
            this.decl.compile(context));
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTDeclarationStatement", __HERE__), [
                this.decl.quote(quoter)], __HERE__);
    }
}

class ASTAliasDecl : ASTDeclaration
{
    string name;

    ASTSymbol target;

    this(this.name, this.target) { }

    // FIXME should return a Namespace?
    override Context compile(Context context) {
        auto target = this.target.compile(context);
        return context.withNamespace(new SymbolAlias(context.namespace, this.name, target));
    }

    override ASTSymbol quote(Quoter quoter) {
        with (quoter.compiler) {
            return astNewExpression(
                astIdentifier("ASTAliasDecl", __HERE__), [
                    astStringLiteral(this.name, __HERE__),
                    this.target.quote(quoter)], __HERE__);
        }
    }
}

ASTAliasDecl parseAliasDecl(Parser parser, LexicalContext lexicalContext) {
    if (!parser.accept("alias")) return null;
    auto loc = parser.loc;
    string name = parser.parseIdentifier;
    loc.assert2s(name.length > 0, "alias name expected");
    parser.expect("=");
    mut ASTSymbol target = lexicalContext.compiler.parseType(parser, lexicalContext);
    if (!target) target = lexicalContext.compiler.parseExpression(parser, lexicalContext);
    parser.expect(";");
    return new ASTAliasDecl(name, target);
}
