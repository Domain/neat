module neat.decl;

import neat.base;
import neat.statements;
import neat.util;

class ASTAliasDecl : ASTDeclaration
{
    string name;

    ASTSymbol target;

    this(this.name, this.target) { }

    // FIXME should return a Namespace?
    override (Context | fail Error) compile(Context context) {
        auto target = this.target.compile(context)?;
        return context.withNamespace(new SymbolAlias(context.namespace, this.name, target));
    }

    override ASTSymbol quote(Quoter quoter) {
        with (quoter.compiler) {
            return astNewExpression(
                astIdentifier("ASTAliasDecl", __RANGE__), [
                    astStringLiteral(this.name, __RANGE__),
                    this.target.quote(quoter)], __RANGE__);
        }
    }
}

(nullable ASTAliasDecl | fail Error) parseAliasDecl(Parser parser, LexicalContext lexicalContext) {
    if (!parser.accept("alias")?) return null;
    auto from = parser.from?;
    string name = parser.parseIdentifier?;
    from.assert(name.length > 0, "alias name expected")?;
    parser.expect("=")?;
    mut nullable ASTSymbol target = lexicalContext.compiler.parseType(parser, lexicalContext)?;
    if (!target) target = lexicalContext.compiler.parseExpression(parser, lexicalContext)?;
    parser.expect(";")?;
    return new ASTAliasDecl(name, target.notNull);
}
