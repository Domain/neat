module neat.array;

macro import neat.macros.hash;
macro import neat.macros.once;
macro import neat.macros.quasiquoting;

import backend.base;
import helpers;
import neat.base;
import neat.hash;
import neat.parser_base;
import neat.types;

/**
 * There are two things called "array": T[] and the data structure it references.
 * We will call the first an "array value" and the second the "array object".
 *
 * Array values have the following layout:
 * {
 *      size_t length;
 *      T* ptr;
 *      T* base;
 * }
 *
 * Array objects have the following layout:
 * {
 *      size_t references;
 *      size_t capacity; // total length
 *      size_t used; // length in use (used for realloc)
 * }
 * They are then followed directly by the array data.
 */
class Array : Type
{
    (Type | PendingSymbol) pendingElementType;

    BackendType backendType;

    this(this.pendingElementType) {
        this.zeroInitializable = true;
    }

    Type elementType() {
        return this.pendingElementType.case(
            Type t: t,
            PendingSymbol s: beType(__HERE__, s.resolve)
        );
    }

    override BackendType emit(Platform platform)
    {
        if (!this.backendType)
        {
            BackendType[] types = new BackendType[](3);
            types[0] = platform.nativeWordType;
            // No Element type here; there would be an infinite recursion with self-referential types like JSONValue.
            types[1] = platform.voidp;
            types[2] = platform.voidp;
            this.backendType = new BackendStructType(types);
        }
        return this.backendType;
    }

    override bool same(Type other)
    {
        if (auto otherArray = other.instanceOf(Array)) {
            return otherArray.elementType.same(this.elementType);
        }
        return false;
    }

    override string repr() { return this.elementType.repr ~ "[]"; }

    override string mangle() { return "array_" ~ this.elementType.mangle; }

    override void hash(Hash hash) { hash.adds("array"); this.elementType.hash(hash); }

    override nullable Statement copyInto(Context context, Reference target, Expression source)
    {
        auto compiler = context.compiler;

        nullable Statement assign(Expression source) {
            mut auto context = context.withNamespace(context.compiler.exprAlias(context.namespace, "source", source));
            auto refCountIncFun = once new FunctionDeclaration(
                "neat_runtime_refcount_inc", new Void, [
                    Parameter(false, "label", false, new Array(new Character)),
                    Parameter(false, "ptr", false, new Pointer(new Void))]);
            context = context.withNamespace(context.compiler.exprAlias(
                        context.namespace, "neat_runtime_refcount_inc", refCountIncFun));
            // count up reference
            auto stmt = compiler.$stmt if (source.base) {
                neat_runtime_refcount_inc("array acquire", source.base);
            };
            auto result = stmt.compile(context);
            return compiler.sequenceStatement([
                result.statement,
                compiler.assignStatement(target, source)]);
        }
        return compiler.stmtWithTemporaryExpr(source, &assign);
    }

    override nullable Statement endLifetime(Context context, Reference reference)
    {
        return context.compiler.exprStatement(releaseArray(context, reference));
    }

    override nullable Symbol accessMember(
        Loc loc, Context context, nullable Expression base, string field, Protection _)
    {
        if (auto base = base) {
            if (field == "length")
                return new ArrayLength(base, context.nativeWordType);
            if (field == "ptr")
                return new ArrayPointer(this.elementType, base);
            if (field == "base")
                return new ArrayBase(base);
        }
        return null;
    }

    override nullable Expression binaryOp(Context context, string op, Expression left, Expression right, Loc loc) {
        if (op == "==" && right.type.instanceOf(Array)) {
            Expression do1(Expression left) {
                Expression do2(Expression right) {
                    return arrayEqual(context, left, right);
                }
                return context.compiler.consume(context, right, &do2);
            }
            return context.compiler.consume(context, left, &do1);
        }
        return null;
    }
}

class ASTArray : ASTSymbol
{
    ASTSymbol elementType;

    Loc loc;

    this(this.elementType, this.loc) { }

    override Type compile(Context context)
    {
        auto sym = this.elementType.compile(context);
        if (auto pending = sym.instanceOf(PendingSymbol))
        {
            return new Array(pending);
        }
        return new Array(beType(this.loc, sym));
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astArray", [ elementType.quote(quoter) ], loc);
    }
}

int getArrayLen(Generator output, Type arrayType, int arrayReg)
{
    return output.fun.field(arrayType.emit(output.platform), arrayReg, 0);
}

class ArrayLength : Expression
{
    Expression arrayValue;

    this(this.arrayValue, this.type) { }

    override int emit(Generator output)
    {
        int arrayReg = this.arrayValue.emit(output);

        return getArrayLen(output, this.arrayValue.type, arrayReg);
    }

    override ExprInfo info() { return ExprInfo(false, Ownership.global); }

    override void hash(Hash hash) { hash.adds("ArrayLength"); this.arrayValue.hash(hash); }
}

int getArrayPtr(Generator output, Array arrayType, int arrayReg)
{
    return output.fun.bitcast(
        output.fun.field(arrayType.emit(output.platform), arrayReg, 1),
        new BackendPointerType(arrayType.elementType.emit(output.platform)));
}

class ArrayPointer : Expression
{
    Type elementType;

    Expression arrayValue;

    this(this.elementType, this.arrayValue) {
        this.type = new Pointer(this.elementType);
    }

    override int emit(Generator output)
    {
        int arrayReg = this.arrayValue.emit(output);

        return getArrayPtr(output, notNull!Array(this.arrayValue.type.instanceOf(Array)), arrayReg);
    }

    override ExprInfo info() { return ExprInfo(false, Ownership.global); }

    override void hash(Hash hash) { hash.adds("ArrayPointer"); this.arrayValue.hash(hash); }
}

int getArrayBase(Generator output, Type arrayType, int arrayReg)
{
    return output.fun.field(arrayType.emit(output.platform), arrayReg, 2);
}

class ArrayBase : Expression
{
    Expression arrayValue;

    this(this.arrayValue) {
        this.type = once new Pointer(new Void);
    }

    override int emit(Generator output)
    {
        int arrayReg = this.arrayValue.emit(output);

        return getArrayBase(output, this.arrayValue.type, arrayReg);
    }

    override ExprInfo info() { return ExprInfo(false, Ownership.owned); }

    override void hash(Hash hash) { hash.adds("ArrayBase"); this.arrayValue.hash(hash); }
}

int makeArray(Generator output, Type elementType, int lenReg, int ptrReg, int baseReg)
{
    BackendType structType = (new Array(elementType)).emit(output.platform);
    auto voidp = output.platform.voidp;

    return output.fun.structLiteral(structType, [
        lenReg,
        output.fun.bitcast(ptrReg, voidp),
        baseReg
    ]);
}

// TODO use this as a basis for all array-allocating expressions
class ArrayAllocation : Expression
{
    Type elementType;

    (Expression | size_t) length;

    this(this.elementType, this.length) {
        this.type = new Array(this.elementType);
    }

    override int emit(Generator output)
    {
        auto backendSizeT = output.platform.nativeWordType;
        auto voidp = output.platform.voidp;
        auto backendElementType = this.elementType.emit(output.platform);
        int elementSizeReg = output.fun.wordLiteral(output.platform, backendElementType.size(output.platform));
        int threeWordSizeReg = output.fun.wordLiteral(output.platform, backendSizeT.size(output.platform) * 3);
        int oneReg = output.fun.wordLiteral(output.platform, 1);
        int twoReg = output.fun.wordLiteral(output.platform, 2);
        int threeReg = output.fun.wordLiteral(output.platform, 3);
        int arrayLength = this.length.case(
            Expression ex: ex.emit(output),
            size_t sz: output.fun.wordLiteral(output.platform, sz));
        int arrayBytes = output.fun.binop("*", backendSizeT, arrayLength, elementSizeReg);
        int totalArrayBytes = output.fun.binop("+", backendSizeT, arrayBytes, threeWordSizeReg);
        int arrayBase = output.fun.call(voidp, "neat_runtime_alloc", [totalArrayBytes]);
        // ptr = base + 2
        int arrayPtr = output.fun.bitcast(output.fun.ptrOffset(backendSizeT, arrayBase, threeReg), voidp);
        // base[0] = refs (1)
        // base[1] = allocated length (in elements)
        // base[2] = used length (in elements, inited to allocated length)
        output.fun.store(backendSizeT, output.fun.bitcast(arrayBase, new BackendPointerType(backendSizeT)), oneReg);
        output.fun.store(backendSizeT, output.fun.ptrOffset(backendSizeT, arrayBase, oneReg), arrayLength);
        output.fun.store(backendSizeT, output.fun.ptrOffset(backendSizeT, arrayBase, twoReg), arrayLength);

        int arrayPtrBc = output.fun.bitcast(arrayPtr, new BackendPointerType(backendElementType));
        return makeArray(output, this.elementType, arrayLength, arrayPtrBc, arrayBase);
    }

    override void hash(Hash hash) {
        hash.adds("ArrayAllocation");
        this.length.case {
            Expression ex: ex.hash(hash);
            size_t sz: hash.addl(sz);
        }
    }

    override ExprInfo info() { return ExprInfo(false, Ownership.gifted); }
}

class ArraySlice : Expression
{
    Expression base;

    Expression lower;

    Expression upper;

    Loc loc;

    Array arrayType;

    this(this.base, this.lower, this.upper, this.loc) {
        auto baseType = this.base.type;
        if (auto arrayType = baseType.instanceOf(Array)) {
            this.arrayType = arrayType;
        } else if (auto pointerType = baseType.instanceOf(Pointer)) {
            this.arrayType = new Array(pointerType.target);
        } else {
            this.loc.assert2s(false, "slice of non-array/non-pointer");
        }
        this.type = this.arrayType;
    }

    override int emit(Generator output)
    {
        BackendType voidp = output.platform.voidp;

        auto elementType = this.arrayType.elementType.emit(output.platform);

        int baseReg = this.base.emit(output);
        int lowerReg = this.lower.emit(output);
        int upperReg = this.upper.emit(output);
        mut int base, ptr;
        if (this.base.type.instanceOf(Array)) {
            base = getArrayBase(output, this.arrayType, baseReg);
            ptr = getArrayPtr(output, this.arrayType, baseReg);
        } else {
            base = output.fun.bitcast(output.fun.wordLiteral(output.platform, 0), voidp);
            ptr = baseReg;
        }
        // ptr = ptr + lower
        int newPtr = output.fun.ptrOffset(elementType, ptr, lowerReg);
        // len = upper - lower
        int newLen = output.fun.binop(
            "-", output.platform.nativeWordType,
            upperReg, lowerReg);

        // TODO acquire ref
        return makeArray(output, this.arrayType.elementType, newLen, newPtr, base);
    }

    override ExprInfo info() { return base.info; }

    override void hash(Hash hash) {
        hash.adds("ArraySlice");
        base.hash(hash);
        lower.hash(hash);
        upper.hash(hash);
    }
}

Expression arrayEqual(Context context, Expression left, Expression right) {
    auto compiler = context.compiler;

    Array leftArray = notNull!Array(left.type.instanceOf(Array));
    Array rightArray = notNull!Array(right.type.instanceOf(Array));
    assert(leftArray.same(rightArray));

    Parameter[] params = [
        Parameter(false, "left", false, leftArray),
        Parameter(false, "right", false, rightArray),
    ];

    ASTStatement body_()
    {
        return compiler.$stmt {
            if (left.length != right.length) return false;
            for (i in 0 .. left.length) {
                if (left[i] != right[i]) return false;
            }
            return true;
        };
    }

    auto fn = compiler.createRuntimeFunction(context, "array_eq", new Boolean, params, &body_);

    return context.compiler.mkCall(fn, [left, right], __HERE__);
}

Expression releaseArray(Context context, Expression value) {
    auto compiler = context.compiler;

    Array array = notNull!Array(value.type.instanceOf(Array));
    Parameter[] params = [Parameter(false, "value", false, array)];

    ASTStatement body_()
    {
        return compiler.$stmt {
            if (!value.base) return;
            if (!neat_runtime_refcount_dec("array release", value.base))
                return;
            for (i in 0 .. value.length) {
                __destroy(value[i]);
            }
            free(value.base);
        };
    }

    auto fn = compiler.createRuntimeFunction(context, "arrayrelease", new Void, params, &body_);

    return context.compiler.mkCall(fn, [value], __HERE__);
}

Expression arrayCat(Context context, Expression left, Expression right, Loc loc) {
    auto compiler = context.compiler;

    Array leftArray = notNull!Array(left.type.instanceOf(Array));
    Parameter[] params = [
        Parameter(false, "left", false, leftArray),
        Parameter(false, "right", false, right.type)];

    ASTStatement body_() {
        if (leftArray.elementType.same(right.type) || leftArray.elementType.implicitConvertFrom(context, right)) {
            return compiler.$stmt {
                if (left.base) {
                    size_t prevCap = (cast(size_t*) left.base)[1];
                    size_t* prevUsed = &(cast(size_t*) left.base)[2];
                    auto prevFrontier = &(cast(typeof(left.ptr)) &(cast(size_t*) left.base)[3])[*prevUsed];
                    if (&left.ptr[left.length] is prevFrontier && *prevUsed < prevCap) {
                        *prevUsed += 1;
                        prevFrontier[0] = right;
                        return left[0 .. $ + 1];
                    }
                }
                auto result = new typeof(left)(left.length * 2 + 1);
                for (i, src in left) result[i] = src;
                result[left.length] = right;
                // used
                (cast(size_t*) result.base)[2] = left.length + 1;
                return result[0 .. left.length + 1];
            };
        } else if (leftArray.same(right.type)) {
            return compiler.$stmt {
                auto newLength = left.length + right.length;
                if (left.base) {
                    size_t prevCap = (cast(size_t*) left.base)[1];
                    size_t* prevUsed = &(cast(size_t*) left.base)[2];
                    auto prevFrontier = &(cast(typeof(left.ptr)) &(cast(size_t*) left.base)[3])[*prevUsed];
                    if (&left.ptr[left.length] is prevFrontier && *prevUsed + right.length <= prevCap) {
                        *prevUsed += right.length;
                        for (i, value in right) prevFrontier[i] = value;
                        return left[0 .. newLength];
                    }
                }
                auto result = new typeof(left)(left.length * 2 + right.length);
                for (i, value in left) result[i] = value;
                for (i, value in right) result[left.length + i] = value;
                (cast(size_t*) result.base)[2] = newLength;
                return result[0 .. newLength];
            };
        } else {
            loc.fail("incompatible types for concat: " ~ leftArray.repr ~ " and " ~ right.type.repr);
        }
    }
    auto fn = compiler.createRuntimeFunction(context, "arrayappend", leftArray, params, &body_);
    auto astFn = new ASTSymbolHelper(fn);
    auto astLeft = new ASTSymbolHelper(left);
    auto astRight = new ASTSymbolHelper(right);

    return notNull!Expression(
        compiler.call(context, astFn, [ASTArgument(astLeft, ""), ASTArgument(astRight, "")], loc, false));
}

nullable ASTSymbol parseArrayLiteral(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    auto loc = parser.loc;
    if (!parser.accept("[")) {
        parser.revert;
        return null;
    }
    mut ASTArrayLiteralElement[] values;
    while (!parser.accept("]")) {
        auto loc = parser.loc;
        ASTSymbol value = notNull!ASTSymbol(lexicalContext.compiler.parseExpression(parser, lexicalContext));
        values ~= ASTArrayLiteralElement(value, loc);
        parser.accept(",");
    }
    parser.commit;
    return new ASTArrayLiteral(null, values);
}

// marker: type that converts to any array type.
// type of [].
class EmptyArrayType : Type
{
    this() { this.zeroInitializable = true; }

    override BackendType emit(Platform platform) {
        assert(false);
    }

    override bool same(Type other) {
        return !!other.instanceOf(EmptyArrayType);
    }

    override nullable Expression implicitConvertTo(Context context, Expression source, Type target)
    {
        if (target.instanceOf(Array)) {
            return new EmptyArrayLiteral(target);
        }
        return null;
    }

    override string repr() { return "typeof([])"; }

    override void hash(Hash hash) { hash.adds("EmptyArrayType"); }
}

class EmptyArrayLiteral : Expression
{
    nullable Type type_; // may be null

    this(this.type_) {
        if (auto type = this.type_) this.type = type; // Very good code.
        else this.type = new EmptyArrayType;
    }

    override int emit(Generator generator) {
        assert(!!this.type_);
        auto elementType = this.type_.instanceOf(Array).elementType;
        auto voidp = generator.platform.voidp;
        auto elementp = new BackendPointerType(elementType.emit(generator.platform));

        int len = generator.fun.wordLiteral(generator.platform, 0);
        int ptr = generator.fun.bitcast(generator.fun.intLiteral(0), elementp);
        int base = generator.fun.bitcast(generator.fun.intLiteral(0), voidp);

        return makeArray(generator, elementType, len, ptr, base);
    }

    override ExprInfo info() { return ExprInfo(false, Ownership.owned); }

    override void hash(Hash hash) {
        hash.adds("EmptyArrayLiteral");
        if (this.type_)
            this.type_.hash(hash);
	else
	    hash.adds(" generic");
    }
}

struct ASTArrayLiteralElement
{
    ASTSymbol value;

    Loc loc;
}

class ASTArrayLiteral : ASTSymbol
{
    nullable ASTSymbol typeHint;

    ASTArrayLiteralElement[] elements;

    this(this.typeHint, this.elements) { }

    override Expression compile(Context context) {
        if (!this.elements.length)
            return new EmptyArrayLiteral(null);
        mut Expression[] values;
        for (element in this.elements)
            values ~= beExpression3(context, element.value.compile(context), element.loc);
        Type getType() {
            if (this.typeHint) {
                return beType(__HERE__, this.typeHint.compile(context));
            }
            mut nullable Expression mergedReference;
            for (i, element in this.elements) {
                if (!mergedReference) mergedReference = values[i];
                else {
                    // TODO centralize somewhere
                    auto value = values[i];
                    auto left = context.compiler.implicitConvertTo(context, value, mergedReference.type);
                    auto right = context.compiler.implicitConvertTo(context, notNull!Expression(mergedReference), value.type);
                    if (!left && !right)
                        element.loc.assert2s(false, "incompatible expression type");
                    else if (left && right && !left.type.same(right.type))
                        element.loc.assert2s(false, "ambiguous expression type");
                    if (left) mergedReference = left;
                    else if (right) mergedReference = right;
                }
            }
            return mergedReference.type;
        }
        auto mergeType = getType();
        for (i in 0 .. this.elements.length) {
            if (auto castValue = context.compiler.implicitConvertTo(context, values[i], mergeType))
                values[i] = castValue;
            else assert(false);
        }
        auto target = new ArrayAllocation(mergeType, values.length);
        nullable Expression do_(Expression target) {
            mut Statement[] moves;
            auto base = new ArrayPointer(mergeType, target);
            for (int i, value in values) {
                auto target = context.compiler.dereference(
                    context.compiler.pointerOffset(base, context.compiler.intLiteral(i)));
                moves ~= context.compiler.move(context, target, value);
            }
            return context.compiler.statementExpression(
                context.compiler.sequenceStatement(moves), target);
        }
        return notNull!Expression(context.compiler.exprWithTemporaryExpr(target, &do_));
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTArrayLiteral'"); assert(false); }
}

/**
 * $ for length in an array index context.
 */
class ASTArrayLength : ASTSymbol
{
    Loc loc;

    this(this.loc) { }

    override Symbol compile(Context context) {
        auto surroundingArraySymbol = context.compiler.lookup(context, __HERE__, "__array");
        loc.assert2s(
            surroundingArraySymbol && surroundingArraySymbol.instanceOf(Expression),
            "'\$' can only be used inside an array index context");

        return new ArrayLength(
            notNull!Expression(surroundingArraySymbol.instanceOf(Expression)),
            context.nativeWordType);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTArrayLength", loc), [
                quoter.quoteLoc(loc)], loc);
    }
}
