module neat.hashmap;

macro import neat.macros.once;
macro import neat.macros.quasiquoting;

import backend.base;
import neat.array;
import neat.base;
import neat.decl;
import neat.either;
import neat.expr;
import neat.formatstring;
import neat.hash;
import neat.parser_base;
import neat.statements;
import neat.struct_;
import neat.tuples;
import neat.types;

/**
 * Hashmaps are simpler than arrays: the hashmap value is just a pointer to the hashmap object.
 *
 * (This is because they cannot be sliced.)
 *
 * Hashmap objects have the following layout:
 * {
 *      size_t references;
 *      size_t length; // number of occupied slots
 *      size_t capacity; // number of total slots
 * }
 *
 * It is then followed directly by the hashmap data, which consists of this type:
 *
 * (Key key, Value value | :empty | :gravestone)
 */
class HashMap : Type
{
    // FIXME pending
    Type key, value;

    this(this.key, this.value) { }

    override BackendType emit(Platform platform)
    {
        return platform.voidp;
    }

    override bool same(Type other)
    {
        if (HashMap otherHashmap = other.instanceOf(HashMap))
            return key.same(otherHashmap.key) && value.same(otherHashmap.value);
        return false;
    }

    override string repr() { return "$(this.value.repr)[$(this.key.repr)]"; }

    override string mangle() { return "hashmap_$(this.key.mangle)_to_$(this.value.mangle)"; }

    override void hash(Hash hash) { hash.adds("hashmap"); this.key.hash(hash); this.value.hash(hash); }

    override Statement copyInto(Context context, Reference target, Expression source)
    {
        auto compiler = context.compiler;

        Statement assign(Expression source) {
            mut auto context = context.withNamespace(context.compiler.exprAlias(context.namespace, "source", source));
            auto refCountIncFun = once new FunctionDeclaration(
                "neat_runtime_refcount_inc", new Void, [
                    Parameter(false, "label", false, new Array(new Character)),
                    Parameter(false, "ptr", false, new Pointer(new Void))]);
            context = context.withNamespace(context.compiler.exprAlias(
                        context.namespace, "neat_runtime_refcount_inc", refCountIncFun));
            // count up reference
            auto stmt = compiler.$stmt if (cast(void*) source != null) {
                neat_runtime_refcount_inc("hashmap acquire", cast(size_t*) source);
            };
            auto result = stmt.compile(context);
            return compiler.sequenceStatement([
                result.statement,
                compiler.assignStatement(target, source)]);
        }
        return compiler.stmtWithTemporaryExpr(source, &assign);
    }

    override Statement endLifetime(Context context, Reference reference)
    {
        return context.compiler.exprStatement(releaseHashmap(context, reference));
    }

    override Symbol accessMember(Loc loc, Context context, Expression base, string field, Protection protection)
    {
        if (base && field == "keys") {
            return keysHashmap(context, this, base);
        }
        if (base && field == "values") {
            return valuesHashmap(context, this, base);
        }
        return null;
    }

    override Expression callMember(Context context, Expression base, string field, ASTArgument[] args, Protection protection, Loc loc)
    {
        // TODO args.loc
        if (base && field == "set") {
            loc.assert2s(args.length == 2, "hashmap.set() expects key, value");
            auto key = args[0].sym.compile(context).beExpressionImplCall(context, loc);
            auto value = args[1].sym.compile(context).beExpressionImplCall(context, loc);
            auto set = setHashmap(context, this, base, key, value, loc);
            return context.compiler.statementExpression(set, context.compiler.voidLiteral);
        }
        if (base && field == "get") {
            loc.assert2s(args.length == 2, "hashmap.get() expects two parameters, key and default");
            auto key = args[0].sym.compile(context).beExpressionImplCall(context, loc);
            auto deflt = args[1].sym.compile(context).beExpressionImplCall(context, loc);
            return getHashmapDefault(context, loc, this, base, key, deflt, insert=false);
        }
        if (base && field == "require") {
            loc.assert2s(args.length == 2, "hashmap.require() expects two parameters, key and default");
            auto key = args[0].sym.compile(context).beExpressionImplCall(context, loc);
            auto deflt = args[1].sym.compile(context).beExpressionImplCall(context, loc);
            return getHashmapDefault(context, loc, this, base, key, deflt, insert=true);
        }
        if (base && field == "has") {
            loc.assert2s(args.length == 1, "hashmap.has() expects one parameter, key");
            auto key = args[0].sym.compile(context).beExpressionImplCall(context, loc);
            return hasKeyHashmap(context, this, base, key);
        }
        if (base && field == "resize") {
            loc.assert2s(args.length == 1, "hashmap.resize() expects one parameter, new size");
            auto newsize = args[0].sym.compile(context).beExpressionImplCall(context, loc);
            return resizeHashmap(context, this, base, newsize);
        }
        if (!base && field == "allocate") {
            loc.assert2s(args.length == 1, "hashmap.allocate() expects one parameter, size");
            auto size = args[0].sym.compile(context).beExpressionImplCall(context, loc);
            auto sizeT = expectImplicitConvertTo(context, size, context.nativeWordType, loc);
            return allocateHashmap(context, this, sizeT);
        }
        if (!base && field == "hash") {
            loc.assert2s(args.length == 1, "hashmap.hash() expects one parameter, key");
            auto key = args[0].sym.compile(context).beExpressionImplCall(context, loc);
            return hashFun(context, loc, this, key);
        }
        return null;
    }

    override Expression index(Context context, Expression base, Expression index, Loc loc) {
        return getHashmap(context, this, base, index);
    }

    override Statement indexAssignment(Context context, Expression base, Expression index, Expression value, Loc loc) {
        return setHashmap(context, this, base, index, value, loc);
    }
}

private ASTSymbol wrap(Context context, HashMap hashmap, ASTSymbol value) {
    auto keyType = new ASTSymbolHelper(hashmap.key), valueType = new ASTSymbolHelper(hashmap.value);
    return context.compiler.$expr ({
        0; // remove at your own risk
        alias Key = $keyType;
        alias Value = $valueType;
        struct HashMapBase {
            size_t references;
            size_t length;
            size_t capacity;
        }
        alias HashMapRow = (Key key, Value value | :empty | :gravestone);
        $value;
    });
}

private Expression hashFun(Context context, Loc loc, HashMap hashmap, Expression key) {
    Parameter[] params = [
        Parameter(false, "key", false, key.type)];

    // TODO proper unsigned types
    ASTSymbol hashfn() {
        if (key.type.same(once new Array(new Character))) {
            return context.compiler.$expr ({
                // fnv hash
                mut int hash = 0x811c9dc5;
                for (auto ch <- key) {
                    hash ^= cast(int) ch;
                    hash *= 0x01000193;
                }
                if (hash < 0) hash = -hash;
                hash;
            });
        }
        if (key.type.same(once new Integer) || key.type.same(once new Long)) {
            // knuth hash
            return context.compiler.$expr ({
                mut int hash = key * 2654435761;
                if (hash < 0) hash = -hash;
                hash;
            });
        }
        loc.assert2s(false, "TODO: hash() of $(key.type.repr)");
    }
    ASTStatement body_() {
        return context.compiler.astReturn(wrap(context, hashmap, hashfn), __HERE__);
    }

    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_hash", context.nativeWordType, params, &body_);

    return context.compiler.mkCall(fn, [key], __HERE__);
}

private Expression allocateHashmap(Context context, HashMap hashmap, Expression size) {
    Parameter[] params = [
        Parameter(false, "size", false, context.nativeWordType)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            auto bytesize = sizeof(HashMapBase) + sizeof(HashMapRow) * size;
            auto ret = neat_runtime_alloc(bytesize);
            auto base = cast(HashMapBase*) ret;
            base.references = 1;
            base.length = 0;
            base.capacity = size;
            auto rows = cast(HashMapRow*) &base[1];
            for (auto i <- 0 .. size)
                rows[i] = :empty;
            cast(Value[Key]) base;
        });
        return context.compiler.astReturn(wrap(context, hashmap, expr), __HERE__);
    }

    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_allocate", hashmap, params, &body_);

    return context.compiler.mkCall(fn, [size], __HERE__);
}

private Expression resizeHashmap(Context context, HashMap hashmap, Expression base, Expression newsize) {
    Expression do_(Expression base) {
        return plainResizeHashmap(context, hashmap, base, newsize);
    }
    return context.compiler.consume(context, base, &do_);
}

private Expression plainResizeHashmap(Context context, HashMap hashmap, Expression base, Expression newsize) {
    Parameter[] params = [
        Parameter(false, "base", false, hashmap),
        Parameter(false, "newsize", false, context.nativeWordType)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            auto data = cast(HashMapBase*) base;
            auto rows = cast(HashMapRow*) &data[1];
            // FIXME
            alias T = Value[Key];
            mut auto newHashmap = T.allocate(newsize);
            for (int i <- 0 .. data.capacity) {
                0; // remove at your peril
                rows[i].case {
                    (:empty): continue;
                    (:gravestone): continue;
                    (Key key, Value value): newHashmap.set(key, value);
                }
            }
            return newHashmap;
            0; // expr result value. TODO void literal
        });
        return new ASTExprStatement(wrap(context, hashmap, expr), __HERE__);
    }

    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_resize", hashmap, params, &body_);

    return context.compiler.mkCall(fn, [base, newsize], __HERE__);
}

private Statement setHashmap(
    Context context, HashMap hashmap, Expression base, Expression key, Expression value, Loc loc)
{
    auto baseRef = base.instanceOf(Reference);
    loc.assert2s(!!baseRef && baseRef.info.mutable, "target of hashmap assignment must be mutable");
    // we temporize value first thing, because evaluating value may change the addresss of the hashmap.
    Statement do3(Expression value) {
        // Then key, same reason.
        Statement do2(Expression key) {
            // mark value for consumption.
            Statement do1(Expression value) {
                return plainSetHashmap(context, hashmap, baseRef, key, value);
            }
            return context.compiler.consumeStmt(context, value, &do1);
        }
        return context.compiler.stmtWithTemporaryExpr(key, &do2);
    }
    return context.compiler.stmtWithTemporaryExpr(value, &do3);
}

private Statement plainSetHashmap(Context context, HashMap hashmap, Reference base, Expression key, Expression value) {
    Parameter[] params = [
        Parameter(false, "base", false, hashmap),
        Parameter(false, "key", false, hashmap.key),
        Parameter(false, "value", false, hashmap.value)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            // FIXME
            alias T = Value[Key];
            auto hash = T.hash(key);
            mut auto data = cast(HashMapBase*) base;
            if (!data) {
                auto newHashmap = T.allocate(4);
                data = cast(HashMapBase*) newHashmap; // storing in a pointer
            } else if (data.length + 1 >= data.capacity / 2) {
                mut size_t newsize = data.capacity * 2;
                if (newsize < 4) newsize = 4;
                auto resized = base.resize(newsize);
                data = cast(HashMapBase*) resized;
            } else {
                // we'll return data, so make a gift
                data.references += 1;
            }
            auto rows = cast(HashMapRow*) &data[1];
            for (int i <- 0 .. data.capacity) {
                size_t index = (i + hash) % data.capacity; // FIXME wraparound test instead of %
                rows[index].case {
                    (:empty): {
                        data.length += 1;
                        rows[index] = (key, value);
                        return cast(T) data;
                    }
                    (:gravestone): {
                        data.length += 1;
                        rows[index] = (key, value);
                        return cast(T) data;
                    }
                    (Key existingKey, Value existingValue): {
                        if (key == existingKey)
                        {
                            rows[index] = (key, value);
                            return cast(T) data;
                        }
                        continue;
                    }
                }
            }
            int* ip = null; *ip = *ip;
            // TODO
            // assert(false); // No space even after resize.
            0; // expr result value. TODO void literal
        });
        return new ASTExprStatement(wrap(context, hashmap, expr), __HERE__);
    }

    Statement do_(Expression callTemp) {
        with (context.compiler) {
            auto endLifetime = hashmap.endLifetime(context, base);
            auto assign = assignStatement(base, callTemp);
            return sequence(endLifetime, assign);
        }
    }

    with (context.compiler) {
        auto fn = createRuntimeFunction(
            context, "hashmap_set", hashmap, params, &body_);

        auto call = mkCall(fn, [base, key, value], __HERE__);
        return stmtWithTemporaryExpr(call, &do_);
    }
}

private Expression getHashmap(Context context, HashMap hashmap, Expression base, Expression key) {
    Parameter[] params = [
        Parameter(false, "base", false, hashmap),
        Parameter(false, "key", false, hashmap.key)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            // FIXME
            alias T = Value[Key];
            auto hash = T.hash(key);
            mut auto data = cast(HashMapBase*) base;
            if (!data) {
                // FIXME extern(C) assert
                // FIXME Maybe
                int* ip = null; *ip = *ip;
            }
            auto rows = cast(HashMapRow*) &data[1];
            for (int i <- 0 .. data.capacity) {
                // FIXME wraparound test instead of %
                size_t index = (i + hash) % data.capacity;
                rows[index].case {
                    (:empty): {
                        // FIXME assert
                        int* ip = null; *ip = *ip;
                    }
                    (:gravestone): {
                        int* ip = null; *ip = *ip;
                    }
                    (Key existingKey, Value existingValue): {
                        if (key == existingKey) return existingValue;
                    }
                }
            }
            int* ip = null; *ip = *ip;
            // TODO
            // assert(false); // No space even after resize.
            0; // expr result value. TODO void literal
        });
        return new ASTExprStatement(wrap(context, hashmap, expr), __HERE__);
    }

    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_get", hashmap.value, params, &body_);

    return context.compiler.mkCall(fn, [base, key], __HERE__);
}

private Expression hasKeyHashmap(Context context, HashMap hashmap, Expression base, Expression key) {
    Parameter[] params = [
        Parameter(false, "base", false, hashmap),
        Parameter(false, "key", false, hashmap.key)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            // FIXME
            alias T = Value[Key];
            auto hash = T.hash(key);
            mut auto data = cast(HashMapBase*) base;
            if (!data) return false;
            auto rows = cast(HashMapRow*) &data[1];
            for (int i <- 0 .. data.capacity) {
                // FIXME wraparound test instead of %
                size_t index = (i + hash) % data.capacity;
                rows[index].case {
                    (:empty): return false;
                    (:gravestone): {}
                    (Key existingKey, Value existingValue): {
                        if (key == existingKey) return true;
                    }
                }
            }
            int* ip = null; *ip = *ip;
            // TODO
            // assert(false); // hashmap was completely full, this should never happen
            0; // expr result value. TODO void literal
        });
        return new ASTExprStatement(wrap(context, hashmap, expr), __HERE__);
    }

    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_has", new Integer, params, &body_);

    return context.compiler.mkCall(fn, [base, key], __HERE__);
}

public Expression getHashmapDefault(
    Context context, Loc loc, HashMap hashmap, Expression base, Expression key, Expression deflt, bool insert)
{
    auto astValue = new ASTSymbolHelper(hashmap.value);
    auto astBase = new ASTSymbolHelper(base);
    auto astKey = new ASTSymbolHelper(key);
    auto astDeflt = new ASTSymbolHelper(deflt);
    mut ASTStatement astElse = context.compiler.$stmt ret = $astDeflt;;
    if (insert) {
        auto baseRef = base.instanceOf(Reference);
        loc.assert2s(!!baseRef && baseRef.info.mutable, "target of hashmap assignment must be mutable");
        astElse = context.compiler.$stmt {
            ret = $astDeflt;
            $astBase[key] = ret;
        };
    }

    // FIXME single lookup
    auto expr = context.compiler.$expr ({
        mut $astValue ret;
        auto key = $astKey;
        if ($astBase.has(key)) ret = $astBase[key];
        else $stmt astElse;
        ret;
    });
    return expr.compile(context).beExpression;
}

public Expression releaseHashmap(Context context, Expression value) {
    HashMap hashmap = value.type.instanceOf(HashMap);
    __HERE__.assert2s(!!hashmap, "hashmap expected");
    Parameter[] params = [Parameter(false, "value", false, hashmap)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            if (cast(void*) value == null) return;
            if (!neat_runtime_refcount_dec("hashmap release", cast(size_t*) value))
                return;
            auto base = cast(HashMapBase*) value;
            auto rows = cast(HashMapRow*) &base[1];
            for (int i <- 0 .. base.capacity) {
                rows[i].case {
                    (:empty): continue;
                    (:gravestone): continue;
                    (Key key, Value value): {
                        __destroy(key);
                        __destroy(value);
                    }
                }
                0; // Remove at your peril. (FIXME typed array literals or implcast array literals)
            }
            free(cast(void*) value);
            0; // expr result value. TODO void literal
        });
        return new ASTExprStatement(wrap(context, hashmap, expr), __HERE__);
    }

    auto fn = context.compiler.createRuntimeFunction(context, "hashmap_release", new Void, params, &body_);

    return context.compiler.mkCall(fn, [value], __HERE__);
}

private Expression keysHashmap(Context context, HashMap hashmap, Expression base) {
    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            if (cast(void*) value == null) {
                Key[] ret; return ret;
            }
            auto base = cast(HashMapBase*) value;
            auto rows = cast(HashMapRow*) &base[1];
            auto ret = new Key[](base.length);
            mut int k = 0;
            for (int i <- 0 .. base.capacity) {
                rows[i].case {
                    (:empty): continue;
                    (:gravestone): continue;
                    (Key key, Value value): {
                        ret[k] = key;
                        k += 1;
                    }
                }
                0;
            }
            // assert(k == base.length);
            if (k != base.length) { int* ip; *ip = *ip; }
            ret;
        });
        return context.compiler.astReturn(wrap(context, hashmap, expr), __HERE__);
    }

    Parameter[] params = [Parameter(false, "value", false, hashmap)];
    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_keys", new Array(hashmap.key), params, &body_);

    return context.compiler.mkCall(fn, [base], __HERE__);
}

private Expression valuesHashmap(Context context, HashMap hashmap, Expression base) {
    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            if (cast(void*) value == null) {
                Value[] ret; return ret;
            }
            auto base = cast(HashMapBase*) value;
            auto rows = cast(HashMapRow*) &base[1];
            auto ret = new Value[](base.length);
            mut int k = 0;
            for (int i <- 0 .. base.capacity) {
                rows[i].case {
                    (:empty): continue;
                    (:gravestone): continue;
                    (Key key, Value value): {
                        ret[k] = value;
                        k += 1;
                    }
                }
                0;
            }
            // assert(k == base.length);
            if (k != base.length) { int* ip; *ip = *ip; }
            ret;
        });
        return context.compiler.astReturn(wrap(context, hashmap, expr), __HERE__);
    }

    Parameter[] params = [Parameter(false, "value", false, hashmap)];
    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_values", new Array(hashmap.value), params, &body_);

    return context.compiler.mkCall(fn, [base], __HERE__);
}

class ASTHashMap : ASTSymbol
{
    ASTSymbol key, value;

    Loc loc;

    this(this.key, this.value, this.loc) { }

    override Type compile(Context context) {
        auto key = beType(this.loc, this.key.compile(context));
        auto value = beType(this.loc, this.value.compile(context));
        return new HashMap(key=key, value=value);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTHashMap", __HERE__), [
                this.key.quote(quoter),
                this.value.quote(quoter),
                quoter.quoteLoc(loc)], __HERE__);
    }
}
