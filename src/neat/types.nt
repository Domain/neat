module neat.types;

import backend.base;
import helpers;
import neat.base;
import neat.hash;
import neat.parser;
import neat.parser_base;

class Character : Type
{
    BackendType type;
    this() { this.type = new BackendCharType; }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other)
    {
        return !!other.instanceOf(Character);
    }

    override string repr() { return "char"; }

    override string mangle() { return "char"; }

    override void hash(Hash hash) { hash.adds("char"); }
}

class UByte : Type
{
    BackendType type;

    this() { this.type = new BackendCharType; }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other)
    {
        return !!other.instanceOf(UByte);
    }

    override string repr() { return "ubyte"; }

    override string mangle() { return "ubyte"; }

    override void hash(Hash hash) { hash.adds("ubyte"); }
}

class Integer : Type
{
    BackendType type;
    this() { this.type = new BackendIntType; }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Integer); }

    override string repr() { return "int"; }

    override string mangle() { return "int"; }

    override void hash(Hash hash) { hash.adds("int"); }
}

class Long : Type
{
    BackendType type;
    this() { this.type = new BackendLongType; }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Long); }

    override string repr() { return "long"; }

    override string mangle() { return "long"; }

    override void hash(Hash hash) { hash.adds("long"); }
}

class Short : Type
{
    BackendType type;
    this() { this.type = new BackendShortType; }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Short); }

    override string repr() { return "short"; }

    override string mangle() { return "short"; }

    override void hash(Hash hash) { hash.adds("short"); }
}

class Float : Type
{
    BackendType type;
    this() { this.type = new BackendFloatType; }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Float); }

    override string repr() { return "float"; }

    override string mangle() { return "float"; }

    override void hash(Hash hash) { hash.adds("float"); }
}

class Double : Type
{
    BackendType type;
    this() { this.type = new BackendDoubleType; }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Double); }

    override string repr() { return "double"; }

    override string mangle() { return "double"; }

    override void hash(Hash hash) { hash.adds("double"); }
}

class ASTPointer : ASTSymbol
{
    ASTSymbol subType;

    Loc loc;

    this(this.subType, this.loc) { }

    override Type compile(Context context)
    {
        Type subType = beType(this.loc, this.subType.compile(context));

        return new Pointer(subType);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astPointer", [subType.quote(quoter)], loc);
    }

    override string repr() { return subType.repr ~ "*"; }
}

class ASTBasicType : ASTSymbol
{
    string name;

    Loc loc;

    this(this.name, this.loc) {
        assert(name.length > 0);
    }

    override Type compile(Context context)
    {
        if (name == "int") return new Integer;
        if (name == "long") return new Long;
        if (name == "short") return new Short;
        if (name == "char") return new Character;
        if (name == "ubyte") return new UByte;
        if (name == "void") return new Void;
        if (name == "float") return new Float;
        if (name == "double") return new Double;

        this.loc.assert2s(false, this.name ~ " is not a basic type");
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astBasicType", [quoter.compiler.astStringLiteral(name, loc)], loc);
    }

    override string repr() { return this.name; }
}

class ASTTypeof : ASTSymbol
{
    ASTSymbol value;

    Loc loc;

    this(this.value, this.loc) { }

    override Type compile(Context context)
    {
        // right now, declarations in typeof() will be tracked in the stackframe and take up space,
        // even if they're never initialized.
        // TODO prevent this.
        auto value = beExpression2(this.value.compile(context), this.loc);
        return value.type;
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astTypeOf", [value.quote(quoter)], loc);
    }
}

// hook type parsing
class TypeMacroArgs : MacroArgs
{
    Parser parser;
    LexicalContext lexicalContext;
    ASTSymbol astType;
    this(this.parser, this.lexicalContext) {
        this.astType = null;
    }
    override bool done() { return !!this.astType; }
}

class ASTFunctionPointer : ASTSymbol
{
    ASTSymbol ret;

    ASTSymbol[] params;

    Loc loc;

    this(this.ret, this.params, this.loc) { }

    override Type compile(Context context)
    {
        Type ret = beType(this.loc, this.ret.compile(context));
        mut Parameter[] params;
        for (auto param <- this.params)
        {
            params ~= Parameter.fromType(beType(this.loc, param.compile(context)));
        }

        return new FunctionPointer(ret, params);
    }

    override ASTSymbol quote(Quoter quoter) {
        mut ASTSymbol[] quotedParams;
        for (auto param <- params)
            quotedParams ~= param.quote(quoter);
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTFunctionPointer", __HERE__), [
                this.ret.quote(quoter),
                quoter.compiler.astArrayLiteral(quotedParams, __HERE__),
                quoter.quoteLoc(this.loc)], __HERE__);
    }
}

class FunctionPointer : Type
{
    Type ret;

    Parameter[] params;

    this(this.ret, this.params) { }

    override BackendType emit(Platform platform)
    {
        auto params = new BackendType[](this.params.length);
        for (int i <- 0 .. this.params.length) params[i] = this.params[i].type.emit(platform);
        return new BackendFunctionPointerType(this.ret.emit(platform), params);
    }

    override bool same(Type other)
    {
        FunctionPointer otherPtr = other.instanceOf(FunctionPointer);
        if (!otherPtr) return false;
        if (!this.ret.same(otherPtr.ret)) return false;
        if (this.params.length != otherPtr.params.length) return false;
        for (int i <- 0 .. this.params.length)
            if (!this.params[i].type.same(otherPtr.params[i].type)) return false;
        return true;
    }

    override string repr() {
        mut string ret = this.ret.repr ~ "(";
        for (int i <- 0 .. this.params.length) {
            if (i) ret ~= ", ";
            ret ~= this.params[i].type.repr;
            if (this.params[i].name.length > 0)
                ret ~= " " ~ this.params[i].name;
        }
        return ret ~ ")";
    }

    override string mangle() {
        // return "fp_" ~ this.ret.repr ~ "_" ~ this.params.map!repr.join("_");
        mut string ret = "fp_" ~ this.ret.repr;
        for (int i <- 0 .. this.params.length)
            ret ~= "_" ~ this.params[i].type.mangle;
        return ret;
    }

    override void hash(Hash hash) {
        hash.adds("funcptr");
        ret.hash(hash);
        hash.addl(params.length);
        for (int i <- 0 .. params.length)
            params[i].type.hash(hash);
    }
}

class ASTNestedFunctionPointer : ASTSymbol
{
    ASTSymbol ret;

    ASTSymbol[] params;

    Loc loc;

    this(this.ret, this.params, this.loc) { }

    override Type compile(Context context)
    {
        Type ret = beType(loc, this.ret.compile(context));
        mut Type[] params;
        for (auto arg <- this.params)
        {
            params ~= beType(this.loc, arg.compile(context));
        }

        return new NestedFunctionPointer(ret, params);
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTNestedFunctionPointer'!"); assert(false); }
}

/**
 * { void *base; void *data; Ret(Args...) funcptr; }
 * base is held in reserve for when we reference count delegates
 */
class NestedFunctionPointer : Type
{
    Type ret;

    Type[] params;

    this(this.ret, this.params) { }

    override BackendType emit(Platform platform)
    {
        auto params = new BackendType[](this.params.length + 1);
        params[0] = platform.voidp;
        for (int i <- 0 .. this.params.length) params[i + 1] = this.params[i].emit(platform);
        auto fp = new BackendFunctionPointerType(this.ret.emit(platform), params);
        return new BackendStructType([platform.voidp, platform.voidp, fp]);
    }

    override bool same(Type other)
    {
        NestedFunctionPointer otherPtr = other.instanceOf(NestedFunctionPointer);
        if (!otherPtr) return false;
        if (!this.ret.same(otherPtr.ret)) return false;
        if (this.params.length != otherPtr.params.length) return false;
        for (int i <- 0 .. this.params.length)
            if (!this.params[i].same(otherPtr.params[i])) return false;
        return true;
    }

    override string repr() {
        mut string ret = this.ret.repr ~ " delegate(";
        for (int i <- 0 .. this.params.length) {
            if (i) ret ~= ", ";
            ret ~= this.params[i].repr;
        }
        return ret ~ ")";
    }

    override string mangle() {
        // return "fp_" ~ this.ret.repr ~ "_" ~ this.params.map!repr.join("_");
        mut string ret = "dg_" ~ this.ret.repr;
        for (auto param <- this.params)
            ret ~= "_" ~ param.mangle;
        return ret;
    }

    override void hash(Hash hash) {
        hash.adds("dgptr");
        ret.hash(hash);
        hash.addl(params.length);
        for (auto param <- this.params)
            param.hash(hash);
    }
}

Type nativeWordType(Platform platform)
{
    BackendType type = platform.nativeWordType;
    if (type.instanceOf(BackendIntType)) return new Integer;
    if (type.instanceOf(BackendLongType)) return new Long;
    assert(false);
}
