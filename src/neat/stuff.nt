// TODO distribute into more appropriate modules
module neat.stuff;

macro import neat.macros.hash;
macro import neat.macros.listcomprehension;
macro import neat.macros.once;
macro import neat.macros.quasiquoting;

import backend.base;
import helpers;
import neat.array;
import neat.base;
import neat.class_;
import neat.decl;
import neat.either;
import neat.enums;
import neat.expr;
import neat.formatstring;
import neat.function_;
import neat.hash;
import neat.hashmap;
import neat.parser;
import neat.parser_base;
import neat.statements;
import neat.struct_;
import neat.tuples;
import neat.types;
import neat.unittest_;
import neat.vectors;
import neat.with_;

// TODO clear all this up
class DefineClassIntf : FinishedSymbol
{
    (Class | Intf) obj;

    this(this.obj) { }

    override void emit(Generator generator)
    {
        obj.case {
            Class class_: class_.define(generator);
            Intf intf: intf.define(generator);
        }
    }

    override void hash(Hash hash)
    {
        this.obj.case {
            Class class_: {
                // FIXME nested function mangling
                void mangle1(typeof(class_.vtable[0]) entry) {
                    entry.case {
                        ClassMethod method: hash.adds(method.mangle);
                        (:baseOffset, size_t offs): hash.addl(offs);
                    }
                }
                // only the actual vtable symbol, the methods are also hashed separately
                [mangle1(method) for method in class_.vtable];
            }
            Intf intf: {
                void mangle2(typeof(intf.vtable[0]) entry) {
                    entry.case {
                        IntfMethod method: hash.adds(method.mangle);
                        (:baseOffset): hash.adds("baseOffset");
                    }
                }
                // only the actual vtable symbol, the methods are also hashed separately
                [mangle2(method) for method in intf.vtable];
            }
        }
    }
}

ASTSymbol parseType(Parser parser, LexicalContext lexicalContext)
{
    mut ASTSymbol current = parser.parseLeafType(lexicalContext);
    if (!current) return null;
    while (true)
    {
        auto loc = parser.loc;
        if (parser.accept("*"))
        {
            current = new ASTPointer(current, loc);
            continue;
        }
        parser.begin;
        string identifier = parser.parseIdentifier;
        if (identifier == "function" || identifier == "delegate")
        {
            parser.expect("(");
            mut ASTSymbol[] args;
            while (!parser.accept(")"))
            {
                if (args.length)
                {
                    if (!parser.accept(","))
                    {
                        parser.fail("',' or ')' expected");
                    }
                }
                ASTSymbol argType = parser.parseType(lexicalContext);
                assert(!!argType);

                args ~= argType;
            }
            parser.commit;
            if (identifier == "function")
                current = new ASTFunctionPointer(current, args, loc);
            else
                current = new ASTNestedFunctionPointer(current, args, loc);
            continue;
        }
        parser.revert;
        parser.begin;
        if (parser.accept("[")) {
            if (parser.accept("]")) {
                parser.commit;

                current = new ASTArray(current, parser.loc);
                continue;
            }
            // hashmap? might be assignment intro
            auto keyType = parser.parseType(lexicalContext);
            if (!keyType || !parser.accept("]")) {
                parser.revert;
                return null;
            }
            parser.commit;
            current = new ASTHashMap(key=keyType, value=current, parser.loc);
            continue;
        }
        if (parser.accept("[") && parser.accept("]"))
        {
        }
        parser.revert;
        // what about templates that don't contain types? instead of duplicating this,
        // there should be a function to parse an ast symbol and that symbol should
        // be able to compile to a Type (Symbol).
        // But for now, templates only have types.
        // (this will also be needed to have things like Foo.Bar for nested types.)
        {
            parser.begin;
            auto instanceLoc = parser.loc;
            // TODO better way to exclude all the negated operators
            if (parser.accept("!") && !parser.accept("=") && !acceptIdentifier(parser, "is"))
            {
                auto templateArg = parser.parseType(lexicalContext);
                parser.assert_(!!templateArg, "template argument required");
                parser.commit;
                current = new ASTTemplateInstance(current, templateArg, instanceLoc);
                continue;
            }
            parser.revert;
        }
        return current;
    }
}

/**
 * Tuples:
 * - (int, float): int and float
 * - (int | float): int or float
 * - (int, int | int): (int and int) or int
 */
ASTSymbol parseTupleType(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    auto loc = parser.loc;
    if (!parser.accept("(")) {
        parser.revert;
        return null;
    }
    mut ASTEitherDeclEntry[] declEntries;
    mut (string name, Loc loc, ASTSymbol sym)[] members;
    mut bool fail = false;
    if (parser.accept("fail")) fail = true;
    void flush() {
        assert(members.length > 0);

        if (members.length == 1 && members[0].name == "") {
            declEntries ~= ASTEitherDeclEntry(members[0].loc, fail, members[0].sym);
        } else {
            declEntries ~= ASTEitherDeclEntry(
                members[0].loc,
                fail,
                new ASTTupleType(loc, [(a.name, a.sym) for a in members]));
        }
        members = [];
        fail = false;
    }
    while (!parser.accept(")"))
    {
        if (members.length) {
            mut bool tuplesep, eithersep;
            if (parser.accept(",")) tuplesep = true;
            else if (parser.accept("|")) eithersep = true;
            else {
                // be a bit lenient for (bla bla)
                if (members.length == 1) {
                    parser.revert;
                    return null;
                }
                loc.assert2s(false, "tuple: ',' or '|' expected");
            }
            if (eithersep) {
                flush;
                if (parser.accept("fail")) fail = true;
            }
        }
        auto loc = parser.loc;
        auto type = parser.parseType(lexicalContext);
        if (!type) {
            // (bla bla) still
            if (members.length <= 1) {
                parser.revert;
                return null;
            }
            loc.assert2s(false, "tuple: type expected");
        }
        string name = parser.parseIdentifier;
        members ~= (name, loc, type);
    }
    flush;
    parser.commit;
    if (declEntries.length == 1) return declEntries[0].symbol;
    return new ASTEitherDecl(declEntries);
}

ASTSymbol parseLeafType(Parser parser, LexicalContext lexicalContext)
{
    import std.string : startsWith;

    // FIXME parser.startLoc
    auto loc = parser.loc;
    if (parser.acceptIdentifier("nullable")) {
        auto next = parseLeafType(parser, lexicalContext);
        assert(!!next);
        return new ASTNullable(loc, next);
    }

    {
        auto typeMacroArgs = new TypeMacroArgs(parser, lexicalContext);
        lexicalContext.macroState.applyMacro(typeMacroArgs);
        if (typeMacroArgs.astType) return typeMacroArgs.astType;
    }

    // must be before any () parsing for types we may add.
    if (auto symbol = parser.parseTupleType(lexicalContext))
        return symbol;

    auto loc = parser.loc;
    parser.begin;

    if (parser.acceptIdentifier("Vector") && parser.accept("(")) {
        auto element = lexicalContext.compiler.parseType(parser, lexicalContext);
        parser.assert_(!!element, "element type expected");
        parser.expect(",");
        auto count = lexicalContext.compiler.parseExpression(parser, lexicalContext);
        parser.assert_(count && count.instanceOf(ASTIntLiteral), "integer expected");
        parser.expect(")");
        parser.commit;
        return new ASTVectorType(loc, element, count.instanceOf(ASTIntLiteral).value);
    }

    if (parser.accept("typeof"))
    {
        parser.expect("(");
        auto expr = lexicalContext.compiler.parseExpression(parser, lexicalContext);
        if (!expr) parser.fail("expression expected");
        parser.expect(")");
        parser.commit;
        return new ASTTypeof(expr, loc);
    }

    {
        string symbolIdentifier = parser.parseIdentifier2(":");
        if (symbolIdentifier.startsWith(":")) {
            parser.commit;
            return new ASTSymbolIdentifier(symbolIdentifier[1 .. $]);
        }
        parser.revert;
        parser.begin;
    }

    string identifier = parser.parseIdentifier;

    if (!identifier.length)
    {
        parser.revert;
        return null;
    }

    auto loc = __HERE__;
    if (identifier == "long")
    {
        parser.commit;
        return once new ASTBasicType("long", loc);
    }

    if (identifier == "int")
    {
        parser.commit;
        return once new ASTBasicType("int", loc);
    }

    if (identifier == "short")
    {
        parser.commit;
        return once new ASTBasicType("short", loc);
    }

    if (identifier == "char")
    {
        parser.commit;
        return once new ASTBasicType("char", loc);
    }

    if (identifier == "ubyte")
    {
        parser.commit;
        return once new ASTBasicType("ubyte", loc);
    }

    if (identifier == "void")
    {
        parser.commit;
        return once new ASTBasicType("void", loc);
    }

    if (identifier == "float")
    {
        parser.commit;
        return once new ASTBasicType("float", loc);
    }

    parser.commit;
    return lexicalContext.compiler.astIdentifier(identifier, parser.loc);
}

ASTParameter[] parseIdentifierList(Parser parser, LexicalContext lexicalContext)
{
    mut ASTParameter[] params;
    while (!parser.accept(")"))
    {
        if (params.length) {
            if (!parser.accept(",")) {
                parser.fail("',' or ')' expected");
            }
        }
        auto loc = parser.loc;
        mut bool mutable;
        if (parser.acceptIdentifier("mut")) mutable = true;
        ASTSymbol paramType = parser.parseType(lexicalContext);
        if (!paramType) {
            parser.fail("type expected");
        }
        string paramName = parser.parseIdentifier;
        params ~= ASTParameter(paramName, mutable, paramType, loc);
    }
    return params;
}

class FuncPtrCall : Expression
{
    Expression funcPtr;

    Expression[] args;

    Loc loc;

    this(this.funcPtr, this.args, this.loc) {
        this.type = this.funcPtr.type.instanceOf(FunctionPointer).ret;
    }

    override int emit(Generator output)
    {
        FunctionPointer type = this.funcPtr.type.instanceOf(FunctionPointer);

        this.loc.assert2s4(
            type.params.length == this.args.length,
            "expected ", ltoa(type.params.length), " args, not ", ltoa(this.args.length));

        int[] regs = new int[](this.args.length);
        for (int i <- 0 .. this.args.length)
        {
            regs[i] = this.args[i].emit(output);
        }
        return output.fun.callFuncPtr(
            type.emit(output.platform), this.funcPtr.emit(output), regs);
    }

    // we take over the returned value
    override ExprInfo info() { return ExprInfo(false, Ownership.gifted); }

    override void hash(Hash hash) {
        hash.adds("FuncPtrCall");
        funcPtr.hash(hash);
        hash.addl(args.length);
        [arg.hash(hash) for arg in args];
    }
}

class DelegateExpr : Expression
{
    Expression funcPtr;

    Expression thisPtr;

    this(this.funcPtr, this.thisPtr) {
        FunctionPointer type = this.funcPtr.type.instanceOf(FunctionPointer);

        // drop thisptr - implicit!
        assert(type.params.length >= 1);
        // TODO this smells.
        this.type = new NestedFunctionPointer(type.ret, [a.type for a in type.params[1 .. $]]);
    }

    override int emit(Generator output)
    {
        int thisReg = this.thisPtr.emit(output);
        int funcReg = this.funcPtr.emit(output);
        auto voidp = output.platform.voidp;
        auto thisType = this.type.emit(output.platform);
        int nullReg = output.fun.bitcast(output.fun.wordLiteral(output.platform, 0), voidp);
        return output.fun.structLiteral(thisType, [nullReg, thisReg, funcReg]);
    }

    override ExprInfo info() { return ExprInfo(false, Ownership.owned); }

    override void hash(Hash hash) { hash.adds("DelegateExpr"); this.funcPtr.hash(hash); this.thisPtr.hash(hash); }
}

class DelegateDataPtr : Expression
{
    Expression dg;

    this(this.dg) {
        this.type = once new Pointer(new Void);
    }

    override int emit(Generator output)
    {
        int reg = this.dg.emit(output);

        return output.fun.field(this.dg.type.emit(output.platform), reg, 1);
    }

    override ExprInfo info() { return ExprInfo(false, Ownership.owned); }

    override void hash(Hash hash) { hash.adds("DelegateDataPtr"); this.dg.hash(hash); }
}

class DelegateFuncPtr : Expression
{
    Expression dg;

    this(this.dg) {
        auto nestfp = this.dg.type.instanceOf(NestedFunctionPointer);
        assert(!!nestfp);
        auto params = [Parameter.fromType(once new Pointer(new Void))]
            ~ [Parameter.fromType(a) for a in nestfp.params];
        this.type = new FunctionPointer(nestfp.ret, params);
    }

    override int emit(Generator output)
    {
        int reg = this.dg.emit(output);

        return output.fun.field(this.dg.type.emit(output.platform), reg, 2);
    }

    override ExprInfo info() { return ExprInfo(false, Ownership.owned); }

    override void hash(Hash hash) { hash.adds("DelegateFuncPtr"); this.dg.hash(hash); }
}

/**
 * "Plain" call without lifetime handling.
 */
Expression plainCall(Context context, Symbol target, mut Expression[] args, Loc loc, bool isImplCall)
{
    if (auto fundecl = target.instanceOf(FunctionDeclaration))
    {
        args = [expectImplicitConvertTo(context, arg, fundecl.params[i].type, loc) for i, arg in args];
        return new Call(fundecl, args, loc);
    }
    if (ClassMethodPtr method = target.instanceOf(ClassMethodPtr))
    {
        if (auto funcptr = method.funcPtr.type.instanceOf(FunctionPointer)) {
            // this ptr
            if (args.length != funcptr.params.length - 1)
                loc.fail("wrong number of arguments: expected $(funcptr.params.length - 1) but got $(args.length)");
            args = [expectImplicitConvertTo(context, arg, funcptr.params[i+1].type, loc) for i, arg in args];
        } else {
            loc.fail("function reference or funcptr expected? but is '$(method.funcPtr.type.repr)'");
        }
        Expression doPtr(Expression thisPtr) {
            auto voidp = once new Pointer(new Void);
            mut Expression[] combinedArgs;
            combinedArgs ~= new PointerCast(voidp, thisPtr);
            combinedArgs ~= args;
            return new FuncPtrCall(method.funcPtr, combinedArgs, loc);
        }
        Expression doRef(Reference thisValue) {
            return doPtr(context.compiler.reference(thisValue));
        }
        if (method.valueIsPtr) {
            return context.compiler.exprWithTemporaryExpr(method.thisValue, &doPtr);
        } else if (auto ref_ = method.thisValue.instanceOf(Reference)) {
            auto ptr = context.compiler.reference(ref_);
            return context.compiler.exprWithTemporaryExpr(ptr, &doPtr);
        } else {
            return context.compiler.exprWithTemporary(method.thisValue, &doRef);
        }
    }
    if (isImplCall) return null;
    Expression expr = target.instanceOf(Expression);
    // TODO
    // auto funcptr = expr?.type.instanceOf(FunctionPointer);
    mut FunctionPointer funcptr;
    if (expr) funcptr = expr.type.instanceOf(FunctionPointer);
    if (expr && funcptr)
    {
        args = [expectImplicitConvertTo(context, arg, funcptr.params[i].type, loc) for i, arg in args];
        return new FuncPtrCall(expr, args, loc);
    }
    mut NestedFunctionPointer nestedfuncptr;
    if (expr) nestedfuncptr = expr.type.instanceOf(NestedFunctionPointer);
    if (expr && nestedfuncptr)
    {
        args = [expectImplicitConvertTo(context, arg, nestedfuncptr.params[i], loc) for i, arg in args];
        // TODO cache delegate
        auto funcPtr = new DelegateFuncPtr(expr);
        auto thisPtr = new DelegateDataPtr(expr);
        mut Expression[] combinedArgs;
        combinedArgs ~= thisPtr;
        combinedArgs ~= args;
        return new FuncPtrCall(funcPtr, combinedArgs, loc);
    }
    loc.assert2s(false, "unknown call target");
}

class WrapExpression : Expression
{
    Statement pre;
    Expression value;
    Statement post;

    this(this.pre, this.value, this.post) {
        this.type = value.type;
    }

    override int emit(Generator generator)
    {
        if (pre) pre.emit(generator);
        int result = value.emit(generator);
        if (post) post.emit(generator);
        return result;
    }

    override ExprInfo info() { return value.info; }

    override void hash(Hash hash) {
        hash.adds("WrapExpression");
        if (pre) pre.hash(hash);
        else hash.adds("null");
        value.hash(hash);
        if (post) post.hash(hash);
        else hash.adds("null");
    }
}

/**
 * This type is a bit risky.
 * Because result is returned after post() is called,
 * `WrapReference` can leak the location of a value that
 * has no references. As such, it should only be used when
 * `reference` doesn't yield an address managed by `pre`/`post`.
 */
class WrapReference : Reference
{
    Statement pre;
    Reference reference;
    Statement post;

    this(this.pre, this.reference, this.post) {
        this.type = reference.type;
    }

    override int emit(Generator output)
    {
        int reg = this.emitLocation(output);

        return output.fun.load(this.type.emit(output.platform), reg);
    }

    override int emitLocation(Generator output)
    {
        if (pre) pre.emit(output);
        int result = reference.emitLocation(output);
        if (post) post.emit(output);
        return result;
    }

    override ExprInfo info() { return reference.info; }

    override void hash(Hash hash) {
        hash.adds("WrapReference");
        if (pre) pre.hash(hash);
        else hash.adds("null");
        reference.hash(hash);
        if (post) post.hash(hash);
        else hash.adds("null");
    }
}

Expression call(Context context, ASTSymbol astTarget, ASTArgument[] astArgs, Loc loc, bool autoCall) {
    if (!autoCall) {
        auto callMacroArgs = new CallMacroArgs(astTarget, astArgs, context, loc);
        context.macroState.applyMacro(callMacroArgs);
        if (callMacroArgs.transformed) return callMacroArgs.transformed;

        /// Direct implementation of `foo.bar(baz)`.
        /// Reduces need for `LateSymbol`.
        if (auto memberAccess = astTarget.instanceOf(ASTMemberBase)) {
            auto base = memberAccess.base.compile(context);
            if (auto type = base.instanceOf(Type)) {
                auto protection = type.protectionAt(context.namespace);
                auto ret = type.callMember(
                    context, null, memberAccess.member, astArgs, protection, memberAccess.loc);
                if (ret) return ret;
            } else if (auto baseExpr = base.isExpressionImplCall(context, loc)) {
                auto protection = baseExpr.type.protectionAt(context.namespace);
                auto ret = baseExpr.type.callMember(
                    context, baseExpr, memberAccess.member, astArgs, protection, memberAccess.loc);
                if (ret) return ret;
            }
        }
    }

    mut auto target = astTarget.compile(context);

    if (!autoCall) {
        if (auto type_ = target.instanceOf(Type)) {
            auto ret = type_.call(context, loc, astArgs);
            if (ret) return ret;
        }
    }

    if (auto fundecl = target.instanceOf(FunctionDeclaration)) {
        validateCall(fundecl.params, astArgs, loc);
    }
    if (auto method = target.instanceOf(ClassMethodPtr)) {
        if (auto funcptr = method.funcPtr.type.instanceOf(FunctionPointer)) {
            // skip "this"
            validateCall(funcptr.params[1 .. $], astArgs, loc);
        }
    }

    auto args = [
        beExpression3(context, arg.sym.compile(context), loc)
        for arg in astArgs];

    mut Statement pre, post;
    Expression[] args_ = new Expression[](args.length);
    for (int i <- 0 .. args.length) {
        mut Expression arg = args[i];
        // we must free arg after the call, so make a copy
        if (arg.info.ownership == Ownership.gifted) {
            auto temp = new PairedTemporary(arg.type, Ownership.owned);
            // no copyInto() because we're taking ownership.
            auto set = new InitializeTemporaryStatement(temp, arg);
            if (auto destructor = arg.type.endLifetime(context, temp)) {
                pre = sequence(pre, set);
                post = sequence(destructor, post);
                arg = temp;
            }
        }
        args_[i] = arg;
    }
    auto args = args_;

    if (LateSymbol lateSym = target.instanceOf(LateSymbol)) {
        // completely bypass plainCall with a FuncPtrCall
        Expression do1(Expression baseExpr) {
            auto funcPtr = lateSym.resolve(context, baseExpr);
            mut Expression[] args = args;
            if (auto funcptr = funcPtr.type.instanceOf(FunctionPointer)) {
                validateCall(funcptr.params[1 .. $], astArgs, loc);
                args = [expectImplicitConvertTo(context, arg, funcptr.params[i+1].type, loc) for i, arg in args];
            } else {
                loc.fail("function reference or funcptr expected? but is '$(funcPtr.type.repr)'");
            }
            auto voidp = once new Pointer(new Void);
            mut Expression[] combinedArgs;
            combinedArgs ~= lateSym.patchContext(context, new PointerCast(voidp, baseExpr));
            combinedArgs ~= args;
            return new FuncPtrCall(funcPtr, combinedArgs, loc);
        }
        Expression do2(Expression baseExpr)
        {
            return context.compiler.exprWithTemporaryExpr(baseExpr, &do1);
        }
        auto fpCall = context.compiler.consume(context, lateSym.baseExpr, &do2);

        return new WrapExpression(pre, fpCall, post);
    }

    ClassMethodPtr method = target.instanceOf(ClassMethodPtr);
    if (method && method.thisValue.info.ownership == Ownership.gifted) { // foo().bar()
        mut Statement setRef;
        void doRef(Reference tempThis) {
            if (Statement cleanupThis = method.thisValue.type.endLifetime(context, tempThis))
            {
                pre = sequence(pre, setRef);
                post = sequence(cleanupThis, post);
                target = new ClassMethodPtr(method.funcPtr, tempThis, method.valueIsPtr);
            }
        }
        if (auto ref_ = method.thisValue.instanceOf(Reference)) doRef(ref_);
        else {
            // create reference for endLifetime call
            auto tempThis = new PairedTemporary(method.thisValue.type, Ownership.gifted);
            setRef = new InitializeTemporaryStatement(tempThis, method.thisValue);
            doRef(tempThis);
        }
    }
    auto callResult = plainCall(context, target, args, loc, autoCall);
    if (!callResult) return null;
    return new WrapExpression(pre, callResult, post);
}

/**
 * The sort of thing that can be implicitly called.
 * Shortcuts the call() logic to speed up `isExpressionImplCall`.
 */
bool previewCanCallImplicit(Symbol target) {
    return target.instanceOf(FunctionDeclaration)
        || target.instanceOf(ClassMethodPtr)
        || target.instanceOf(LateSymbol);
}

class ASTCall : ASTSymbol
{
    ASTSymbol target;

    ASTArgument[] args;

    Loc loc;

    this(this.target, this.args, this.loc) { }

    override Expression compile(Context context)
    {
        // FIXME this goes better in call()
        if (auto astMemberAccess = this.target.instanceOf(ASTMember))
        {
            /**
             * UFCS:
             * Syntax is foo.bar(baz).
             * Check if "foo" has a property "bar".
             * If not, call bar(foo, baz) instead.
             */
            auto base = astMemberAccess.base.compile(context).isExpressionImplCall(context, this.loc);
            if (base) {
                auto member = accessMember(context, base, astMemberAccess.member, astMemberAccess.loc, true);
                if (!member) {
                    auto stackframe = once new ReferenceExpression(new StackFrame(new Void));
                    auto callable = context.namespace.lookup(astMemberAccess.member, context, this.loc, stackframe);
                    // if `foo` has no `bar` but there is a `bar` symbol:
                    if (callable) {
                        // rewrite foo.bar(baz) to bar(foo, baz)
                        auto target = new ASTIdentifier(astMemberAccess.member, false, astMemberAccess.loc);
                        auto args = [ASTArgument(astMemberAccess.base, "")] ~ this.args;
                        return (new ASTCall(target, args, this.loc)).compile(context);
                    }
                }
            }
        }

        return call(context, this.target, this.args, this.loc, false);
    }

    override ASTSymbol quote(Quoter quoter) {
        auto args = [arg.sym.quote(quoter) for arg in this.args];
        return quoter.compilerCall("astCall", [
            this.target.quote(quoter),
            quoter.compiler.astArrayLiteral(args, this.loc)
        ], this.loc);
    }
}

ASTArgument[] parseArgumentList(Parser parser, LexicalContext lexicalContext)
{
    mut ASTArgument[] args;
    while (!parser.accept(")"))
    {
        if (args.length > 0)
            parser.expect(",");
        // foo(a, b, c, )
        if (parser.accept(")")) break;

        mut string name;
        parser.begin;
        string n = parser.parseIdentifier;
        if (n.length > 0 && parser.acceptButNot("=", "==")) {
            name = n;
            parser.commit;
        } else parser.revert;
        ASTSymbol arg = parser.parseExpression(lexicalContext);
        args ~= ASTArgument(arg, name);
    }
    return args;
}

ASTCall parseCall(Parser parser, LexicalContext lexicalContext, ASTSymbol base)
{
    parser.begin;
    if (!parser.accept("("))
    {
        parser.revert;
        return null;
    }
    mut ASTArgument[] args = parser.parseArgumentList(lexicalContext);
    parser.commit;
    return new ASTCall(base, args, parser.loc);
}

class ASTIndexAccess : ASTSymbol
{
    ASTSymbol base;

    ASTSymbol index;

    Loc loc;

    this(this.base, this.index, this.loc) { }

    override Expression compile(Context context)
    {
        auto base = beExpression3(context, this.base.compile(context), this.loc);
        bool saveIndexValue = base.info.ownership == Ownership.gifted;

        Expression do_(Reference base) {
            mut Expression indexExpr;
            mut Expression ptrBase;

            auto type = base.type;
            if (Array array_ = type.instanceOf(Array)) {
                auto context = context.withNamespace(
                    context.compiler.exprAlias(context.namespace, "__array", base));

                indexExpr = beExpression3(context, this.index.compile(context), this.loc);
                // TODO bounds check
                ptrBase = new ArrayPointer(array_.elementType, base);
            } else if (type.instanceOf(Pointer)) {
                indexExpr = beExpression3(context, this.index.compile(context), this.loc);
                ptrBase = base;
            } else {
                indexExpr = beExpression3(context, this.index.compile(context), this.loc);
                if (auto result = type.index(context, base, indexExpr, this.loc)) {
                    return result;
                } else {
                    this.loc.fail("index access requires pointer, array or hashmap");
                }
            }

            indexExpr = expectImplicitConvertTo(context, indexExpr, context.nativeWordType, this.loc);

            assert(indexExpr.type.same(context.nativeWordType));
            auto deref = new Dereference(new PointerOffset(ptrBase, indexExpr));
            if (saveIndexValue)
            {
                // This is a very silly idiom.
                auto temp = new PairedTemporary(deref.type, Ownership.gifted);
                auto init = new UninitializeTemporaryStatement(temp);
                mut auto copyDeref = deref.type.copyInto(context, temp, deref);
                if (!copyDeref) copyDeref = new AssignStatement(temp, deref);
                return context.compiler.wrap(sequence(init, copyDeref), temp, null);
            }
            return deref;
        }
        return context.compiler.consumeTemporary(context, allowRefReturn=!saveIndexValue, mayUnwind=false, base, &do_);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astIndex", [base.quote(quoter), index.quote(quoter)], loc);
    }
}

class ASTArraySlice : ASTSymbol
{
    ASTSymbol array;

    ASTSymbol lower;

    ASTSymbol upper;

    Loc loc;

    this(this.array, this.lower, this.upper, this.loc) { }

    override Symbol compile(Context context)
    {
        Type sizeT = context.nativeWordType;
        auto array = beExpression3(context, this.array.compile(context), this.loc);

        Expression do_(Reference array)
        {
            auto context = context.withNamespace(
                context.compiler.exprAlias(context.namespace, "__array", array));

            return new ArraySlice(
                array,
                expectImplicitConvertTo(
                    context, beExpression3(context, this.lower.compile(context), this.loc), sizeT, this.loc),
                expectImplicitConvertTo(
                    context, beExpression3(context, this.upper.compile(context), this.loc), sizeT, this.loc),
                this.loc);
        }
        return context.compiler.consumeTemporary(context, false, false, array, &do_);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astArraySlice", [
            this.array.quote(quoter),
            this.lower.quote(quoter),
            this.upper.quote(quoter)], loc);
    }
}

ASTSymbol parseIndex(Parser parser, LexicalContext lexicalContext, ASTSymbol base)
{
    auto loc = parser.loc;
    parser.begin;
    if (!parser.accept("["))
    {
        parser.revert;
        return null;
    }
    ASTSymbol index = parseExpression(parser, lexicalContext);
    loc.assert2s(!!index, "index expected");
    if (parser.accept(".."))
    {
        ASTSymbol lower = index;
        ASTSymbol upper = parseExpression(parser, lexicalContext);
        parser.assert_(!!upper, "slice upper bound expected");
        parser.expect("]");
        parser.commit;
        return new ASTArraySlice(base, lower, upper, parser.loc);
    }
    parser.expect("]");
    parser.commit;
    return new ASTIndexAccess(base, index, parser.loc);
}

Symbol accessMemberWithLifetime(Context context, Symbol base, string member, Loc loc, bool allowUndefined)
{
    if (base.instanceOf(Type))
    {
        return accessMember(context, base, member, loc, allowUndefined);
    }
    if (auto super_ = base.instanceOf(Super))
    {
        return super_.lookup(context, member, loc);
    }
    Expression baseExpr = beExpression3(context, base, loc);
    Type baseType = baseExpr.type;

    if (baseType.instanceOf(Pointer)) {
        // cannot trace lifetimes through pointers (TODO?)
        return accessMember(context, base, member, loc, allowUndefined);
    }

    // speculative lookup :-(
    // TODO exprWithTemporary that handles symbol returns
    auto ret = accessMember(context, baseExpr, member, loc, allowUndefined);
    if (!ret || !ret.instanceOf(Expression)) return ret;
    /**
     * - temporize lhs
     * - copyInto member
     * - destroy lhs
     */
    Expression do_(Reference baseExpr) {
        auto ret = accessMember(context, baseExpr, member, loc, allowUndefined).instanceOf(Expression);
        auto tempRet = new PairedTemporary(ret.type, Ownership.gifted); // temporary since we copyInto
        auto initTemp = new UninitializeTemporaryStatement(tempRet);
        mut auto copyTemp = ret.type.copyInto(context, tempRet, ret);
        if (!copyTemp) copyTemp = new AssignStatement(tempRet, ret);

        Statement endLifetime = baseType.endLifetime(context, baseExpr);

        return new WrapExpression(sequence(initTemp, copyTemp), tempRet, endLifetime);
    }
    // SHIT
    // we need a reference on the lhs for assignments
    // that's fine if it's a struct, but for a class? always force nontemporary, because it's contained in the
    // class lifetime?
    // TODO handle member access of temporaries
    // for instance with an ExprReturnType analogous to StatementReturnType, that gathers temp destructors

    // if lhs is nontemp, just use StructReference
    if (baseExpr.info.ownership != Ownership.gifted) {
        return accessMember(context, baseExpr, member, loc, allowUndefined)
            .instanceOf(Expression);
    }
    return context.compiler.exprWithTemporary(baseExpr, &do_);
}

Symbol accessMember(Context context, Symbol base, string member, Loc loc, bool allowUndefined) {
    if (auto type = base.instanceOf(Type)) {
        auto protection = type.protectionAt(context.namespace);
        return type.accessMember(loc, context, null, member, protection);
    }

    loc.assert2s(!!base.instanceOf(Expression), "expected expression for member access");
    mut Expression baseExpr = beExpression3(context, base, loc);

    while (baseExpr.type.instanceOf(Pointer)) {
        baseExpr = new Dereference(baseExpr);
    }

    auto protection = baseExpr.type.protectionAt(context.namespace);
    if (auto field = baseExpr.type.accessMember(loc, context, baseExpr, member, protection))
        return field;

    if (allowUndefined) return null;
    loc.assert2s4(false, baseExpr.type.repr, ": no such field '", member, "'");
}

class ASTMember : ASTMemberBase
{
    override Symbol compile(Context context)
    {
        // UFCS part two
        // support `foo.bar` as implicit `bar(foo)` if `foo` has no member `bar`
        // TODO merge with ASTCall UFCS code (they should be the same)
        if (auto base = this.base.compile(context).isExpressionImplCall(context, this.loc)) {
            auto member = accessMember(context, base, this.member, this.loc, true);
            if (!member) {
                auto stackframe = once new ReferenceExpression(new StackFrame(new Void));
                auto callable = context.namespace.lookup(this.member, context, this.loc, stackframe);
                // if `foo` has no `bar` but there is a `bar` symbol:
                if (callable) {
                    auto target = new ASTIdentifier(this.member, false, this.loc);
                    // bar(foo)
                    auto args = [ASTArgument(this.base, "")];
                    return (new ASTCall(target, args, this.loc)).compile(context);
                }
            }
        }

        if (auto ret = accessMemberWithLifetime(context, this.base.compile(context), this.member, this.loc, false))
        {
            return ret;
        }
        this.loc.fail("Member '$(this.member)' not found");
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astMember", [
            this.base.quote(quoter),
            quoter.compiler.astStringLiteral(this.member, loc)], loc);
    }
}

ASTMember parseMember(Parser parser, ASTSymbol base)
{
    parser.begin;
    if (parser.accept("..") || !parser.accept(".")) // don't accept '..'
    {
        parser.revert;
        return null;
    }
    string name = parser.parseIdentifier;
    parser.assert_(name.length > 0, "member expected");
    parser.commit;
    return new ASTMember(base, name, parser.loc);
}

ASTSymbol parseTemplateInstantiation(Parser parser, LexicalContext lexicalContext, ASTSymbol base)
{
    parser.begin;
    auto instanceLoc = parser.loc;
    // TODO better way to exclude !operator cases
    if (!parser.accept("!") || parser.accept("=") || acceptIdentifier(parser, "is")) {
        parser.revert;
        return null;
    }
    auto templateArg = parser.parseType(lexicalContext);
    parser.assert_(!!templateArg, "template argument required");
    parser.commit;
    return new ASTTemplateInstance(base, templateArg, instanceLoc);
}

ASTSymbol parseProperties(Parser parser, LexicalContext lexicalContext, mut ASTSymbol current)
{
    while (true)
    {
        if (ASTSymbol instanceOf = parser.parseInstanceOf(lexicalContext, current))
        {
            current = instanceOf;
            continue;
        }
        auto macroArgs = new ParsePropertyArgs(parser, lexicalContext, current);

        lexicalContext.macroState.applyMacro(macroArgs);
        if (macroArgs.result)
        {
            current = macroArgs.result;
            continue;
        }

        if (ASTSymbol caseExpr = parser.parseEitherCaseExpr(lexicalContext, current))
        {
            current = caseExpr;
            continue;
        }
        if (ASTSymbol call = parser.parseCall(lexicalContext, current))
        {
            current = call;
            continue;
        }
        if (ASTSymbol memberAccess = parser.parseMember(current))
        {
            current = memberAccess;
            continue;
        }
        if (ASTSymbol indexAccess = parser.parseIndex(lexicalContext, current))
        {
            current = indexAccess;
            continue;
        }
        if (ASTSymbol templateInstance = parser.parseTemplateInstantiation(lexicalContext, current))
        {
            current = templateInstance;
            continue;
        }
        return current;
    }
}

class ASTDereference : ASTSymbol
{
    ASTSymbol base;

    Loc loc;

    this(this.base, this.loc) { }

    override Symbol compile(Context context)
    {
        return new Dereference(beExpression(this.base.compile(context)));
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall(
            "astDereference", [this.base.quote(quoter)], loc);
    }
}

class ASTReference : ASTSymbol
{
    ASTSymbol base;

    Loc loc;

    this(this.base, this.loc) { }

    override Expression compile(Context context)
    {
        auto base = this.base.compile(context);
        // &function
        if (Function fun = base.instanceOf(Function))
            return new FunctionReference(fun);
        if (LateSymbol lateSym = base.instanceOf(LateSymbol)) {
            Expression do1(Expression baseExpr) {
                auto funcPtr = lateSym.resolve(context, baseExpr);
                auto voidp = once new Pointer(new Void);
                auto contextPtr = lateSym.patchContext(context, new PointerCast(voidp, baseExpr));
                return new DelegateExpr(funcPtr, contextPtr);
            }
            Expression do2(Expression baseExpr)
            {
                return context.compiler.exprWithTemporaryExpr(baseExpr, &do1);
            }
            return context.compiler.consume(context, lateSym.baseExpr, &do2);
        }
        if (auto nestfn = base.instanceOf(ClassMethodPtr)) {
            Expression doExpr(Expression thisPtr) {
                return new DelegateExpr(nestfn.funcPtr, thisPtr);
            }
            Expression doRef(Reference thisValue) {
                return doExpr(context.compiler.reference(thisValue));
            }
            if (nestfn.valueIsPtr) {
                return context.compiler.exprWithTemporaryExpr(nestfn.thisValue, &doExpr);
            } else {
                return context.compiler.exprWithTemporary(nestfn.thisValue, &doRef);
            }
        }
        Expression baseExpression = beExpression2(base, this.loc);

        loc.assert2s(!!baseExpression.instanceOf(Reference), "&expr: expr not a reference");

        return new ReferenceExpression(baseExpression.instanceOf(Reference));
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall(
            "astReference", [this.base.quote(quoter)], loc);
    }
}

ASTSymbol parseExpressionLeaf(Parser parser, LexicalContext lexicalContext)
{
    auto loc = parser.loc;
    if (parser.accept("*"))
    {
        ASTSymbol next = parseExpressionLeaf(parser, lexicalContext);

        assert(!!next);
        return new ASTDereference(next, loc);
    }
    if (parser.accept("&"))
    {
        ASTSymbol next = parseExpressionLeaf(parser, lexicalContext);

        assert(!!next);
        return new ASTReference(next, loc);
    }
    if (parser.acceptIdentifier("new"))
    {
        ASTSymbol type = parser.parseType(lexicalContext);
        if (!type) {
            parser.fail("type expected");
        }
        mut ASTArgument[] args;
        if (parser.accept("("))
        {
            args = parseArgumentList(parser, lexicalContext);
        }

        return new ASTNewExpression(type, args, loc);
    }
    if (parser.acceptIdentifier("sizeof"))
    {
        parser.expect("(");
        parser.begin;
        mut auto sym = lexicalContext.compiler.parseType(parser, lexicalContext);
        if (!sym || !parser.accept(")")) {
            parser.revert;
            parser.begin;
            sym = lexicalContext.compiler.parseExpression(parser, lexicalContext);
            if (!sym) parser.fail("expression expected");
            parser.expect(")");
        }
        parser.commit;

        return new ASTSizeOf(sym);
    }
    if (parser.acceptIdentifier("cast"))
    {
        parser.expect("(");
        ASTSymbol target = parser.parseType(lexicalContext);
        if (!target) {
            parser.fail("type expected");
        }
        parser.expect(")");
        ASTSymbol value = parseExpressionLeaf(parser, lexicalContext);

        return new ASTCastExpr(target, value, loc);
    }
    if (auto tuple = parser.parseTupleExpression(lexicalContext))
    {
        return tuple;
    }
    if (parser.accept("!"))
    {
        ASTSymbol next = parser.parseExpressionLeaf(lexicalContext);

        assert(!!next);
        return new ASTNegation(next, loc);
    }
    if (parser.acceptButNot("-", "--"))
    {
        ASTSymbol next = parser.parseExpressionLeaf(lexicalContext);

        loc.assert2s(!!next, "expression expected for negation");
        return new ASTBinaryOp("-", new ASTIntLiteral(0, loc), next, loc);
    }
    if (ASTSymbol expr = parser.parseExpressionIncDec(lexicalContext))
        return parseProperties(parser, lexicalContext, expr);
    return null;
}

ASTSymbol parseStringLiteral(Parser parser, LexicalContext lexicalContext, string endMarker)
{
    auto loc = parser.loc;
    mut string current;
    mut ASTSymbol[] parts;
    void flush() {
        if (current != "") parts ~= new ASTStringLiteral(current, loc);
        current = "";
    }
    while (parser.text.length < endMarker.length || parser.text[0 .. endMarker.length] != endMarker)
    {
        if (parser.text.length == 0) {
            parser.fail("expected end of string, got end of file");
        }
        string ch = parser.text[0 .. 1];
        parser.drop(1);
        if (ch == "\\") {
            string ctl = parser.text[0 .. 1];
            parser.dropOneCharNonNewline(1);
            if (ctl == "r") {
                current ~= "\r";
            } else if (ctl == "\$") {
                current ~= "\$";
            } else if (ctl == "n") {
                current ~= "\n";
            } else if (ctl == "t") {
                current ~= "\t";
            } else if (ctl == "\"") {
                current ~= "\"";
            } else if (ctl == "\\") {
                current ~= "\\";
            } else if (ctl == "0") {
                current ~= "\x00"; // TODO \0
            } else if (ctl == "x") {
                char ch1 = parser.text[0], ch2 = parser.text[1];
                int decodeHex(char ch) {
                    if (ch >= "0"[0] && ch <= "9"[0])
                        return cast(int) (ch - "0"[0]);
                    if (ch >= "a"[0] && ch <= "F"[0])
                        return cast(int) ch + 10 - cast(int) "a"[0];
                    if (ch >= "A"[0] && ch <= "F"[0])
                        return cast(int) ch + 10 - cast(int) "A"[0];
                    print("Unknown hex digit '" ~ ch ~ "'");
                    assert(false);
                }
                char ord = cast(char) (decodeHex(ch1) * 16 + decodeHex(ch2));
                current ~= ord;
                parser.drop(2);
            } else {
                print("Unknown control sequence \\$ctl");
                assert(false);
            }
        } else if (ch == "\$") {
            flush;
            if (parser.accept("(")) {
                ASTSymbol expr = parser.parseExpression(lexicalContext);
                loc.assert2s(!!expr, "Expression expected.");
                parser.expect(")");
                parts ~= expr;
            } else {
                auto varLoc = parser.loc;
                auto var = parser.parseIdentifier;
                loc.assert2s(var != "", "Identifier expected.");
                parts ~= new ASTIdentifier(var, moduleLevel=false, varLoc);
            }
        } else {
            current ~= ch;
        }
    }
    if (!parser.accept(endMarker))
    {
        parser.fail("this should never happen");
    }
    flush;
    if (parts.length == 0) return new ASTStringLiteral("", loc);
    if (parts.length == 1) {
        if (auto literal = parts[0].instanceOf(ASTStringLiteral))
            return literal;
    }

    return new ASTFormatString(loc, parts);
}

// i++, i--, ++i, --i
class ASTPrePostIncDec : ASTSymbol
{
    Loc loc;

    ASTSymbol target;

    ((:pre | :post) when, (:inc | :dec) what) op;

    this(this.loc, this.op, this.target) { }

    override Symbol compile(Context context) {
        auto target = target.compile(context).beExpressionImplCall(context, loc);
        loc.assert2s5(
            !!target.instanceOf(Reference),
            "cannot ", op.when.case((:pre): "pre", (:post): "post"), "-",
            op.what.case((:inc): "inc", (:dec): "dec"), "rement non-reference target");
        Expression do_(Expression refptr) {
            auto context = context.withNamespace(
                context.compiler.exprAlias(context.namespace, "ref_", context.compiler.dereference(refptr)));

            return op.when.case(
                (:pre): op.what.case(
                    (:inc): context.compiler.$expr ({ ref_ += 1; ref_; }),
                    (:dec): context.compiler.$expr ({ ref_ -= 1; ref_; })
                ),
                (:post): op.what.case(
                    (:inc): context.compiler.$expr ({ auto ret = ref_; ref_ += 1; ret; }),
                    (:dec): context.compiler.$expr ({ auto ret = ref_; ref_ -= 1; ret; })))
                .compile(context).beExpression;
        }
        auto refptr = context.compiler.reference(target.instanceOf(Reference));
        return context.compiler.exprWithTemporaryExpr(refptr, &do_);
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTPreOp'!"); assert(false); }
    override string repr() {
        auto opText = op.what.case((:inc): "++", (:dec): "--");
        return op.when.case((:pre): opText ~ target.repr, (:post): target.repr ~ opText);
    }
}

ASTSymbol parseExpressionIncDec(Parser parser, LexicalContext lexicalContext)
{
    mut (:inc | :dec | :none) pre = :none, post = :none;
    auto loc1 = parser.loc;
    if (parser.accept("++")) pre = :inc;
    else if (parser.accept("--")) pre = :dec;
    mut auto ret = parseExpressionBase(parser, lexicalContext);
    if (!ret) return null;
    auto loc2 = parser.loc;
    if (parser.accept("++")) post = :inc;
    else if (parser.accept("--")) post = :dec;
    pre.case {
        (:inc): ret = new ASTPrePostIncDec(loc1, (:pre, :inc), ret);
        (:dec): ret = new ASTPrePostIncDec(loc1, (:pre, :dec), ret);
        (:none): {}
    }
    post.case {
        (:inc): ret = new ASTPrePostIncDec(loc2, (:post, :inc), ret);
        (:dec): ret = new ASTPrePostIncDec(loc2, (:post, :dec), ret);
        (:none): {}
    }
    return ret;
}

// the AST of a Loc literal recreating the passed loc.
ASTSymbol hereExpr(Loc loc, LexicalContext lexicalContext)
{
    with (lexicalContext.compiler)
        return astCall(
            astIdentifier("Loc", __HERE__), [
                astStringLiteral(loc.filename, __HERE__),
                astIntLiteral(loc.row, __HERE__),
                astIntLiteral(loc.column, __HERE__),
            ], __HERE__);
}

ASTSymbol parseExpressionBase(Parser parser, LexicalContext lexicalContext)
{
    {
        auto args = new ParseExpressionBaseArgs(parser, lexicalContext);
        lexicalContext.macroState.applyMacro(args);
        if (args.symbol) return args.symbol;
    }
    {
        if (ASTSymbol destroy_ = parseDestroy(parser, lexicalContext))
            return destroy_;
    }
    parser.begin;
    parser.strip;
    auto loc = parser.loc;
    if (parser.accept(".")) {
        // .name is module level
        string name = parser.parseIdentifier;
        if (name.length) {
            parser.commit;
            return new ASTIdentifier(name, true, loc);
        }
    }
    parser.revert;
    string name = parser.parseIdentifier;
    if (name.length)
    {
        if (name == "__HERE__") return hereExpr(loc, lexicalContext);
        if (name == "\$") return new ASTArrayLength(loc);
        if (name == "super") return new ASTSuper(loc);
        return new ASTIdentifier(name, false, loc);
    }
    {
        parser.begin;
        string symbolIdentifier = parser.parseIdentifier2(":");
        if (symbolIdentifier.startsWith(":")) {
            parser.commit;
            return new ASTSymbolIdentifier(symbolIdentifier[1 .. $]);
        }
        parser.revert;
    }
    parseFloat(parser).case {
        (:failure): {}
        (:success, float f):
            return new ASTFloatLiteral(f);
    }
    parseNumber(parser).case {
        (:failure): {}
        (:success, int i):
            return new ASTIntLiteral(i, loc);
    }
    if (parser.accept("\""))
    {
        return parseStringLiteral(parser, lexicalContext, "\"");
    }
    if (auto statementExpr = parseStatementExpr(parser, lexicalContext))
        return statementExpr;
    if (parser.accept("("))
    {
        ASTSymbol result = parseExpression(parser, lexicalContext);

        parser.expect(")");
        return result;
    }
    {
        if (ASTSymbol result = parseArrayLiteral(parser, lexicalContext))
            return result;
    }
    return null;
    /*parser.fail("Base expression expected.");
    assert(false);*/
}

ASTSymbol parseBitAnd(Parser parser, LexicalContext lexicalContext, mut ASTSymbol left, int myLevel)
{
    while (true)
    {
        parser.begin;
        if (parser.acceptButNot("&", "&&"))
        {
            parser.commit;
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp("&", left, right, parser.loc);
        }
        else
        {
            parser.revert;
            return left;
        }
    }
}

ASTSymbol parseBitXor(Parser parser, LexicalContext lexicalContext, mut ASTSymbol left, int myLevel)
{
    while (true)
    {
        parser.begin;
        if (parser.accept("^"))
        {
            parser.commit;
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp("^", left, right, parser.loc);
        }
        else
        {
            parser.revert;
            return left;
        }
    }
}

ASTSymbol parseBitOr(Parser parser, LexicalContext lexicalContext, mut ASTSymbol left, int myLevel)
{
    while (true)
    {
        parser.begin;
        if (parser.acceptButNot("|", "||"))
        {
            parser.commit;
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp("|", left, right, parser.loc);
        }
        else
        {
            parser.revert;
            return left;
        }
    }
}

ASTSymbol parseBitShift(Parser parser, LexicalContext lexicalContext, mut ASTSymbol left, int myLevel)
{
    while (true)
    {
        if (parser.accept("<<"))
        {
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp("<<", left, right, parser.loc);
        }
        else if (parser.accept(">>>"))
        {
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp(">>>", left, right, parser.loc);
        }
        else if (parser.accept(">>"))
        {
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp(">>", left, right, parser.loc);
        }
        else return left;
    }
}

ASTSymbol parseAddSubCat(Parser parser, LexicalContext lexicalContext, mut ASTSymbol left, int myLevel)
{
    while (true)
    {
        if (parser.accept("+"))
        {
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp("+", left, right, parser.loc);
        }
        else if (parser.accept("-"))
        {
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp("-", left, right, parser.loc);
        }
        else if (parser.accept("~"))
        {
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp("~", left, right, parser.loc);
        }
        else return left;
    }
}

ASTSymbol parseMulDiv(Parser parser, LexicalContext lexicalContext, mut ASTSymbol left, int myLevel)
{
    while (true)
    {
        if (parser.accept("*"))
        {
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp("*", left, right, parser.loc);
        }
        else if (parser.accept("/"))
        {
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp("/", left, right, parser.loc);
        }
        else if (parser.accept("%"))
        {
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp("%", left, right, parser.loc);
        }
        else return left;
    }
}

ASTSymbol parseBoolAnd(Parser parser, LexicalContext lexicalContext, mut ASTSymbol left, int myLevel)
{
    while (true)
    {
        if (parser.accept("&&"))
        {
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp("&&", left, right, parser.loc);
        } else return left;
    }
}

ASTSymbol parseBoolOr(Parser parser, LexicalContext lexicalContext, mut ASTSymbol left, int myLevel)
{
    while (true)
    {
        if (parser.accept("||"))
        {
            ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

            left = new ASTBinaryOp("||", left, right, parser.loc);
        } else return left;
    }
}

ASTSymbol parseComparison(Parser parser, LexicalContext lexicalContext, ASTSymbol left, int myLevel)
{
    if (parser.accept("=="))
    {
        ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

        return new ASTBinaryOp("==", left, right, parser.loc);
    }
    if (parser.accept("!=")) // same as !(a == b)
    {
        ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

        return new ASTNegation(new ASTBinaryOp("==", left, right, parser.loc), parser.loc);
    }
    if (parser.accept("is"))
    {
        ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

        return new ASTBinaryOp("is", left, right, parser.loc);
    }
    if (parser.accept("!is"))
    {
        ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

        return new ASTNegation(new ASTBinaryOp("is", left, right, parser.loc), parser.loc);
    }
    if (parser.accept(">="))
    {
        ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

        return new ASTBinaryOp(">=", left, right, parser.loc);
    }
    if (parser.acceptButNot(">", ">>"))
    {
        ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

        return new ASTBinaryOp(">", left, right, parser.loc);
    }
    if (parser.accept("<="))
    {
        ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

        return new ASTBinaryOp("<=", left, right, parser.loc);
    }
    if (parser.acceptButNot("<", "<<"))
    {
        ASTSymbol right = parseArithmetic(parser, lexicalContext, myLevel + 1);

        return new ASTBinaryOp("<", left, right, parser.loc);
    }
    return left;
}

ASTSymbol parseArithmetic(Parser parser, LexicalContext lexicalContext, int level)
{
    mut ASTSymbol left = parseExpressionLeaf(parser, lexicalContext);

    if (level <= 8) left = parseBitAnd(parser, lexicalContext, left, 8);
    if (level <= 7) left = parseBitXor(parser, lexicalContext, left, 7);
    if (level <= 6) left = parseBitOr(parser, lexicalContext, left, 6);
    if (level <= 5) left = parseMulDiv(parser, lexicalContext, left, 5);
    if (level <= 4) left = parseAddSubCat(parser, lexicalContext, left, 4);
    if (level <= 3) left = parseBitShift(parser, lexicalContext, left, 3);
    if (level <= 2) left = parseComparison(parser, lexicalContext, left, 2);
    if (level <= 1) left = parseBoolAnd(parser, lexicalContext, left, 1);
    if (level <= 0) left = parseBoolOr(parser, lexicalContext, left, 0);
    return left;
}

ASTSymbol parseExpression(Parser parser, LexicalContext lexicalContext)
{
    return parseArithmetic(parser, lexicalContext, 0);
}

class ASTReturnStatement : ASTStatement
{
    ASTSymbol value;

    Loc loc;

    this(this.value, this.loc) { }

    override StatementCompileResult compile(Context context)
    {
        mut Expression expr = beExpression3(context, this.value.compile(context), this.loc);
        Type ret = findParent!FunctionScope(context.namespace).ret;
        expr = expectImplicitConvertTo(context, expr, ret, this.loc);

        /**
         * - alloca
         *   - copyInto the value
         *   - or assign the value (if it's a temporary and we can steal its reference)
         * - unwind stack
         * - ret the alloca
         */
        auto temp = new PairedTemporary(ret, Ownership.owned);
        auto init = new UninitializeTemporaryStatement(temp);
        mut Statement escapeValueStmt = ret.copyInto(context, temp, expr);
        if (expr.info.ownership == Ownership.gifted || expr.info.ownership == Ownership.global || !escapeValueStmt) {
            escapeValueStmt = new AssignStatement(temp, expr);
        }
        mut Statement returnStmt = sequence(init, escapeValueStmt);
        returnStmt = unwindScope(context, findParent!FunctionScope(context.namespace), returnStmt);
        returnStmt = sequence(returnStmt, new ReturnStatement(temp));
        // no need for stack cleanup after a return.

        return StatementCompileResult(returnStmt, context);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astReturn", [value.quote(quoter)], loc);
    }
}

// the return expression of "return;"
class ASTVoidExpression : ASTSymbol
{
    Loc loc;

    this(this.loc) { }

    override Expression compile(Context context) { return once new VoidExpression; }

    override ASTSymbol quote(Quoter quoter) {
        ASTSymbol[] args;
        return quoter.compilerCall("astVoidLiteral", args, loc);
    }
}

class VoidExpression : Expression
{
    this() { this.type = once new Void; }
    override int emit(Generator generator)
    {
        return generator.fun.voidLiteral;
    }
    override ExprInfo info() { return ExprInfo(false, Ownership.owned); }
    override void hash(Hash hash) { hash.adds("VoidExpression"); }
}

ASTReturnStatement parseReturn(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    string identifier = parser.parseIdentifier;
    if (identifier != "return")
    {
        parser.revert;
        return null;
    }
    mut ASTSymbol expr;
    if (parser.accept(";")) // return;
    {
        expr = new ASTVoidExpression(parser.loc);
    }
    else
    {
        expr = parseExpression(parser, lexicalContext);
        parser.expect(";");
    }
    parser.commit;
    return new ASTReturnStatement(expr, parser.loc);
}

class NestedFunctionDeclaration : Namespace
{
    Function nestedFunction;

    // TODO collision check
    this(this.parent, this.nestedFunction) { this.isContextScope = true; }

    override Symbol lookup(string name, Context context, Loc loc, Expression frame)
    {
        if (this.nestedFunction.name == name)
        {
            auto framePtr = new PointerCast(once new Pointer(new Void), frame);

            return new ClassMethodPtr(new FunctionReference(this.nestedFunction), framePtr, true);
        }
        if (this.parent) return this.parent.lookup(name, context, loc, frame);
        return null;
    }
}

Statement unwindScope(Context context, Namespace target, Statement body_)
{
    mut Statement result = body_;
    mut auto current = context.namespace;
    while (current !is target) {
        if (auto declHolder = current.instanceOf(DeclarationHolder)) {
            auto var = declHolder.accessDecl(context.compiler);
            if (var.info.ownership == Ownership.owned) {
                auto type = var.type;
                auto destroy = type.endLifetime(context, var);
                result = sequence(result, destroy);
            }
        }
        current = current.parent;
    }
    return result;
}

(Expression test, Expression value) pickEither(
    Context context, Either either, Expression source, Type extractType, Loc loc)
{
    if (auto extractEither = extractType.instanceOf(Either))
        return pickEitherTuple(context, either, source, extractEither, loc);
    int eithermember = [first cast(int) i for i, a in either.types where a.type.same(extractType) else -1];
    loc.assert2s(eithermember != -1, "type $(extractType.repr) not in sumtype $(either.repr)");
    auto test = context.compiler.binaryOp(
        "==", context, new EitherType(source), new IntLiteral(eithermember + 1), __HERE__);
    auto value = new EitherMember(source, eithermember);
    return (test, value);
}

/**
 * if the thing on the left of the pick operator is an either:
 *
 * - create a result temporary for it
 * - create a temporary bool (false)
 * - for each type in the either:
 *   - build an iftree with the source either
 *   - on success, init the result and set the bool to true
 * - return (bool, result)
 */
(Expression test, Expression value) pickEitherTuple(
    Context context, Either either, Expression source, Either extractEither, Loc loc)
{
    auto result = new PairedTemporary(extractEither, source.info.ownership);
    auto init = new UninitializeTemporaryStatement(result);
    auto resBool = new PairedTemporary(new Integer, Ownership.global);
    auto init2 = new InitializeTemporaryStatement(resBool, new IntLiteral(0)); // false
    auto sourceTypeId = new EitherType(source);
    mut Statement iftree = null;
    for (int i <- 0 .. extractEither.types.length)
    {
        auto extractType = extractEither.types[i].type;
        int eithermember = [first cast(int) i for i, a in either.types where a.type.same(extractType) else -1];
        loc.assert2s(eithermember != -1, "sumtype $(extractType.repr) not in source $(either.repr)");
        auto cmpTypeId = new IntLiteral(eithermember + 1);
        auto test = context.compiler.binaryOp("==", context, sourceTypeId, cmpTypeId, __HERE__);

        auto extractValue = new EitherMember(source, eithermember);
        auto repacked = new EitherExpr(extractEither, extractValue, i);
        auto setStmt = new AssignStatement(result, repacked);
        auto setBoolStmt = new AssignStatement(resBool, new IntLiteral(1)); // true

        iftree = context.compiler.ifStatement(test, sequence(setStmt, setBoolStmt), iftree);
    }
    auto test = new StatementExpression(
        sequence(sequence(init, init2), iftree),
        resBool,
        gifted=(source.info.ownership == Ownership.gifted));
    return (test, result);
}

private Type typeWithoutFail(Either source)
{
    if ([count a in source.types where !a.fail] == 1) {
        return [first a.type for a in source.types where !a.fail else null];
    }
    return new Either([a for a in source.types where !a.fail]);
}

class ASTIfStatement : ASTStatement
{
    (ASTSymbol | ASTVarDeclStatement | ASTVarExtractDeclStatement) test;

    ASTStatement then;

    ASTStatement else_;

    Loc loc;

    this(this.test, this.then, this.else_, this.loc) { }

    override StatementCompileResult compile(Context context)
    {
        mut Statement prelude; // var decl statement
        mut Expression test;
        mut Statement epilog; // either decl value assignment
        mut auto testSucceedsContext = context;
        this.test.case {
            ASTSymbol symbol: {
                test = beExpression3(context, symbol.compile(context), this.loc);
            }
            ASTVarDeclStatement vardecl: {
                auto pair = vardecl.compile(context);
                prelude = pair.statement;
                testSucceedsContext = pair.context;
                auto stackframe = once new ReferenceExpression(new StackFrame(new Void));
                auto var = testSucceedsContext.namespace.lookup(
                    vardecl.name, context, this.loc, stackframe).beExpression;
                // `if (auto var = (some nullable Foo))`
                // since var must be non-null, rebind it to type `Foo`.
                if (var.type.zeroInitializable && (
                    var.type.instanceOf(ClassType) || var.type.instanceOf(IntfType)))
                {
                    Type notNullableType() {
                        if (auto classType = var.type.instanceOf(ClassType)) return classType.makeNotNullable;
                        if (auto intfType = var.type.instanceOf(IntfType)) return intfType.makeNotNullable;
                        assert(false);
                    }
                    auto symbolAlias = new SymbolAlias(
                        testSucceedsContext.namespace,
                        vardecl.name,
                        new PointerCast(notNullableType, var));
                    testSucceedsContext = testSucceedsContext.withNamespace(symbolAlias);
                }
                // TODO lookup() that handles the stackframe thing
                test = beExpression3(context, var, this.loc);
            }
            ASTVarExtractDeclStatement extractdecl: {
                // validate source is Either
                // TODO extract interface
                auto source = extractdecl.source.compile(context).beExpressionImplCall(context, extractdecl.loc);
                auto sourceType = source.type.instanceOf(Either);
                extractdecl.loc.assert2s(!!sourceType, "source of <- decl must be sumtype, not $(source.type.repr)");
                // FIXME check lifetime here
                auto tempSource = new PairedTemporary(source.type, source.info.ownership);
                auto initTemp = new InitializeTemporaryStatement(tempSource, source);
                // check expected type
                mut Type extractType;
                if (extractdecl.auto_) {
                    extractType = typeWithoutFail(sourceType);
                } else {
                    extractType = beType(extractdecl.loc, extractdecl.type.compile(context));
                }

                auto ret = pickEither(context, sourceType, tempSource, extractType, extractdecl.loc);
                prelude = initTemp;
                test = ret.test;

                auto actualVarDecl = new ASTVarDeclStatement(
                    extractdecl.name, mutable=false, infer=false, type=new ASTSymbolHelper(extractType),
                    initial=new ASTSymbolHelper(ret.value), extractdecl.loc);
                auto pair = actualVarDecl.compile(context);
                epilog = pair.statement;
                testSucceedsContext = pair.context;
            }
        }
        auto thenPair = this.then.compile(testSucceedsContext);
        Statement then = unwindScope(thenPair.context, context.namespace, thenPair.statement);
        mut Statement else_;
        if (this.else_) {
            auto elsePair = this.else_.compile(context);
            else_ = unwindScope(elsePair.context, context.namespace, elsePair.statement);
        }

        auto test = truthy(context, test, this.loc);
        auto ifStmt = new IfStatement(test, sequence(epilog, then), else_);

        return StatementCompileResult(sequence(prelude, ifStmt), context);
    }

    override ASTSymbol quote(Quoter quoter) {
        if (!else_) {
            return quoter.compilerCall("astIf", [
                test.case(
                    ASTSymbol symbol: symbol.quote(quoter),
                    ASTVarDeclStatement stmt: stmt.quote(quoter),
                    ASTVarExtractDeclStatement stmt: stmt.quote(quoter)),
                then.quote(quoter),
                quoter.compiler.astIdentifier("null", loc)], loc);
        }
        return quoter.compilerCall("astIf", [
            test.case(
                ASTSymbol symbol: symbol.quote(quoter),
                ASTVarDeclStatement stmt: stmt.quote(quoter),
                ASTVarExtractDeclStatement stmt: stmt.quote(quoter)),
            then.quote(quoter),
            else_.quote(quoter)], loc);
    }
}

ASTIfStatement parseIf(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    string identifier = parser.parseIdentifier;
    if (identifier != "if")
    {
        parser.revert;
        return null;
    }
    mut (ASTSymbol | ASTVarDeclStatement | ASTVarExtractDeclStatement) test;
    parser.expect("(");
    if (auto vardecl = parseVarDecl(parser, lexicalContext, requireInitializer=true))
        test = vardecl;
    else if (auto varextractdecl = parseVarExtractDecl(parser, lexicalContext))
        test = varextractdecl;
    else test = parseExpression(parser, lexicalContext);
    parser.expect(")");
    ASTStatement thenStmt = parseStatement(parser, lexicalContext);
    mut ASTStatement elseStatement;
    if (parser.accept("else"))
    {
        elseStatement = parseStatement(parser, lexicalContext);
    }
    parser.commit;
    return new ASTIfStatement(test, thenStmt, elseStatement, parser.loc);
}

ASTStatement parseBreakCont(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    auto loc = parser.loc;
    string identifier = parser.parseIdentifier;
    if (identifier == "break")
    {
        parser.expect(";");
        parser.commit;
        return new ASTBreakStatement(loc);
    }
    if (identifier == "continue")
    {
        parser.expect(";");
        parser.commit;
        return new ASTContinueStatement(loc);
    }
    parser.revert;
    return null;
}

class ASTScopeStatement : ASTStatement
{
    ASTStatement[] statements;

    Loc loc;

    this(this.statements, this.loc) { }

    override StatementCompileResult compile(Context context)
    {
        auto statements = new Statement[](this.statements.length);
        mut auto subContext = context;
        for (int i <- 0 .. this.statements.length)
        {
            auto pair = this.statements[i].compile(subContext);

            subContext = pair.context;
            statements[i] = pair.statement;
        }
        return StatementCompileResult(
            unwindScope(subContext, context.namespace, new SequenceStatement(statements)),
            context); // scope ends here
    }

    override ASTSymbol quote(Quoter quoter) {
        auto statements = [statement.quote(quoter) for statement in this.statements];
        return quoter.compilerCall(
            "astScope", [quoter.compiler.astArrayLiteral(statements, this.loc)], this.loc);
    }
}

// just a bunch of statements after each other
// (used for int a, b)
class ASTSequenceStatement : ASTStatement
{
    ASTStatement[] statements;

    Loc loc;

    this(this.statements, this.loc) { }

    override StatementCompileResult compile(Context context)
    {
        auto statements = new Statement[](this.statements.length);
        mut auto subContext = context;
        for (int i <- 0 .. this.statements.length)
        {
            auto pair = this.statements[i].compile(subContext);

            subContext = pair.context;
            statements[i] = pair.statement;
        }
        // not a scope!
        return StatementCompileResult(new SequenceStatement(statements), subContext);
    }

    override ASTSymbol quote(Quoter quoter) {
        auto statements = [arg.quote(quoter) for arg in this.statements];
        return quoter.compilerCall(
            "astSequence", [quoter.compiler.astArrayLiteral(statements, this.loc)], this.loc);
    }
}

ASTScopeStatement parseScope(Parser parser, LexicalContext lexicalContext)
{
    auto loc = parser.loc;
    if (!parser.accept("{"))
    {
        return null;
    }
    mut ASTStatement[] statements;
    while (!parser.accept("}"))
    {
        ASTStatement stmt = parseStatement(parser, lexicalContext);

        statements ~= stmt;
    }
    return new ASTScopeStatement(statements, loc);
}

ASTAssignStatement parseAssignment(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    ASTSymbol lhs = parseExpressionLeaf(parser, lexicalContext);
    if (!lhs) {
        parser.revert;
        return null;
    }
    auto loc = parser.loc;
    mut string operator;
    if (parser.accept("=")) { }
    else if (parser.accept("+=")) operator = "+";
    else if (parser.accept("-=")) operator = "-";
    else if (parser.accept("*=")) operator = "*";
    else if (parser.accept("/=")) operator = "/";
    else if (parser.accept("~=")) operator = "~";
    else if (parser.accept("&=")) operator = "&";
    else if (parser.accept("|=")) operator = "|";
    else if (parser.accept("^=")) operator = "^";
    else {
        parser.revert;
        return null;
    }
    mut ASTSymbol expr = parseExpression(parser, lexicalContext);
    if (!expr) {
        parser.fail("expression expected");
    }
    parser.commit;
    if (operator.length) {
        // TODO separate AST construct - avoid double compiling lhs?
        expr = new ASTBinaryOp(operator, lhs, expr, loc);
    }
    return new ASTAssignStatement(lhs, expr, parser.loc);
}

class ASTAssignStatement : ASTStatement
{
    ASTSymbol target;

    ASTSymbol value;

    Loc loc;

    this(this.target, this.value, this.loc) {}

    override StatementCompileResult compile(Context context)
    {
        mut Expression value = this.value.compile(context).beExpressionImplCall(context, this.loc);

        // `a[b] = c` special handling
        if (auto astIndex = target.instanceOf(ASTIndexAccess))
        {
            auto base = astIndex.base.compile(context).beExpressionImplCall(context, astIndex.loc);
            auto index = astIndex.index.compile(context).beExpressionImplCall(context, astIndex.loc);
            if (auto assignment = base.type.indexAssignment(context, base, index, value, this.loc))
                return StatementCompileResult(assignment, context);
        }

        auto compiler = context.compiler;

        Symbol target = this.target.compile(context);
        Reference targetref = target.instanceOf(Reference);
        this.loc.assert2s(!!targetref, "target of assignment must be a reference");
        this.loc.assert2s(targetref.info.mutable, "target of assignment must be mutable");
        // Broadly, this check is the reason that 'borrowed' exists.
        // FIXME hasDestructor
        bool hasDtor = !!targetref.type.endLifetime(context, targetref);
        this.loc.assert2s(
            targetref.info.ownership != Ownership.borrowed || !hasDtor,
            "cannot reassign to borrowed value with destructor");
        auto type = targetref.type;
        value = expectImplicitConvertTo(context, value, type, this.loc);

        /**
         * Order is important here.
         *
         * 1. temporize the RHS. (NO copy ctor!)
         * 2. temporize the old LHS.
         * 3. overwrite the LHS with the temporized RHS. (copy here)
         * 4. destroy the old LHS value.
         *
         * Why this order? Evaluating the RHS might change the LHS address
         * (consider: *f() = *g() - in that case, g() is more likely to
         * invalidate f() than the other way around).
         * Also, the RHS may just *be* the LHS, as in "s = s;"
         * Hence we need to temporize the RHS.
         * The address of LHS is temporized so that the destructor call
         * doesn't lead to a double evaluation.
         * The old LHS value is rescued so that more complex versions of
         * "s = s" don't leave the references in "s" abandoned between
         * endLifetime and moveInto. In other words, since s_2 may depend on s_1,
         * their lifetimes need to overlap.
         *
         * But man, what an ugly-ass dataflow...
         */

        Statement do1(Expression tmpValue) {
            Statement do2(Expression tmpLhsPtr) {
                auto tmpLhs = compiler.dereference(tmpLhsPtr);

                Statement do3(Reference oldLhs) {
                    auto reassign = compiler.move(context, tmpLhs, tmpValue);
                    auto cleanup = oldLhs.type.endLifetime(context, oldLhs);

                    return sequence(reassign, cleanup);
                }
                return compiler.stmtWithTemporary(tmpLhs, &do3);
            }
            return compiler.stmtWithTemporaryExpr(compiler.reference(targetref), &do2);
        }
        return StatementCompileResult(
            compiler.stmtWithTemporaryExpr(value, &do1), context);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astAssign", [target.quote(quoter), value.quote(quoter)], loc);
    }
}

ASTAssignStatement parseAssignStatement(Parser parser, LexicalContext lexicalContext)
{
    if (auto ret = parseAssignment(parser, lexicalContext))
    {
        parser.expect(";");
        return ret;
    }
    return null;
}

class ASTVarDeclStatement : ASTStatement
{
    string name;

    bool mutable;

    bool infer;

    ASTSymbol type;

    ASTSymbol initial;

    Loc loc;

    this(this.name, this.mutable, this.infer, this.type, this.initial, this.loc)
    {
        assert(infer == !type);
        assert(!infer || initial);
    }

    override StatementCompileResult compile(Context context)
    {
        mut Type type;
        if (this.type) type = beType(this.loc, this.type.compile(context));
        if (this.initial)
        {
            mut auto initial = beExpression3(context, this.initial.compile(context), this.loc);
            if (this.infer) {
                assert(!type);
                type = initial.type;
            } else {
                assert(!!type);
                initial = expectImplicitConvertTo(context, initial, type, this.loc);
            }

            if (initial.info.ownership == Ownership.owned && !this.mutable)
            {
                // don't double-own the value, it's covered by its own ownership
                // we aren't mutable, so we can safely borrow the initializer.
                auto decl = new VariableDeclaration(
                    context.namespace, this.name, type, ExprInfo(false, Ownership.borrowed), false);
                auto assign = context.compiler.assignStatement(decl.accessDecl(context.compiler), initial);

                return StatementCompileResult(assign, context.withNamespace(decl));
            }

            // otherwise we'll hold a reference ourselves.
            auto decl = new VariableDeclaration(
                context.namespace, this.name, type, ExprInfo(mutable, Ownership.owned), false);

            return StatementCompileResult(
                move(context, decl.accessDecl(context.compiler), initial),
                context.withNamespace(decl));
        }
        else
        {
            if (!type.zeroInitializable) {
                // this.loc.fail("Cannot declare $(this.name) without initializer: $(type.repr) is not zero-initializable");
            }
            auto decl = new VariableDeclaration(
                context.namespace, this.name, type, ExprInfo(mutable, Ownership.owned), false);

            return StatementCompileResult(
                new AssignStatement(decl.accessDecl(context.compiler), new NullExpr(type)),
                context.withNamespace(decl));
        }
    }

    override ASTSymbol quote(Quoter quoter) {
        mut ASTSymbol varName;
        // auto $foo = 5;
        // -> compiler.astDeclareVar(foo, compiler.astIntLiteral(5))
        if (this.name[0 .. 1] == "\$") {
            varName = quoter.compiler.astIdentifier(this.name[1 .. $], this.loc);
        } else {
            varName = quoter.compiler.astStringLiteral(this.name, this.loc);
        }
        if (this.infer) {
            return quoter.compilerCall("astDeclareVar", [
                varName,
                quoter.compiler.astBoolLiteral(this.mutable, this.loc),
                this.initial.quote(quoter)], this.loc);
        }
        if (this.initial) {
            return quoter.compilerCall("astDeclareTypedVar", [
                varName,
                quoter.compiler.astBoolLiteral(this.mutable, this.loc),
                this.type.quote(quoter),
                this.initial.quote(quoter)], this.loc);
        }
        return quoter.compilerCall("astDeclareTypedVar", [
            varName,
            quoter.compiler.astBoolLiteral(this.mutable, this.loc),
            this.type.quote(quoter),
            quoter.compiler.astIdentifier("null", this.loc)], this.loc);
    }
}

ASTVarDeclStatement parseVarInitialization(
    Parser parser, LexicalContext lexicalContext, bool infer, bool mutable,
    ASTSymbol type, string operator, bool requireInitializer)
{
    parser.begin;
    mut ASTSymbol initial;
    mut string name;
    if (infer && parser.accept(operator))
    {
        initial = parseExpression(parser, lexicalContext);
        if (!initial) parser.fail("variable initializer expected");
    }
    else
    {
        name = parser.parseIdentifier;
        if (!name.length)
        {
            parser.revert;
            return null;
        }
        if (infer) {
            if (!parser.accept(operator))
            {
                parser.revert;
                return null;
            }
            initial = parseExpression(parser, lexicalContext);
            if (!initial) parser.fail("variable initializer expected");
        }
        else if (parser.accept(operator)) {
            initial = parseExpression(parser, lexicalContext);
            if (!initial) parser.fail("variable initializer expected");
        }
    }
    if (requireInitializer && !initial) {
        parser.revert;
        return null;
    }
    parser.commit;
    return new ASTVarDeclStatement(name, mutable, infer, type, initial, parser.loc);
}

ASTVarDeclStatement parseVarDecl(Parser parser, LexicalContext lexicalContext, bool requireInitializer)
{
    parser.begin;
    mut bool infer = false;
    mut bool mutable = false;
    mut ASTSymbol type;
    if (parser.acceptIdentifier("mut")) mutable = true;
    if (acceptIdentifier(parser, "auto")) {
        infer = true;
    } else {
        type = parser.parseType(lexicalContext);
        if (!type)
        {
            if (mutable) infer = true;
            else {
                parser.revert;
                return null;
            }
        }
    }
    auto decl = parseVarInitialization(parser, lexicalContext, infer, mutable, type, "=", requireInitializer);
    if (!decl) {
        parser.revert;
        return null;
    }
    parser.commit;
    return decl;
}

// TODO merge with parseVarDecl
ASTStatement parseMultiVarDecl(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    auto loc = parser.loc;
    mut bool infer = false;
    mut bool mutable = false;
    mut ASTSymbol type;
    if (parser.acceptIdentifier("mut")) mutable = true;
    if (acceptIdentifier(parser, "auto")) {
        infer = true;
    } else {
        type = parser.parseType(lexicalContext);
        if (!type)
        {
            parser.revert;
            return null;
        }
    }
    mut ASTStatement[] decls;
    while (true) {
        if (decls.length) parser.expect(",");
        if (auto decl = parseVarInitialization(parser, lexicalContext, infer, mutable, type, "=", false)) {
            decls ~= decl;
        } else if (auto decl2 = parseVarInitialization(parser, lexicalContext, infer, mutable, type, "<-", false)) {
            decls ~= extractFromVarDecl(decl2);
        } else {
            parser.assert_(decls.length == 0, "couldn't parse continuing variable declaration");
            parser.revert;
            return null;
        }
        if (parser.accept(";")) break;
    }
    parser.commit;
    return new ASTSequenceStatement(decls, loc);
}

/**
 * auto a <- foo;
 * int i <- find(...);
 */
class ASTVarExtractDeclStatement : ASTStatement
{
    string name;

    bool auto_;

    ASTSymbol type;

    ASTSymbol source;

    Loc loc;

    this(this.name, this.auto_, this.type, this.source, this.loc)
    {
        assert(!!source);
        assert(auto_ == !type);
    }

    override StatementCompileResult compile(Context context)
    {
        auto source = this.source.compile(context).beExpressionImplCall(context, this.loc);
        Either sourceType = source.type.instanceOf(Either);
        this.loc.assert2s(!!sourceType, "Source type for extract decl must be sumtype");

        mut Type type;
        if (this.type) type = beType(this.loc, this.type.compile(context));
        else type = typeWithoutFail(sourceType);

        bool inTargetType(Type source) {
            if (auto either = type.instanceOf(Either))
                return [any a.type.same(source) for a in either.types];
            return type.same(source);
        }

        auto decl = new VariableDeclaration(
            context.namespace, this.name, type, ExprInfo(mutable=false, Ownership.owned), false);
        auto astType = new ASTSymbolHelper(type);

        mut ASTEitherCaseExprCase[] cases;
        for (int i <- 0 .. sourceType.types.length) {
            auto sourceMemberType = sourceType.types[i].type;
            bool return_ = !sourceMemberType.inTargetType;

            mut ASTSymbol expr;
            // separate statement so that the loc gets attributed to the source site
            auto ret = context.compiler.astReturn(context.compiler.astIdentifier("a", this.loc), this.loc);
            // TODO T.init
            if (return_) expr = context.compiler.$expr ({ $stmt ret; $astType x; x; });
            else expr = context.compiler.$expr cast($astType) a;

            cases ~= ASTEitherCaseExprCase(
                loc=this.loc,
                type=new ASTSymbolHelper(sourceMemberType),
                identifier="a",
                return_=false,
                expr=expr);
        }

        auto switch_ = new ASTEitherCaseExpr(this.loc, this.source, cases);
        auto switchExpr = switch_.compile(context).beExpression;

        return StatementCompileResult(
            move(context, decl.accessDecl(context.compiler), switchExpr),
            context.withNamespace(decl));
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTVarExtractDeclStatement'!"); assert(false); }

    /*
    FIXME: static in class
    static ASTVarExtractDeclStatement fromVarDecl(ASTVarDeclStatement decl)
    {
        return new ASTVarExtractDeclStatement(
            name=decl.name, auto_=decl.infer, type=decl.type,
            source=decl.initial, loc=decl.loc);
    }
    */
}

ASTVarExtractDeclStatement extractFromVarDecl(ASTVarDeclStatement decl)
{
    return new ASTVarExtractDeclStatement(
        name=decl.name, auto_=decl.infer, type=decl.type,
        source=decl.initial, loc=decl.loc);
}

ASTVarExtractDeclStatement parseVarExtractDecl(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    mut bool infer = false;
    mut bool mutable = false;
    mut ASTSymbol type;
    // TODO
    // if (parser.acceptIdentifier("mut")) mutable = true;
    if (acceptIdentifier(parser, "auto")) {
        infer = true;
    } else {
        type = parser.parseType(lexicalContext);
        if (!type)
        {
            if (mutable) infer = true;
            else {
                parser.revert;
                return null;
            }
        }
    }
    auto decl = parseVarInitialization(parser, lexicalContext, infer, mutable, type, "<-", requireInitializer=true);
    if (!decl) {
        parser.revert;
        return null;
    }
    parser.commit;
    return extractFromVarDecl(decl);
}

class ASTNestedFunctionDeclStatement : ASTStatement
{
    ASTFunction fun;

    this(this.fun) { }

    override StatementCompileResult compile(Context context)
    {
        auto module_ = findParent!Module(context.namespace);
        auto fun_ = this.fun.compile(context).instanceOf(Function);
        auto structType = findParent!FunctionScope(context.namespace).structType;
        auto voidp = once new Pointer(new Void);

        fun_.contextType = new Pointer(structType);

        auto namespace = new NestedFunctionDeclaration(context.namespace, fun_);

        fun_.parent = namespace;


        module_.track(fun_);

        return StatementCompileResult(
            new NoopStatement,
            context.withNamespace(namespace));
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTNestedFunctionDeclStatement'"); assert(false); }
}

ASTNestedFunctionDeclStatement parseNestedFunctionDecl(Parser parser, LexicalContext lexicalContext)
{
    if (auto fun_ = parseFunction(parser, lexicalContext))
        return new ASTNestedFunctionDeclStatement(fun_);
    return null;
}

class ASTWhile : ASTStatement
{
    ASTSymbol cond;

    ASTStatement body_;

    Loc loc;

    this(this.cond, this.body_, this.loc) { }

    override StatementCompileResult compile(Context context)
    {
        auto label = context.getLabel;
        auto loopContext = context.withNamespace(new LabelLoopScope(label, context.namespace));
        auto condExpr = truthy(context, beExpression3(context, this.cond.compile(loopContext), this.loc), this.loc);
        auto bodyPair = this.body_.compile(loopContext);
        auto bodyStmt = unwindScope(bodyPair.context, context.namespace, bodyPair.statement);

        return StatementCompileResult(
            new Loop(label, null, condExpr, bodyStmt, null),
            context);
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTWhileStatement'"); assert(false); }
}

ASTWhile parseWhile(Parser parser, LexicalContext lexicalContext)
{
    if (!acceptIdentifier(parser, "while"))
    {
        return null;
    }
    parser.expect("(");
    ASTSymbol cond = parseExpression(parser, lexicalContext);
    parser.expect(")");
    ASTStatement body_ = parseStatement(parser, lexicalContext);

    return new ASTWhile(cond, body_, parser.loc);
}

ASTExprStatement parseExprStatement(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    auto loc = parser.loc;
    ASTSymbol value = parseExpression(parser, lexicalContext);
    if (!value)
    {
        parser.revert;
        return null;
    }
    parser.expect(";");
    parser.commit;
    return new ASTExprStatement(value, loc);
}

class ASTStatementExpression : ASTSymbol
{
    ASTStatement[] statements;

    ASTSymbol expr;

    Loc loc;

    this(this.statements, this.expr, this.loc) {
        for (auto statement <- this.statements)
            assert(!!statement);
        assert(!!expr);
    }

    override Expression compile(Context context) {
        mut Context context = context;
        auto baseNamespace = context.namespace;
        auto statements = new Statement[](this.statements.length);
        for (int i <- 0 .. this.statements.length) {
            auto result = this.statements[i].compile(context);

            statements[i] = result.statement;
            context = result.context;
        }
        auto resultValue = beExpression3(context, this.expr.compile(context), loc);
        auto resultType = resultValue.type;

        // as ASTReturn
        auto temp = new PairedTemporary(resultType, Ownership.owned);
        auto init = new UninitializeTemporaryStatement(temp);

        mut Statement escapeValueStmt = resultType.copyInto(context, temp, resultValue);
        if (resultValue.info.ownership == Ownership.gifted || !escapeValueStmt) {
            escapeValueStmt = new AssignStatement(temp, resultValue);
        }
        escapeValueStmt = sequence(init, escapeValueStmt);

        auto sequence = new SequenceStatement(statements ~ escapeValueStmt);
        // unwind variables declared in the ({ })
        auto stmtExpr = unwindScope(context, baseNamespace, sequence);

        return new StatementExpression(stmtExpr, temp, true);
    }

    // TODO on CompilerBase?
    override ASTSymbol quote(Quoter quoter) {
        auto quotedStatements = new ASTSymbol[](this.statements.length);
        for (int i <- 0 .. this.statements.length)
            quotedStatements[i] = this.statements[i].quote(quoter);
        return quoter.compilerCall("astStatementExpression", [
            quoter.compiler.astArrayLiteral(quotedStatements, loc),
            this.expr.quote(quoter)
        ], loc);
    }
}

// ({ ...; ...; })
// value of last expression is value of statement expression
ASTStatementExpression parseStatementExpr(Parser parser, LexicalContext lexicalContext)
{
    auto loc = parser.loc;
    if (!parser.accept("({")) return null;
    mut ASTStatement[] statements;
    while (!parser.accept("})")) {
        statements ~= parseStatement(parser, lexicalContext);
    }
    if (statements.length == 0) parser.fail("expected at least one statement");

    if (auto exprStmt = statements[$ - 1].instanceOf(ASTExprStatement))
        return new ASTStatementExpression(statements[0 .. $ - 1], exprStmt.value, loc);

    parser.fail("last statement in statement expression must be an expression");
}

class ASTForLoop : ASTStatement
{
    ASTStatement declareLoopVar;

    ASTSymbol condition;

    ASTStatement step;

    ASTStatement body_;

    Loc loc;

    this(this.declareLoopVar, this.condition, this.step, this.body_, this.loc) { }

    override StatementCompileResult compile(Context context)
    {
        auto declPair = this.declareLoopVar.compile(context);
        auto forScope = declPair.context;
        Expression condition = beExpression3(context, this.condition.compile(forScope), this.loc);
        auto stepPair = this.step.compile(forScope);

        string label = context.getLabel;
        Namespace declScope = new LabelLoopScope(label, forScope.namespace);
        Context breakContScope = forScope.withNamespace(declScope);
        auto bodyPair = this.body_.compile(breakContScope);

        return StatementCompileResult(
            new Loop(label, declPair.statement, condition, bodyPair.statement, stepPair.statement),
            context);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astForLoop", [
            declareLoopVar.quote(quoter),
            condition.quote(quoter),
            step.quote(quoter),
            body_.quote(quoter)], loc);
    }
}

ASTForLoop parseFor(Parser parser, LexicalContext lexicalContext)
{
    auto loc = parser.loc;
    if (!acceptIdentifier(parser, "for"))
    {
        return null;
    }
    parser.expect("(");
    ASTVarDeclStatement varDecl = parseVarDecl(parser, lexicalContext, requireInitializer=false);
    if (!varDecl) {
        parser.fail("loop declaration expected");
    }
    parser.expect(";");
    ASTSymbol condition = parseExpression(parser, lexicalContext);
    parser.expect(";");
    ASTStatement step = parseAssignment(parser, lexicalContext);
    parser.expect(")");
    ASTStatement body_ = parseStatement(parser, lexicalContext);

    return new ASTForLoop(varDecl, condition, step, body_, loc);
}

class ASTStatementStatement : ASTStatement
{
    Loc loc;

    string variable;

    this(this.loc, this.variable) { }

    override StatementCompileResult compile(Context context) {
        this.loc.fail("\$stmt used outside quasiquote");
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compiler.astIdentifier(variable, loc);
    }
}

/**
 * Parse a statement that indicates to the quoter that an ASTStatement variable should be inserted.
 */
ASTStatementStatement parseStatementStatement(Parser parser, LexicalContext lexicalContext)
{
    auto loc = parser.loc;
    if (!parser.accept("\$stmt")) return null;
    auto variable = parser.parseIdentifier;
    if (!variable.length) parser.fail("ASTStatement variable expected");
    parser.expect(";");
    return new ASTStatementStatement(loc, variable);
}

// This is a placeholder for proper range semantics.
ASTStatement parseExtFor(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    if (!acceptIdentifier(parser, "for") || !parser.accept("(")) {
        parser.revert;
        return null;
    }
    auto compiler = lexicalContext.compiler;
    mut bool auto_;
    mut ASTSymbol type;
    if (parser.accept("auto")) auto_ = true;
    else type = parser.parseType(lexicalContext);
    auto identifierLoc = parser.loc;
    auto identifier = parser.parseIdentifier;
    if (!identifier.length || !parser.accept("<-")) {
        parser.revert;
        return null;
    }
    auto source = parseExpression(parser, lexicalContext);
    if (!source) parser.fail("expression expected");
    // range expression loop, for (int i <- 0..10)
    if (parser.accept(".."))
    {
        auto lower = source;
        auto upper = parseExpression(parser, lexicalContext);
        if (!upper) parser.fail("range upper bound expected");
        parser.expect(")");
        auto body_ = parseStatement(parser, lexicalContext);
        parser.commit;

        auto loopvar = compiler.astIdentifier(identifier, identifierLoc);
        if (auto_)
            return compiler.$stmt {
                for (mut auto $identifier = $lower; $loopvar < $upper; $loopvar += 1) {
                    $stmt body_;
                }
            };
        return compiler.$stmt {
            for (mut $type $identifier = $lower; $loopvar < $upper; $loopvar += 1) {
                $stmt body_;
            }
        };
    }
    // array loop, for (auto bla <- array)
    parser.expect(")");
    auto body_ = parseStatement(parser, lexicalContext);
    parser.commit;

    mut ASTStatement declIdentifier;
    if (auto_) declIdentifier = compiler.$stmt auto $identifier = __source[__loopvar];;
    else declIdentifier = compiler.$stmt $type $identifier = __source[__loopvar];;
    return compiler.$stmt {
        auto __source = $source;
        for (mut int __loopvar = 0; __loopvar < __source.length; __loopvar += 1) {
            $stmt declIdentifier;
            $stmt body_;
        }
    };
}

class ASTDestroy : ASTSymbol
{
    ASTSymbol target;

    Loc loc;

    this(this.target, this.loc) { }

    override Expression compile(Context context) {
        auto expr = beExpression3(context, this.target.compile(context), loc);
        auto stmt = destroy(context, expr);
        if (!stmt) return once new VoidExpression;
        return new StatementExpression(stmt, once new VoidExpression, false);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astDestroy", [target.quote(quoter)], loc);
    }
}

// manually end lifetime of a value
ASTSymbol parseDestroy(Parser parser, LexicalContext lexicalContext)
{
    auto loc = parser.loc;
    if (!acceptIdentifier(parser, "__destroy"))
        return null;
    parser.expect("(");
    ASTSymbol target = parseExpression(parser, lexicalContext);
    if (!target) parser.fail("expression expected");
    parser.expect(")");

    return new ASTDestroy(target, loc);
}

ASTDeclaration parseDeclaration(Parser parser, LexicalContext lexicalContext) {
    auto loc = parser.loc;
    if (auto import_ = parseImportStatement(parser, lexicalContext)) {
        loc.assert2s(!import_.isMacroImport, "can't import macro in function");
        auto importedModule = lexicalContext.resolveImport(import_).instanceOf(ASTModule);

        return new ASTImport(importedModule, import_.symbols);
    }
    if (auto aliasDecl = parseAliasDecl(parser, lexicalContext)) {
        return aliasDecl;
    }
    if (ASTStructDecl structDecl = parseStructDecl(parser, lexicalContext)) {
        return structDecl;
    }
    return null;
}

ASTStatement parseStatement(Parser parser, LexicalContext lexicalContext)
{
    auto loc = parser.loc;
    if (ASTStatement stmt = parseReturn(parser, lexicalContext))
        return stmt;
    if (ASTStatement stmt = parseIf(parser, lexicalContext))
        return stmt;
    if (ASTStatement stmt = parseBreakCont(parser, lexicalContext))
        return stmt;
    if (ASTStatement stmt = parseWhile(parser, lexicalContext))
        return stmt;
    if (ASTStatement stmt = parseExtFor(parser, lexicalContext))
        return stmt;
    if (ASTStatement stmt = parseFor(parser, lexicalContext))
        return stmt;
    if (ASTStatement stmt = parseScope(parser, lexicalContext))
        return stmt;
    if (auto decl = parseDeclaration(parser, lexicalContext))
        return new ASTDeclarationStatement(decl);
    if (ASTStatement stmt = parseNestedFunctionDecl(parser, lexicalContext))
        return stmt;
    if (ASTStatement stmt = parseStatementStatement(parser, lexicalContext))
        return stmt;
    if (ASTStatement stmt = parseMultiVarDecl(parser, lexicalContext))
        return stmt;
    if (ASTStatement stmt = parseAssignStatement(parser, lexicalContext))
        return stmt;
    if (ASTStatement stmt = parseWithStatement(parser, lexicalContext))
        return stmt;
    if (ASTStatement stmt = parseEitherCaseStmt(parser, lexicalContext))
        return stmt;
    {
        auto args = new ParseStatementArgs(parser, lexicalContext);
        lexicalContext.macroState.applyMacro(args);
        if (args.statement) return args.statement;
    }
    if (ASTStatement stmt = parseExprStatement(parser, lexicalContext))
        return stmt;
    parser.fail("statement expected");
}

// TODO move to function_
ASTFunction parseFunction(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    ASTSymbol ret = parser.parseType(lexicalContext);
    if (!ret)
    {
        parser.revert;
        return null;
    }
    string name = parser.parseIdentifier;
    // avoid 'mut typeof(expr)' from matching as a function
    // TODO reserved identifier list
    if (!name.length || name == "typeof" || !parser.accept("("))
    {
        parser.revert;
        return null;
    }
    parser.commit;
    ASTParameter[] params = parseIdentifierList(parser, lexicalContext);
    ASTStatement stmt = parseStatement(parser, lexicalContext);
    return new ASTFunction(parser.loc, name, ret, params, false, stmt, lexicalContext.macroState);
}

class ModuleEntry
{
    string name;

    Symbol value;

    this(this.name, this.value) { }
}

struct ASTModuleEntry
{
    Protection protection;

    (ASTImport | ASTSymbol | ASTExtern | ASTFunction
        | ASTDeclaration | ASTTemplateDecl | ASTUnitTest
    ) symbol;
}

class ASTModule : ASTModuleBase
{
    Loc loc;

    string name;

    Package pak;

    MacroState macroState;

    // separated from this module with a divergent macro state
    // because we hit a macro declaration
    ASTModule parent;

    int depth; // count from parent = null

    ASTModuleEntry[] entries;

    this(this.loc, this.name, this.pak, this.macroState, this.parent) {
        if (this.parent) this.depth = this.parent.depth + 1;
    }

    void addAliasDecl(string name, Protection protection, ASTSymbol target)
    {
        this.entries ~= ASTModuleEntry(protection, new ASTAliasDecl(name, target));
    }

    ASTSymbol getSymbolAlias(string name) {
        for (auto entry <- entries) {
            entry.symbol.case {
                ASTImport: {}
                ASTExtern: {}
                ASTFunction: {}
                ASTUnitTest: {}
                ASTSymbol: {}
                ASTDeclaration decl: {
                    if (auto alias_ = decl.instanceOf(ASTAliasDecl)) {
                        if (alias_.name == name) return alias_.target;
                    }
                }
                ASTTemplateDecl: {}
            }
        }
        return null;
    }
}

string mangleModuleName(string name, Package pak, int depth)
{
    // TODO non-nullable by default
    assert(!!pak);
    mut string mangledName;
    // mangledName = [(a == '.') ? '_' : a for a in name];
    for (int i <- 0 .. name.length) {
        if (name[i .. i + 1] == ".") mangledName ~= "_";
        else mangledName ~= name[i .. i + 1];
    }
    mut string patchedPakName;
    if (pak.name == "compiler") patchedPakName = "compiler$(itoa(__GENERATION__))";
    else patchedPakName = pak.name;

    string combined = "$(patchedPakName)_module_$mangledName";

    if (depth) return "$(combined)_d$depth";
    return combined;
}

struct Nothing { }

class NotYetResolvedSymbol : PendingSymbol
{
    Resolver resolver;

    int index;

    Loc loc;

    this(this.resolver, this.index, this.loc) { }

    override Symbol resolve() {
        auto entry = resolver.entries[index];
        if (!entry.resolution) {
            loc.fail("Dependency cycle while resolving $(entry.name).");
        }
        return entry.resolution;
    }
}

struct ResolvingModuleEntry
{
    string name;

    Protection protection;

    bool resolving;

    Symbol resolution;

    (ASTFunction | ASTClassDecl | ASTIntfDecl | ASTStructDecl | ASTAliasDecl | ASTUnitTest | Nothing) symbol;
}

class Resolver
{
    ResolvingModuleEntry[] entries;

    this() { }

    void add(
        string name,
        Protection protection,
        (ASTFunction | ASTClassDecl | ASTIntfDecl | ASTStructDecl | ASTAliasDecl | ASTUnitTest) astSymbol)
    {
        this.entries ~= ResolvingModuleEntry(name, protection, false, null, astSymbol);
    }

    void register(string name, Protection protection, Symbol symbol)
    {
        int hit = cast(int) [first i for i, a in this.entries where a.name == name else -1];
        if (hit == -1) {
            entries ~= ResolvingModuleEntry(name, protection, resolving=false, symbol, Nothing());
            return;
        }
        entries[hit].resolution = symbol;
    }

    Symbol lookup(Context context, Loc loc, string name, Protection protection)
    {
        bool allowed(Protection entry) {
            if (protection == Protection.public_)
                return entry == Protection.public_;
            return true;
        }
        int hit = cast(int) [
            first i for i, a in this.entries
            where a.name == name && allowed(a.protection)
            else -1];
        if (hit == -1) return null;
        if (this.entries[hit].resolving) {
            return new NotYetResolvedSymbol(this, hit, loc);
        }
        resolve(context, loc, hit);
        return this.entries[hit].resolution;
    }

    void resolve(Context context, Loc loc, int i)
    {
        if (!this.entries[i].resolution) {
            if (this.entries[i].resolving)
            {
                loc.fail("Dependency cycle while resolving $(this.entries[i].name).");
            }
            this.entries[i].resolving = true;
            this.entries[i].resolution = this.entries[i].symbol.case(
                // TODO compile function statement immediately too
                ASTFunction fun: fun.compile(context),
                ASTUnitTest ut: ut.compile(context),
                ASTClassDecl decl: decl.compile(context),
                ASTIntfDecl decl: decl.compile(context),
                ASTStructDecl decl: decl.compileToStruct(context),
                ASTAliasDecl decl: decl.target.compile(context),
                Nothing _: ({ assert(false); cast(Symbol) null; }));
            this.entries[i].resolving = false;
        }
    }

    void resolveAll(Context context)
    {
        for (int i <- 0 .. this.entries.length) {
            resolve(context, __HERE__, i);
        }
    }
}

extern(C) size_t poly_hash_whole_string(string s);

class Module : ModuleBase
{
    Loc loc;

    string mangledName;

    // whenever macro state changes, we begin a new submodule
    // when this happens, this member references the previous module.
    Module parentModule;

    Resolver resolver;

    Symbol[] anonymousEntries;

    // filled in by compile()
    FinishedSymbol[] finishedSymbols;

    size_t hash; // hash of mangled name

    this(this.loc, this.name, this.mangledName, this.parentModule) {
        this.isContextScope = false;
        this.resolver = new Resolver;
        this.hash = poly_hash_whole_string(mangledName);
    }

    void add(
        string name, Protection protection,
        (ASTFunction | ASTClassDecl | ASTIntfDecl | ASTStructDecl | ASTAliasDecl | ASTUnitTest) symbol)
    {
        this.resolver.add(name, protection, symbol);
    }

    override void track(Symbol symbol)
    {
        this.anonymousEntries ~= symbol;
    }

    void register(string name, Protection protection, Symbol symbol)
    {
        this.resolver.register(name, protection, symbol);
    }

    // bool visible: whether it affects lookups
    (Module mod, bool visible, string[] symbols)[] imports;

    override void addImport(ModuleBase module_, string[] symbols) {
        auto module_ = module_.instanceOf(Module);
        assert(!!module_);
        // TODO error?
        // TODO merge symbols?
        if ([any a.mod.mangledName == module_.mangledName for a in this.imports])
            return;
        this.imports ~= (module_, true, symbols);
    }

    void addModuleDependency(Module module_) {
        string[] empty;
        // TODO , [])
        this.imports ~= (module_, false, empty);
    }

    override string mangle() { return this.mangledName; }

    void walkModules(bool delegate(Module) cb)
    {
        if (this.parentModule)
            this.parentModule.walkModules(cb);
        if (!cb(this)) return;
        [import_.mod.walkModules(cb) for import_ in imports];
    }

    void compile(Context context)
    {
        auto compiler = context.compiler, platform = context.platform;

        this.resolver.resolveAll(context);

        void walkSymbols(void delegate(Symbol) dg) {
            for (auto entry <- this.resolver.entries) {
                dg(entry.resolution);
            }
            // must be a regular for loop so we can add entries during iteration
            for (mut int i = 0; i < this.anonymousEntries.length; i += 1) {
                dg(anonymousEntries[i]);
            }
        }

        void resolveClassIntf(Symbol sym) {
            if (auto classType = sym.instanceOf(ClassType)) {
                classType.class_.resolve(context);
            }
            if (auto intfType = sym.instanceOf(IntfType)) {
                intfType.intf.resolve(context);
            }
        }

        assert(finishedSymbols.length == 0);
        void compileSymbol(Symbol symbol) {
            if (Function fun = symbol.instanceOf(Function))
            {
                finishedSymbols ~= fun.compile(compiler, platform);
            }
            if (IntfType intfType = symbol.instanceOf(IntfType)) {
                finishedSymbols ~= new DefineClassIntf(intfType.intf);
            }
            if (ClassType classType = symbol.instanceOf(ClassType)) {
                finishedSymbols ~= new DefineClassIntf(classType.class_);
                finishedSymbols ~= [
                    cast(FinishedSymbol) method.compile(compiler, platform)
                    for method in classType.class_.methods];
            }
            if (Struct struct_ = symbol.instanceOf(Struct)) {
                finishedSymbols ~= [
                    cast(FinishedSymbol) method.instanceOf(StructMethod).compile(compiler, platform)
                    for method in struct_.methods];
            }
        }

        /**
         * TODO
         * This is hacky as heck.
         * It's written by just poking things until it works.
         * Work out a saner way.
         */
        walkSymbols(&resolveClassIntf);
        walkSymbols(&compileSymbol);
    }

    void emit(Generator generator)
    {
        if (!generator.once(mangle))
            return;

        assert(!generator.fun);

        [symbol.emit(generator) for symbol in this.finishedSymbols];
    }

    Symbol lookupPublic(Context context, Loc loc, string name)
    {
        // not counting imports (non-transitive)
        return this.resolver.lookup(context, loc, name, Protection.public_);
    }

    override Symbol lookup(string name, Context context, Loc loc, Expression frame)
    {
        if (!!frame) { print("error: lookup with frame propagated to Module"); assert(false); }

        if (Symbol symbol = this.resolver.lookup(context, loc, name, Protection.private_)) return symbol;
        for (auto import_ <- this.imports) {
            if (!import_.visible) continue;
            auto importMod = import_.mod;
            assert(!!importMod);
            if (!import_.symbols.length || [any a == name for a in import_.symbols]) {
                if (Symbol entry = importMod.lookupPublic(context, loc, name)) return entry;
            }
        }
        assert(!this.parent);
        if (this.parentModule)
            return this.parentModule.lookup(name, context, loc, frame);
        return null;
    }
}

abstract class ParserHelper
{
    abstract void proxyCall(ASTModule astModule, string function_, MacroState macroState)
    {
        assert(false);
    }
}

class ASTExtern
{
    string name;

    ASTSymbol ret;

    ASTParameter[] params;

    Loc retLoc;

    this(this.name, this.ret, this.params, this.retLoc) { }

    FunctionDeclaration compile(Context context)
    {
        auto params = [
            Parameter(false, param.name, false, beType(param.loc, param.type.compile(context)))
            for param in this.params];

        return new FunctionDeclaration(this.name, beType(this.retLoc, this.ret.compile(context)), params);
    }

    string repr() {
        string reprParam(ASTParameter param) {
            if (param.name.length == 0) return param.type.repr;
            return param.type.repr ~ " " ~ param.name;
        }
        return "extern(C) $(ret.repr) $name(" ~ [join ", " reprParam(param) for param in params] ~ ")";
    }
}

ASTExtern parseExtern(Parser parser, LexicalContext lexicalContext)
{
    if (parser.accept("extern"))
    {
        parser.expect("(");
        parser.expect("C");
        parser.expect(")");
        auto retLoc = parser.loc;
        ASTSymbol ret = parser.parseType(lexicalContext);
        string name = parser.parseIdentifier;
        if (!name.length) parser.fail("identifier expected");
        parser.expect("(");
        ASTParameter[] params = parseIdentifierList(parser, lexicalContext);
        parser.expect(";");
        return new ASTExtern(name, ret, params, retLoc);
    }
    return null;
}

string moduleToFile(string module_)
{
    mut string modulePath;
    for (int i <- 0 .. module_.length) {
        if (module_[i .. i + 1] == ".") modulePath ~= "/";
        else modulePath ~= module_[i .. i + 1];
    }
    return modulePath ~ ".nt";
}

(string, Package) findFileInPackage(string filename, Package pak, Loc loc)
{
    string fileInPackage = pak.path ~ "/" ~ filename;
    if (exists(fileInPackage)) {
        // print(filename ~ " in package '" ~ pak.name ~ "'");
        return (fileInPackage, pak);
    }
    // print(filename ~ " not in package '" ~ pak.name ~ "'");
    for (auto dep <- pak.deps) {
        string fileInDep = dep.path ~ "/" ~ filename;

        if (exists(fileInDep)) {
            // print(filename ~ " in dep package '" ~ dep.name ~ "' of '" ~ pak.name ~ "'");
            return (fileInDep, dep);
        }
        // print(filename ~ " not in dep package '" ~ dep.name ~ "' of '" ~ pak.name ~ "'");
    }
    loc.assert2s(false, "cannot find file '$filename' in package '$(pak.name)' or dependencies");
}

// TODO rewrite this once we have a std.path
(string, Package) findResidualFilename(string filename, Package[] packages)
{
    import std.file : realpath;

    // TODO split then check
    assert(exists(filename));
    string realFilename = realpath(filename);
    // scan packages in reverse order, so that latter arguments override earlier ones
    for (mut int i = cast(int) packages.length - 1; i >= 0; i -= 1) {
        auto package_ = packages[i];
        string path = package_.path;
        if (realFilename.length >= path.length
            && realFilename[0 .. path.length] == path) {
            // print("file " ~ filename ~ " found as " ~ realFilename[path.length + 1 .. $] ~ " in " ~ package_.name);
            return (realFilename[path.length + 1 .. $], package_);
        }
    }
    for (auto package_ <- packages) {
        print(": $(package_.path)");
    }
    print("file '$filename' is not in folder of any package");
    assert(false);
}

class ImportNamespace : Namespace
{
    Module module_;

    string[] symbols;

    this(this.parent, this.module_, this.symbols) {
        this.isContextScope = this.parent.isContextScope;
    }

    override Symbol lookup(string name, Context context, Loc loc, Expression frame) {
        if (!symbols.length || [any symbol == name for symbol in symbols]) {
            if (auto ret = module_.lookupPublic(context, loc, name)) {
                return ret;
            }
        }
        return this.parent.lookup(name, context, loc, frame);
    }
}

// Classes do double duty for both module-level and statement-level imports
class ASTImport : ASTDeclaration
{
    ASTModule module_;

    string[] symbols; // symbols imported. null for "all".

    this(this.module_, string[] symbols) { }

    override Context compile(Context context) {
        auto module_ = compileModule(context, this.module_, true);
        auto namespace = new ImportNamespace(context.namespace, module_, this.symbols);
        auto contextModule = findParent!Module(context.namespace);

        contextModule.addModuleDependency(module_);

        return context.withNamespace(namespace);
    }

    // If you figure out how to do this, I will be grateful. I'mma let it lie for now.
    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTImport'!"); assert(false); }
}

ASTImportStatement parseImportStatement(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    bool isMacroImport = acceptIdentifier(parser, "macro");
    if (!acceptIdentifier(parser, "import"))
    {
        parser.revert;
        return null;
    }

    mut (:normal, string name, string pak | :macro_, ASTModuleBase module_) target;
    parser.commit;

    auto macroArgs = new ParseImportArgs(parser, lexicalContext);
    lexicalContext.macroState.applyMacro(macroArgs);
    if (macroArgs.done) target = (:macro_, macroArgs.module_);
    else {
        mut string pak;
        if (acceptIdentifier(parser, "package"))
        {
            parser.expect("(");
            pak = parser.parseIdentifier;
            parser.expect(")");
            parser.expect(".");
        }

        string modname = parseIdentifier2(parser, ".");
        target = (:normal, modname, pak);
    }

    mut string[] symbols;
    if (!isMacroImport && parser.accept(":")) {
        string expectIdentifier(Parser parser) {
            auto ident = parser.parseIdentifier;
            auto loc = parser.loc;
            // TODO parser.loc
            loc.assert2s(ident.length > 0, "identifier expected");
            return ident;
        }
        bool peek(Parser parser, string str) {
            parser.begin;
            auto ret = parser.accept(str);
            parser.revert;
            return ret;
        }
        // : [symbol] [, symbol]* ,? ;
        symbols ~= parser.expectIdentifier;
        while (parser.accept(",")) {
            if (parser.peek(";")) { break; }
            symbols ~= parser.expectIdentifier;
        }
    }
    parser.expect(";");
    return new ASTImportStatement(target, isMacroImport, symbols, parser.loc);
}

class ASTModuleCache
{
    (string path, ASTModule mod)[] modules;
    this() { }
    ASTModule find(string path) {
        return [first a.mod for a in this.modules where a.path == path else null];
    }
    void add(string path, ASTModule mod) {
        this.modules ~= (path, mod);
    }
}

string astModuleKey(string base, ASTModule mod) {
    return "$(base)_$(mod.pak.name)_$(mod.name)_d$(mod.depth)";
}

class ModuleParserConfig
{
    Package[] packages;

    ASTModule[] defaultImports;

    ASTModuleCache astCache;

    this(this.packages, this.defaultImports, this.astCache) { }
}

ASTModule parseMacroContinuation(CompilerBase compiler, Parser parser, ParserHelper helper, ASTModule astModule,
    ModuleParserConfig config)
{
    parser.begin;
    if (!acceptIdentifier(parser, "macro") || !parser.accept("("))
    {
        parser.revert;
        return null;
    }
    parser.commit;
    string identifier = parser.parseIdentifier;
    parser.expect(")");
    parser.expect(";");

    auto newMacroState = astModule.macroState.dup;

    helper.proxyCall(astModule, identifier, newMacroState);

    auto subModule = new ASTModule(astModule.loc, astModule.name, astModule.pak, newMacroState, astModule);

    return parseModuleBody(compiler, parser, helper, subModule, config);
}

class ASTTemplateInstance : ASTSymbol
{
    ASTSymbol templateDecl;

    ASTSymbol type;

    Loc loc;

    this(this.templateDecl, this.type, this.loc) { }

    override Symbol compile(Context context)
    {
        auto symbol = this.templateDecl.compile(context);
        auto type = beType(this.loc, this.type.compile(context));
        auto templDecl = symbol.instanceOf(TemplateDecl);

        loc.assert2s(!!templDecl, "cannot instantiate non-template");

        return templDecl.resolve(context, this.loc, type);
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTTemplateInstance'!"); assert(false); }
}

class TemplateInstantiationNamespace : Namespace
{
    string parameterName;

    Type parameterType;

    this(this.parent, this.parameterName, this.parameterType) { this.isContextScope = false; }

    override Symbol lookup(string name, Context context, Loc loc, Expression frame) {
        if (name == parameterName) return parameterType;
        return parent.lookup(name, context, loc, frame);
    }

    override string mangle() {
        return this.parent.mangle ~ "_instance_" ~ parameterType.mangle;
    }
}

// very similar to ASTTemplateDecl
// they'll differentiate themselves later, when constraints are added.
class TemplateDecl : Symbol
{
    string name;

    Namespace templateScope;

    string typeParameterName;

    (ASTClassDecl | ASTFunction) content;

    this(this.name, this.templateScope, this.typeParameterName, this.content) { }

    (Module mod, Symbol sym, Type type)[] instantiations;

    Symbol resolve(mut Context context, Loc loc, Type parameter)
    {
        auto contextModule = findParent!Module(context.namespace);

        for (auto entry <- instantiations) {
            if (entry.type.same(parameter)) {
                contextModule.addModuleDependency(entry.mod);
                return entry.sym;
            }
        }

        context = context.withNamespace(
            new TemplateInstantiationNamespace(templateScope, typeParameterName, parameter));
        auto content = this.content.case(
            ASTClassDecl decl: decl.compile(context),
            ASTFunction fun: fun.compile(context).instanceOf(Function));
        string moduleMangle = name ~ "_instance_" ~ parameter.mangle;

        /*
         * Emit instance into new module.
         * This is so that an instantiation with the same types in different modules
         * gets the same reused symbols.
         */
        Module module_ = new Module(loc, name, moduleMangle, null);

        auto sym = content.case(
            ClassType classType: classType.instanceOf(Symbol),
            Function fun: fun.instanceOf(Symbol));
        module_.track(sym);

        instantiations ~= (module_, sym, parameter);

        // after append, to break recursion loops
        module_.compile(context);

        contextModule.addModuleDependency(module_);
        return sym;
    }
}

class ASTTemplateDecl
{
    string name;

    string typeParameterName;

    // TODO generalize
    (ASTClassDecl | ASTFunction) content;

    this(this.name, this.typeParameterName, this.content) { }

    Symbol compile(Context context)
    {
        return new TemplateDecl(name, context.namespace, typeParameterName, content);
    }
}

ASTTemplateDecl parseTemplateDecl(Parser parser, LexicalContext lexicalContext)
{
    auto loc = parser.loc;
    if (!acceptIdentifier(parser, "template"))
    {
        return null;
    }
    auto name = parser.parseIdentifier;
    parser.expect("(");
    auto typeParameter = parser.parseIdentifier;
    parser.expect(")");
    parser.expect("{");
    mut (ASTClassDecl | ASTFunction) member;
    if (ASTClassDecl classDecl = parseClassDecl(parser, lexicalContext))
    {
        member = classDecl;
    }
    else if (ASTFunction fun = parseFunction(parser, lexicalContext))
    {
        member = fun;
    }

    parser.expect("}");
    return new ASTTemplateDecl(name, typeParameter, member);
}

Package selectPackage(Package[] packages, string name, Loc loc)
{
    auto result = [first a for a in packages where a.name == name else null];
    loc.assert2s(!!result, "Undefined package: '$name'");
    return result;
}

ASTModule parseModuleBody(CompilerBase compiler, Parser parser, ParserHelper helper, ASTModule module_,
    ModuleParserConfig config)
{
    ASTModuleBase resolveImport(ASTImportStatement import_) {
        return .resolveImport(compiler, module_.pak, import_, helper, config);
    }

    mut LexicalContext lexicalContext = new LexicalContext(compiler, module_.macroState, &resolveImport);

    while (!parser.eof)
    {
        mut Protection protection = Protection.public_;
        if (parser.accept("public")) {
            protection = Protection.public_;
        } else if (parser.accept("private")) {
            protection = Protection.private_;
        }
        // Hack. :(
        void add(typeof(({ ASTModuleEntry e; e; }).symbol) symbol) {
            module_.entries ~= ASTModuleEntry(protection, symbol);
        }
        if (auto import_ = parseImportStatement(parser, lexicalContext)) {
            auto importedModule = lexicalContext.resolveImport(import_).instanceOf(ASTModule);
            if (import_.isMacroImport)
            {
                module_.macroState = module_.macroState.dup;
                lexicalContext = new LexicalContext(compiler, module_.macroState, &resolveImport);

                lexicalContext.macroState.addImport(importedModule.macroState);
            }
            else
            {
                add(new ASTImport(importedModule, import_.symbols));
            }
            continue;
        }
        if (ASTClassDecl classDecl = parseClassDecl(parser, lexicalContext)) {
            add(classDecl);
            continue;
        }
        if (ASTIntfDecl intfDecl = parseIntfDecl(parser, lexicalContext)) {
            add(intfDecl);
            continue;
        }
        if (ASTTemplateDecl templateDecl = parseTemplateDecl(parser, lexicalContext)) {
            add(templateDecl);
            continue;
        }
        if (ASTExtern extern_ = parseExtern(parser, lexicalContext)) {
            add(extern_);
            continue;
        }
        if (ASTDeclaration decl = parseDeclaration(parser, lexicalContext)) {
            add(decl);
            continue;
        }
        if (ASTEnumDecl enumDecl = parseEnumDecl(parser, lexicalContext)) {
            add(enumDecl);
            continue;
        }
        if (ASTModule submod = parseMacroContinuation(compiler, parser, helper, module_, config))
            return submod;
        if (ASTFunction fun = parseFunction(parser, lexicalContext))
        {
            add(fun);
            continue;
        }
        if (ASTUnitTest ut = parseUnitTest(parser, lexicalContext)) {
            add(ut);
            continue;
        }

        parser.fail("couldn't parse function or struct");
    }
    assert(parser.level == 0);
    return module_;
}

ASTModule resolveImport(CompilerBase compiler, mut Package pak, ASTImportStatement import_, ParserHelper helper,
    ModuleParserConfig config)
{
    (string name, string pak) target = import_.target.case(
        (:normal, string name, string pak): (name, pak),
        (:macro_, ASTModuleBase module_): return module_.instanceOf(ASTModule));
    // TODO enum SearchMode { Transitive, Direct, Commandline }
    mut bool transitive = true;
    if (target.pak.length) {
        pak = selectPackage(config.packages, target.pak, import_.loc);
        transitive = false;
    }
    return getModule(
        compiler, moduleToFile(target.name), pak, true, helper, config, import_.loc);
}

Module compileModule(Context context, ASTModule astModule, bool addDefaultImports)
{
    string moduleKey = astModuleKey(context.platform.ident, astModule);
    // TODO
    // if (Module mod = context.compiler.findModule(moduleKey)?.instanceOf(Module))
    if (auto mod = context.compiler.findModule(moduleKey))
        return mod.instanceOf(Module);

    mut Module parent = null;
    if (astModule.parent)
    {
        parent = compileModule(context, astModule.parent, addDefaultImports);
    }

    string mangledName = mangleModuleName(astModule.name, astModule.pak, astModule.depth);
    Module module_ = new Module(astModule.loc, astModule.name, mangledName, parent);
    auto context = context.withNamespace(module_);

    if (addDefaultImports) {
        context.compiler.addDefaultImports(context, module_);
    }

    for (auto entry <- astModule.entries)
    {
        // TODO lazily resolve members only once they're looked up
        // (allows compilation in any order)
        entry.symbol.case {
            ASTImport import_:
            {
                auto importedModule = compileModule(context, import_.module_, true);

                module_.addImport(importedModule, import_.symbols);
            }
            ASTDeclaration astDecl: {
                if (auto structDecl = astDecl.instanceOf(ASTStructDecl)) {
                    module_.add(structDecl.name, entry.protection, structDecl);
                } else if (auto aliasDecl = astDecl.instanceOf(ASTAliasDecl)) {
                    module_.register(aliasDecl.name, entry.protection, aliasDecl.target.compile(context));
                } else {
                    print(astDecl.repr);
                    assert(false);
                }
            }
            ASTSymbol symbol: {
                // TODO just handle all as ASTDeclaration
                if (auto classDecl = symbol.instanceOf(ASTClassDecl)) {
                    module_.add(classDecl.name, entry.protection, classDecl);
                }
                else if (auto intfDecl = symbol.instanceOf(ASTIntfDecl)) {
                    module_.add(intfDecl.name, entry.protection, intfDecl);
                }
                else if (auto enumDecl = symbol.instanceOf(ASTEnumDecl)) {
                    module_.register(enumDecl.name, entry.protection, enumDecl.compile(context));
                }
                else if (auto aliasDecl = symbol.instanceOf(ASTAliasDecl)) {
                    module_.add(aliasDecl.name, entry.protection, aliasDecl);
                }
                else assert(false);
            }
            ASTExtern extern_:
                module_.register(extern_.name, entry.protection, extern_.compile(context));
            ASTFunction function_:
                module_.add(function_.name, entry.protection, function_);
            ASTUnitTest ut:
                module_.add("", entry.protection, ut);
            ASTTemplateDecl astTemplateDecl:
                module_.register(astTemplateDecl.name, entry.protection, astTemplateDecl.compile(context));
        }
    }
    module_.compile(context);

    context.compiler.addModule(moduleKey, module_);
    return module_;
}

ASTModule getModule(CompilerBase compiler, mut string filename, mut Package pak, bool search, ParserHelper helper,
    ModuleParserConfig config, Loc loc)
{
    auto macroState = new MacroState;
    mut string path = filename;
    if (search) {
        assert2s(!!pak, "search, but no package");
        // TODO destructuring tuple
        auto pair = findFileInPackage(filename, pak, loc);
        path = pair[0];
        pak = pair[1];
    } else {
        assert2s(!pak, "no search, but package");
        auto pair = findResidualFilename(filename, config.packages);
        filename = pair[0];
        pak = pair[1];
    }
    assert(!!pak);
    if (ASTModule mod = config.astCache.find(path)) return mod;

    string code = read(path);
    // do not count references on the file source - it will end
    // up with lots of small inc/decs to fragments that we never free anyway
    (cast(size_t*) &code)[2] = 0;
    Parser parser = new Parser(path, code);

    auto locAtModule = parser.loc;
    parser.expect("module");
    string modname = parseIdentifier2(parser, ".");
    parser.expect(";");

    import std.string : endsWith;

    locAtModule.assert2s2(filename.endsWith(modname.moduleToFile), filename, ": module doesn't match filename");

    ASTModule baseModule = new ASTModule(locAtModule, modname, pak, new MacroState, null);
    ASTModule module_ = parseModuleBody(compiler, parser, helper, baseModule, config);

    config.astCache.add(path, module_);

    return module_;
}
