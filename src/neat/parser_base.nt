module neat.parser_base;

import backend.base;
import helpers;

/**
 * Advance row/column by the text `text`.
 */
StackEntry advance(mut StackEntry entry, size_t distance) {
    mut auto skiptext = entry.text[0 .. distance];
    entry.text = entry.text[distance .. $];

    mut auto nl = skiptext.find("\n");
    if (nl == -1) {
        entry.column += cast(int) distance;
        return entry;
    }
    while (nl != -1) {
        skiptext = skiptext[nl + 1 .. $];
        entry.row += 1;
        nl = skiptext.find("\n");
    }
    // no more newlines found, remainder are columns
    entry.column = cast(int) skiptext.length;
    return entry;
}

struct StackEntry
{
    string text;
    int row, column;
    bool stripped;
}

final class Parser
{
    StackEntry[] stack;

    int level;

    string filename;

    string fulltext;

    this(this.filename, this.fulltext)
    {
        this.stack = new StackEntry[](1);
        this.stack[0] = StackEntry(this.fulltext, row=0, column=0, stripped=false);
        this.level = 0;
        this.verify;
    }

    Loc loc() {
        return Loc(this.filename, row=this.stack[this.level].row, column=this.stack[this.level].column);
    }

    void verify()
    {
        assert(this.stack.length > 0);
        assert(this.level < this.stack.length && this.level >= 0);
        if (this.stack.length > 1024) {
            fail("parse stack overflow");
        }
    }

    string text()
    {
        if (this.stack.length == 0 || this.level >= this.stack.length)
            assert(false);
        return this.stack[this.level].text;
    }

    void begin()
    {
        this.verify;
        if (this.level == this.stack.length - 1)
        {
            StackEntry[] newStack = new StackEntry[](this.stack.length * 2 + 1);
            for (int i <- 0 .. this.stack.length) newStack[i] = this.stack[i];
            this.stack = newStack;
        }
        this.stack[this.level + 1] = this.stack[this.level];
        this.level = this.level + 1;
    }

    void commit()
    {
        assert(this.level > 0);
        this.verify;
        this.stack[this.level - 1] = this.stack[this.level];
        this.level = this.level - 1;
        this.verify;
    }

    void revert()
    {
        this.verify;
        this.level = this.level - 1;
    }

    void drop(size_t length)
    {
        this.stack[this.level] = this.stack[this.level].advance(length);
        this.stack[this.level].stripped = false;
    }

    string peekUniChar()
    {
        auto text = this.text;
        auto len = this.text.utf8NextLength;
        return this.text[0 .. len];
    }

    bool accept(string match)
    {
        this.begin;
        this.strip;
        if (this.text.length < match.length)
        {
            this.revert;
            return false;
        }
        if (this.text[0 .. match.length] == match)
        {
            this.drop(match.length);
            this.commit;
            return true;
        }
        this.revert;
        return false;
    }

    void expect(string match)
    {
        if (!this.accept(match))
        {
            this.fail("'" ~ match ~ "' expected");
        }
    }

    bool eof()
    {
        this.begin;
        this.strip;
        if (this.text.length == 0)
        {
            this.commit;
            return true;
        }
        this.revert;
        return false;
    }

    void strip()
    {
        if (this.stack[this.level].stripped) return;

        mut string text = this.text;
        while (true)
        {
            /* this.text = this.text.strip; */
            while (text.length > 0 && isWhitespace(text[0]))
            {
                text = text[1 .. $];
            }
            if (startsWith(text, "//"))
            {
                int newline = find(text, "\n");
                assert(newline != -1);
                text = text[newline + 1 .. $];
            }
            else
            {
                if (!startsWith(text, "/*"))
                {
                    drop(this.text.length - text.length);
                    this.stack[this.level].stripped = true;
                    return;
                }
                text = text["/*".length .. $];
                mut int commentLevel = 1;
                while (commentLevel > 0)
                {
                    int more = find(text, "/*");
                    int less = find(text, "*/");

                    if (more == -1 && less == -1) {
                        drop(this.text.length - text.length);
                        this.fail("comment spans end of file");
                    }
                    if (less != -1 && (more == -1 || less < more))
                    {
                        text = text[less + "*/".length .. $];
                        commentLevel = commentLevel - 1;
                    }
                    if (more != -1 && (less == -1 || more < less))
                    {
                        text = text[more + "/*".length .. $];
                        commentLevel = commentLevel + 1;
                    }
                }
            }
        }
    }

    void assert_(bool flag, string message)
    {
        if (!flag) this.fail(message);
    }

    void fail(string message)
    {
        this.strip;
        this.loc.fail(message);
    }
}

bool acceptButNot(Parser parser, string match, string nomatch) {
    // TODO peek?
    parser.begin;
    bool fail = parser.accept(nomatch);
    parser.revert;
    return !fail && parser.accept(match);
}

bool isWhitespace(char c)
{
    return c == " "[0] || c == "\t"[0] || c == "\r"[0] || c == "\n"[0];
}

int utf8Decode(string ch)
{
    assert(ch.length > 0);
    if (ch.length == 1) return ch[0];
    if (ch.length == 2) return cast(int)(ch[0]) & 0x1f << 6 | cast(int)(ch[1]) & 0x3f;
    if (ch.length == 3) return cast(int)(ch[0]) & 0x0f << 12 | cast(int)(ch[1]) & 0x3f << 6 | cast(int)(ch[2]) & 0x3f;
    if (ch.length == 4)
        return cast(int)(ch[0]) & 0x07 << 18 | cast(int)(ch[1]) & 0x3f << 12
             | cast(int)(ch[2]) & 0x3f << 6 | cast(int)(ch[3]) & 0x3f;
    if (ch.length == 5)
        return cast(int)(ch[0]) & 0x03 << 24 | cast(int)(ch[1]) & 0x3f << 18
             | cast(int)(ch[2]) & 0x3f << 12 | cast(int)(ch[3]) & 0x3f << 6 | cast(int)(ch[4]) & 0x3f;
    return cast(int)(ch[0]) & 0x01 << 30 | cast(int)(ch[1]) & 0x3f << 24 | cast(int)(ch[2]) & 0x3f << 18
         | cast(int)(ch[3]) & 0x3f << 12 | cast(int)(ch[4]) & 0x3f << 6 | cast(int)(ch[5]) & 0x3f;
}

int utf8NextLength(string text)
{
    // see https://en.wikipedia.org/wiki/UTF-8#FSS-UTF
    if (text.length < 1) return 0;
    int ch0 = text[0];
    if (ch0 < 128) return 1;
    assert(ch0 >= 192);
    assert(text.length >= 2);
    if (ch0 < 224) return 2;
    assert(text.length >= 3);
    if (ch0 < 240) return 3;
    assert(text.length >= 4);
    if (ch0 < 248) return 4;
    assert(text.length >= 5);
    if (ch0 < 252) return 5;
    assert(text.length >= 6);
    if (ch0 < 254) return 6;
    assert(false);
}

bool startsWith(string haystack, string needle)
{
    if (needle.length == 1) {
        return haystack.length >= 1 && haystack[0] == needle[0];
    } else if (needle.length == 2) {
        return haystack.length >= 2 && haystack[0] == needle[0] && haystack[1] == needle[1];
    } else {
        return haystack.length >= needle.length && haystack[0 .. needle.length] == needle;
    }
}

int find(string haystack, string needle)
{
    if (needle.length == 1) {
        for (int i <- 0 .. haystack.length) {
            if (haystack[i] == needle[0]) return i;
        }
    } else if (needle.length == 2) {
        for (int i <- 0 .. haystack.length - 1) {
            if (haystack[i] == needle[0] && haystack[i + 1] == needle[1]) return i;
        }
    } else {
        for (int i <- 0 .. haystack.length - needle.length) {
            if (haystack[i .. i + needle.length] == needle) return i;
        }
    }
    return -1;
}

extern(C) void exit(int);

struct Loc {
    string filename;
    int row, column;

    BackendLocation toBackendLoc() {
        mut BackendLocation ret;
        ret.file = filename;
        ret.line = row;
        ret.column = column;
        return ret;
    }

    string location() {
        return filename ~ ":" ~ itoa(row + 1) ~ ":" ~ itoa(column + 1);
    }

    void fail(string message) {
        .print(location ~ ": error: " ~ message);
        exit(1);
    }

    void assert2s(int test, string msg) { if (!test) this.fail(msg); }
    void assert2s2(int test, string a, string b) { if (!test) this.fail(a ~ b); }
    void assert2s3(int test, string a, string b, string c) { if (!test) this.fail(a ~ b ~ c); }
    void assert2s4(int test, string a, string b, string c, string d) {
        if (!test) this.fail(a ~ b ~ c ~ d); }
    void assert2s5(int test, string a, string b, string c, string d, string e) {
        if (!test) this.fail(a ~ b ~ c ~ d ~ e); }
}
