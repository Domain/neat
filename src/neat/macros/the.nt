module neat.macros.the;

macro import neat.macros.retfail;

import package(compiler).neat.base;
import package(compiler).neat.expr;
import package(compiler).neat.function_;
import package(compiler).neat.parser;
import package(compiler).neat.parser_base;
import package(compiler).neat.statements;
import package(compiler).neat.struct_;
import package(compiler).neat.stuff;
import package(compiler).neat.types;
import package(compiler).helpers;

class ASTTheValue : ASTSymbol
{
    ASTSymbol type;

    Loc loc;

    this(ASTSymbol type, Loc loc) { this.type = type; this.loc = loc; }

    override (Expression | fail Error) compile(Context context)
    {
        auto type = beType(this.loc, this.type.compile(context).retfail);
        mut auto namespace = context.namespace;
        while (namespace) {
            auto varDecl = namespace.instanceOf(VariableDeclaration);
            if (varDecl) {
                if (varDecl.variable.name == "") {
                    // FIXME rename to accessDecl2
                    auto member = varDecl.accessDecl2(context.compiler);

                    if (member.type.same(type))
                        return member;
                }
                namespace = namespace.parent;
            }
            // skip marker
            else namespace = null;
        }
        this.loc.assert2s2(false, "Type not found: ", type.repr());
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTTheValue'!"); assert(false); }
}

class TheValue : Macro
{
    this() { }
    override void apply(MacroArgs args) {
        auto args = args.instanceOf(ParseExpressionBaseArgs);
        if (args) {
            args.symbol = this.parse(args.parser, args.lexicalContext);
        }
    }

    (nullable ASTSymbol | fail Error) parse(Parser parser, LexicalContext context)
    {
        if (!acceptIdentifier(parser, "the"))
        {
            return null;
        }
        ASTSymbol type = parseType(parser, context).retfail.notNull;
        return new ASTTheValue(type, parser.loc());
    }
}

void addTheValueMacro(MacroState macroState)
{
    macroState.addMacro(new TheValue);
}

macro(addTheValueMacro);
