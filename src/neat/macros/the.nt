module neat.macros.the;

import package(compiler).neat.base;
import package(compiler).neat.expr;
import package(compiler).neat.function_;
import package(compiler).neat.parser;
import package(compiler).neat.parser_base;
import package(compiler).neat.statements;
import package(compiler).neat.struct_;
import package(compiler).neat.stuff;
import package(compiler).neat.types;
import package(compiler).helpers;

class ASTTheValue : ASTSymbol
{
    ASTSymbol type;

    this(this.type, this.locRange) { }

    override (Expression | fail Error) compile(Context context)
    {
        auto type = this.type.compile(context)?.beType(this.locRange)?;
        mut nullable Namespace namespace = context.namespace;
        while (namespace) {
            auto varDecl = namespace.instanceOf(VariableDeclaration);
            if (varDecl) {
                if (varDecl.name == "") {
                    // FIXME rename to accessDecl2
                    auto member = varDecl.accessDecl2(context.compiler);

                    if (member.type.same(type))
                        return member;
                }
                namespace = namespace.parent;
            }
            // skip marker
            else namespace = null;
        }
        this.locRange.assert2(false, "Type not found: ", type.repr)?;
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTTheValue'!"); assert(false); }
}

class TheValue : Macro
{
    this() { }
    override void apply(MacroArgs args) {
        auto args = args.instanceOf(ParseExpressionBaseArgs);
        if (args) {
            args.symbol = this.parse(args.parser, args.lexicalContext);
        }
    }

    (nullable ASTSymbol | fail Error) parse(Parser parser, LexicalContext context)
    {
        parser.begin;
        auto from = parser.from?;
        if (!acceptIdentifier(parser, "the")?){
            parser.revert;
            return null;
        }
        parser.commit;
        ASTSymbol type = parseType(parser, context)?.notNull;
        return new ASTTheValue(type, parser.to(from));
    }
}

void addTheValueMacro(MacroState macroState)
{
    macroState.addMacro(new TheValue);
}

macro(addTheValueMacro);
