module neat.macros.hash;

macro import neat.macros.quasiquoting;

import package(compiler).cx.base;
import package(compiler).cx.parser_base;
import package(compiler).helpers;
import neat.hash;

/**
 * This is almost certainly too clever by half.
 */
class StringHashMacro : Macro
{
    Type hashType;

    this() { }

    override void apply(MacroArgs args) {
        auto callMacroArgs = args.instanceOf(CallMacroArgs);
        if (!callMacroArgs) return;
        auto context = callMacroArgs.context;
        // auto isHashMethod = callMacroArgs.target.compile(context).same(
        //   (compiler.$expr (new Hash).adds).compile(context));
        auto classMethodPtr = callMacroArgs.target.compile(context).instanceOf(ClassMethodPtr);
        if (!classMethodPtr) return;
        auto type = classMethodPtr.thisPtr.type;
        // TODO look up Hash with fqn path
        if (!this.hashType) {
            auto hashType = findParent!ModuleBase(context.namespace).lookup("Hash", context, __HERE__, null);
            if (!hashType || !hashType.instanceOf(Type)) return;
            this.hashType = hashType.instanceOf(Type);
        }
        auto isHash = type.same(hashType);
        if (!isHash) return;
        auto method = classMethodPtr.funcPtr.instanceOf(FunctionReferenceBase);
        if (!method) return;
        auto fun = method.getFunction();
        if (fun.name != "adds") return;
        // it's a Hash.adds() call.
        assert(callMacroArgs.args.length == 1);
        auto str = callMacroArgs.args[0].sym.compile(context).instanceOf(StringLiteralBase);
        if (!str) return; // variable call
        auto astMember = callMacroArgs.target.instanceOf(ASTMemberBase);
        if (!astMember) return;
        callMacroArgs.transformed
            = optimizeStringCall(astMember.base, str.text, context, callMacroArgs.loc);
    }

    Expression optimizeStringCall(ASTSymbol base, string str, Context context, Loc loc) {
        auto state = poly_hash_string(str);
        auto add = context.compiler.astLongLiteral(state.add, loc);
        auto mult = context.compiler.astLongLiteral(state.mult, loc);

        return (context.compiler.$expr $base.apply($add, $mult)).compile(context).instanceOf(Expression);
    }
}

void addStringHashMacro(MacroState macroState)
{
    macroState.addMacro(new StringHashMacro);
}

macro(addStringHashMacro);

