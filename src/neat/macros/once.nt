module neat.macros.once;

macro import neat.macros.quasiquoting;

import package(compiler).helpers;
import package(compiler).neat.base;
import package(compiler).neat.hash;
import package(compiler).neat.parser;
import package(compiler).neat.parser_base;
import package(compiler).neat.types;

class ASTOnceExpression : ASTSymbol
{
    OnceMacro macro_;

    ASTSymbol target;

    Loc loc;

    this(this.macro_, this.target, this.loc) { }

    override (Symbol | fail Error) compile(Context context)
    {
        mut Context context = context;
        auto key = context.compiler.astIntLiteral(this.macro_.keyCounter, this.loc);
        this.macro_.keyCounter += 1;

        auto cacheIsSet = new FunctionDeclaration(
            "neat_runtime_cache_isset", new Integer, [
                Parameter(false, "key", false, new Integer)]);
        auto cacheSet = new FunctionDeclaration(
            "neat_runtime_cache_set", new Void, [
                Parameter(false, "key", false, new Integer),
                Parameter(false, "ptr", false, new Pointer(new Void)),
                Parameter(false, "free", false, new FunctionPointer(new Void, [Parameter.fromType(new Pointer(new Void))]))]);
        auto cacheGet = new FunctionDeclaration(
            "neat_runtime_cache_get", new Pointer(new Void), [
                Parameter(false, "key", false, new Integer)]);
        auto rtFree = genRtFree(context, target.compile(context)?.instanceOf(Expression).type);

        context = context.withNamespace(context.compiler.exprAlias(
                    context.namespace, "neat_runtime_cache_isset", cacheIsSet));
        context = context.withNamespace(context.compiler.exprAlias(
                    context.namespace, "neat_runtime_cache_set", cacheSet));
        context = context.withNamespace(context.compiler.exprAlias(
                    context.namespace, "neat_runtime_cache_get", cacheGet));
        context = context.withNamespace(context.compiler.exprAlias(
                    context.namespace, "rt_free", rtFree));

        return (context.compiler.$expr ({
            if (!neat_runtime_cache_isset($key))
            {
                neat_runtime_cache_set($key, cast(void*) $target, &rt_free);
            }
            cast(typeof($target)) neat_runtime_cache_get($key);
        })).compile(context);
    }
}

class FixedSymbolAlias : ASTSymbol
{
    Symbol symbol;
    this(this.symbol) { }
    override (Symbol | fail Error) compile(Context context) { return this.symbol; }
    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'FixedSymbolAlias'"); assert(false); }
}

FunctionDeclaration genRtFree(Context context, Type type) {
    ASTStatement body_() {
        auto type = new FixedSymbolAlias(type);
        return context.compiler.$stmt __destroy(cast($type) ptr);;
    }

    Parameter[] params = [Parameter(false, "ptr", false, new Pointer(new Void))];
    return context.compiler.createRuntimeFunction(
        context, "cache_free_" ~ type.mangle, new Void, params, &body_);
}

class OnceMacro : Macro
{
    int keyCounter;

    this() { }

    override void apply(MacroArgs args) {
        if (auto args = args.instanceOf(ParseExpressionBaseArgs)) {
            args.symbol = this.parse(args.parser, args.lexicalContext);
        }
    }

    (nullable ASTSymbol | fail Error) parse(Parser parser, LexicalContext lexicalContext)
    {
        auto loc = parser.loc();
        if (!acceptIdentifier(parser, "once")?)
        {
            return null;
        }
        if (auto expression = lexicalContext.compiler.parseExpression(parser, lexicalContext)?) {
            return new ASTOnceExpression(this, expression, loc);
        } else {
            return loc.fail("expression expected");
        }
    }
}

void addOnceMacro(MacroState macroState)
{
    macroState.addMacro(new OnceMacro);
}

macro(addOnceMacro);
