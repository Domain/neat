module neat.vectors;

macro import neat.macros.listcomprehension;

import backend.base;
import helpers;
import neat.base;
import neat.expr;
import neat.hash;
import neat.parser_base;

class ASTVectorType : ASTSymbol
{
    Loc loc;

    ASTSymbol elementType;

    int count;

    this(this.loc, this.elementType, this.count) { }

    override Symbol compile(Context context)
    {
        return new VectorType(beType(this.loc, this.elementType.compile(context)), count);
    }
}

class VectorMember : Expression
{
    Expression base;

    int index;

    VectorType vectorType;

    this(this.base, this.index)
    {
        if (auto vectorType = this.base.type.instanceOf(VectorType))
            this.vectorType = vectorType;
        else assert(false);
        this.type = this.vectorType.elementType;
    }

    override int emit(Generator output)
    {
        return output.fun.field(vectorType.emit(output.platform), base.emit(output), index);
    }

    override ExprInfo info() { return base.info; }

    override void hash(Hash hash)
    {
        hash.adds("VectorMember");
        base.hash(hash);
        hash.addl(index);
    }
}

class VectorMemberReference : Reference
{
    Reference base;

    int index;

    VectorType vectorType;

    this(this.base, this.index)
    {
        if (auto vectorType = this.base.type.instanceOf(VectorType))
            this.vectorType = vectorType;
        else assert(false);
        this.type = this.vectorType.elementType;
    }

    override int emit(Generator output)
    {
        return output.fun.load(this.type.emit(output.platform), this.emitLocation(output));
    }

    override int emitLocation(Generator output)
    {
        int reg = this.base.emitLocation(output);

        return output.fun.fieldOffset(this.base.type.emit(output.platform), reg, this.index);
    }

    override ExprInfo info() { return base.info; }

    override void hash(Hash hash)
    {
        hash.adds("VectorMember");
        base.hash(hash);
        hash.addl(index);
    }
}

class VectorType : Type
{
    Type elementType;

    int length;

    this(this.elementType, this.length) {
        this.zeroInitializable = this.elementType.zeroInitializable;
    }

    override BackendType emit(Platform platform) {
        // TODO BackendVectorType
        // TODO [element for 0 .. length]
        BackendType elementType = this.elementType.emit(platform);
        mut BackendType[] members;
        for (i in 0 .. length) members ~= elementType;
        return new BackendStructType(members);
    }

    override bool same(Type other) {
        // TODO
        // return other.instanceOf(VectorType)?.(element.same(this.element) && length == this.length);
        if (auto vt = other.instanceOf(VectorType))
            return elementType.same(vt.elementType) && length == vt.length;
        return false;
    }

    override string mangle() {
        return "vector_$(length)_$(elementType.mangle)";
    }

    override string repr() {
        return "Vector(" ~ elementType.repr ~ ", " ~ itoa(length) ~ ")";
    }

    override void hash(Hash hash) {
        hash.adds("Vector");
        elementType.hash(hash);
        hash.addl(length);
    }

    override nullable Symbol accessMember(
        Loc loc, Context context, nullable Expression base, string field, Protection _)
    {
        // TODO part of type? third parameter?
        nullable Expression do_(Expression base) {
            string coords1 = "uv", coords2 = "xyzw", coords3 = "rgba";
            mut Expression[] members;
            int indexIn(char ch, string str) {
                return [first cast(int) i for i, ch2 in str where ch == ch2 else -1];
            }
            for (char ch in field) {
                if (ch.indexIn(coords1) != -1)
                    members ~= new VectorMember(base, ch.indexIn(coords1));
                else if (ch.indexIn(coords2) != -1)
                    members ~= new VectorMember(base, ch.indexIn(coords2));
                else if (ch.indexIn(coords3) != -1)
                    members ~= new VectorMember(base, ch.indexIn(coords3));
                else return null;
            }
            if (members.length == 1)
                return members[0];
            return (new VectorType(elementType, cast(int) members.length)).mkVector(context, loc, members);
        }
        if (auto base = base)
            return context.compiler.exprWithTemporaryExpr(base, &do_);
        return null;
    }

    override nullable Expression binaryOp(Context context, string op, Expression lhs, Expression rhs, Loc loc)
    {
        auto lhsVectorType = lhs.type.instanceOf(VectorType);
        auto rhsVectorType = rhs.type.instanceOf(VectorType);
        if (lhsVectorType && rhsVectorType) {
            loc.assert2s(lhsVectorType.length == rhsVectorType.length, "vectors have different size");
        }
        loc.assert2s(!!lhsVectorType, "lhs must be vector (TODO)");
        if (op == "==" || op == ">" || op == "<" || op == ">=" || op == "<=") {
            Expression getRight(int index) {
                if (rhsVectorType) return new VectorMember(rhs, index);
                return rhs;
            }
            Expression getRightConverted(Type lhsType, int index) {
                Expression rhs = getRight(index);
                if (auto converted = .implicitConvertTo(context, rhs, lhsType)) {
                    return converted;
                }
                return rhs;
            }
            mut nullable Expression andList;
            for (i in 0 .. lhsVectorType.length) {
                auto leftMember = new VectorMember(lhs, cast(int) i);
                auto rightMember = getRightConverted(leftMember.type, cast(int) i);
                auto test = context.compiler.binaryOp(op, context, leftMember, rightMember, loc);
                if (auto left = andList) andList = new BoolAnd(left, test);
                else andList = test;
            }
            return andList;
        }
        nullable Expression do1(Expression lhs) {
            nullable Expression do2(Expression rhs) {
                Expression getRight(int index) {
                    if (rhsVectorType) return new VectorMember(rhs, index);
                    return rhs;
                }
                Expression getRightConverted(Type lhsType, int index) {
                    Expression rhs = getRight(index);
                    if (auto converted = .implicitConvertTo(context, rhs, lhsType)) {
                        return converted;
                    }
                    return rhs;
                }
                mut Expression[] members;
                for (i in 0 .. lhsVectorType.length) {
                    auto leftMember = new VectorMember(lhs, cast(int) i);
                    auto rightMember = getRightConverted(leftMember.type, cast(int) i);
                    members ~= context.compiler.binaryOp(op, context, leftMember, rightMember, loc);
                }
                return mkVector(context, loc, members);
            }
            return context.compiler.exprWithTemporaryExpr(rhs, &do2);
        }
        return context.compiler.exprWithTemporaryExpr(lhs, &do1);
    }

    override nullable Expression call(Context context, Loc loc, ASTArgument[] args)
    {
        loc.assert2s(args.length == this.length || args.length == 1, "invalid number of args for vector constructor");

        // TODO arg name validation
        auto args = [
            beExpression3(context, arg.sym.compile(context), loc)
            for arg in args];

        // TODO a better way to generically construct types backed by BackendStructType
        if (args.length == 1) {
            auto result = new PairedTemporary(this, Ownership.gifted);
            mut Statement initialize = new UninitializeTemporaryStatement(result);
            nullable Expression do1(Expression arg) {
                Expression do2(Expression arg) {
                    auto arg = expectImplicitConvertTo(context, arg, elementType, loc);
                    for (i in 0 .. this.length) {
                        auto field = new VectorMemberReference(result, cast(int) i);
                        auto stmt = context.compiler.assignStatement(field, arg);

                        initialize = context.compiler.sequence(initialize, stmt);
                    }
                    return context.compiler.statementExpression(initialize, result);
                }
                return context.compiler.consume(context, arg, &do2);
            }
            return context.compiler.exprWithTemporaryExpr(args[0], &do1);
        } else {
            return mkVector(context, loc, args);
        }
    }

    // consumes "args"
    Expression mkVector(Context context, Loc loc, Expression[] args) {
        auto result = new PairedTemporary(this, Ownership.gifted);
        mut Statement initialize = new UninitializeTemporaryStatement(result);
        for (i in 0 .. this.length) {
            auto arg = expectImplicitConvertTo(context, args[i], elementType, loc);
            auto field = new VectorMemberReference(result, cast(int) i);
            auto stmt = context.compiler.move(context, field, arg);

            initialize = context.compiler.sequence(initialize, stmt);
        }
        return context.compiler.statementExpression(initialize, result);
    }
}

