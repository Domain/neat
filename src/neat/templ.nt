module neat.templ;

macro import neat.macros.listcomprehension;

import neat.base;
import neat.class_;
import neat.enums;
import neat.function_;
import neat.parser;
import std.thread;

(nullable ASTSymbol | fail Error) parseTemplateInstantiation(Parser parser, LexicalContext lexicalContext, ASTSymbol base)
{
    parser.begin;
    auto instanceFrom = parser.from?;
    // TODO better way to exclude !operator cases
    if (!parser.accept("!")? || parser.accept("=")? || acceptIdentifier(parser, "is")?) {
        parser.revert;
        return null;
    }
    auto instanceLocRange = parser.to(instanceFrom);
    mut ASTSymbol[] templateArgs;
    (void | fail Error) getTemplateArg() {
        auto templateArg = lexicalContext.compiler.parseType(parser, lexicalContext)?;
        parser.assert_(!!templateArg, "template argument expected")?;
        templateArgs ~= templateArg.notNull;
    }

    if (parser.accept("(")?) {
        // ( [a [, a]*]? )
        if (!parser.accept(")")?) {
            getTemplateArg?;
            while (!parser.accept(")")?) {
                parser.expect(",")?;
                getTemplateArg?;
            }
        }
    } else {
        getTemplateArg?;
    }
    parser.commit;
    return new ASTTemplateInstance(base, templateArgs, instanceLocRange);
}

class ASTTemplateInstance : ASTSymbol
{
    ASTSymbol templateDecl;

    ASTSymbol[] types;

    this(this.templateDecl, this.types, this.locRange) { }

    override (Symbol | fail Error) compile(Context context)
    {
        auto symbol = this.templateDecl.compile(context)?;
        // TODO LocRange in ASTSymbol
        auto types = [type.compile(context)?.beType2(this.locRange)? for type in this.types];
        auto templDecl = symbol.instanceOf(ScopeBoundTemplateDecl);

        locRange.assert(!!templDecl, "cannot instantiate non-template")?;

        return templDecl.instantiate(context, this.locRange, types);
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTTemplateInstance'!"); assert(false); }
}

class TemplateInstantiationNamespace : Namespace
{
    string[] parameterNames;

    Type[] parameterTypes;

    this(this.parent, this.parameterNames, this.parameterTypes) { this.isContextScope = false; }

    override (nullable Symbol | fail Error) lookup(string name, Context context, LocRange locRange) {
        for (i, parameterName in parameterNames) {
            if (name == parameterName) return parameterTypes[i];
        }
        return parent.lookup(name, context, locRange);
    }

    override string mangle() {
        string mangle(Type[] types) {
            return "$(types.length)" ~ [join "_$(type.mangle)" for type in types];
        }
        return this.parent.mangle ~ "_instance_" ~ parameterTypes.mangle;
    }
}

class ScopeBoundTemplateDecl : Symbol
{
    TemplateDecl latent;

    // Held to allow resolving nested functions.
    nullable Expression frame;

    this(this.latent, this.frame) { }

    (Symbol | fail Error) instantiate(Context context, LocRange locRange, Type[] parameters)
    {
        context.pushErrorLoc(locRange);
        auto ret = this.latent.getInstance(context.withFramePointer(this.frame), locRange, parameters);
        context.popErrorLoc;
        return ret;
    }
}

// very similar to ASTTemplateDecl
// they'll differentiate themselves later, when constraints are added.
class TemplateDecl : LatentSymbol
{
    nullable Namespace parent;

    ASTTemplateDecl decl;

    (ModuleBase mod, Type[] types, Symbol value)[] instantiations;

    Mutex mutex;

    this(this.parent, this.decl) {
        this.mutex = new Mutex;
    }

    override Symbol resolve(Context context) {
        return new ScopeBoundTemplateDecl(this, context.framePointer);
    }

    string mangle() {
        // TODO is this sufficient?
        return this.parent.mangle ~ "_" ~ this.decl.name;
    }

    bool same(TemplateDecl other) {
        return this.mangle == other.mangle; // hax
    }

    (Symbol | fail Error) getInstance(mut Context context, LocRange locRange, Type[] parameters)
    {
        if (parameters.length != this.decl.typeParameterNames.length) {
            return locRange.fail(
                "Unexpected number of parameters to template: " ~
                "expected $(this.decl.typeParameterNames.length), but got $(parameters.length)");
        }
        bool areSame(Type[] left, Type[] right) {
            if (left.length != right.length) return false;
            return [all left[i].same(right[i]) for i in 0 .. left.length];
        }
        string mangle(Type[] types) {
            return "$(types.length)" ~ [join "_$(type.mangle)" for type in types];
        }
        auto contextModule = findParent!ModuleBase(context.namespace);

        with (this.mutex.locked) {
            for (entry in this.instantiations) {
                if (entry.types.areSame(parameters)) {
                    contextModule.addModuleDependency(entry.mod);
                    if (auto latent = entry.value.instanceOf(LatentSymbol)) {
                        return latent.resolve(context);
                    }
                    return entry.value;
                }
            }
        }
        context = context.withNamespace(new TemplateInstantiationNamespace(
            this.parent, this.decl.typeParameterNames, parameters));
        Symbol value = this.decl.content.compile(context)?;

        /*
         * Emit instance into new module.
         * This is so that an instantiation with the same types in different modules
         * gets the same reused symbols.
         */
        string moduleMangle = this.mangle ~ "_instance_" ~ parameters.mangle;
        ModuleBase module_ = context.compiler.createModule(this.decl.name, moduleMangle, locRange, null);

        with (this.mutex.locked) {
            this.instantiations ~= (module_, parameters, value);
        }

        Symbol resolvedValue() {
            if (auto latent = value.instanceOf(LatentSymbol)) {
                return latent.resolve(context);
            }
            return value;
        }
        auto resolvedValue = resolvedValue;

        module_.track(resolvedValue);

        // after append, to break recursion loops
        module_.compile(context)?;

        contextModule.addModuleDependency(module_);
        return resolvedValue;
    }
}

class ASTTemplateDecl : ASTDeclaration
{
    string name;

    string[] typeParameterNames;

    ASTSymbol content;

    this(this.name, this.typeParameterNames, this.content) { }

    Symbol compileSymbol(Context context) {
        return new TemplateDecl(context.namespace, this);
    }

    override (Context | fail Error) compile(Context context) {
        return context.withNamespace(new SymbolAlias(context.namespace, this.name, compileSymbol(context)));
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTTemplateDecl'!"); assert(false); }

    override string repr() { return "template $name"; }
}

(nullable ASTTemplateDecl | fail Error) parseTemplateDecl(Parser parser, LexicalContext lexicalContext)
{
    if (!acceptIdentifier(parser, "template")?) {
        return null;
    }
    auto name = parser.parseIdentifier?;
    mut string[] typeParameters;
    // ( [identifier [, identifier]*]? )
    parser.expect("(")?;
    auto typeParameter = parser.parseIdentifier?;
    if (typeParameter.length == 0) {
        parser.expect(")")?;
    } else {
        typeParameters ~= typeParameter;
        while (!parser.accept(")")?) {
            parser.expect(",")?;
            auto typeParameter = parser.parseIdentifier?;
            typeParameters ~= typeParameter;
        }
    }
    parser.expect("{")?;
    // TODO generalize (parseSymbol)?
    mut uninitialized ASTSymbol member;
    parser.strip?;
    auto contentFrom = parser.from?;
    nullable ASTSymbol member = parseTemplateContents(parser, lexicalContext)?;
    if (!member) {
        return parser.to(contentFrom).fail("template member expected");
    }

    parser.expect("}")?;
    return new ASTTemplateDecl(name, typeParameters, member.notNull);
}

// parse "the sort of thing that can appear in a `template`"
// TODO better name for this category. Maybe it really is parseDeclaration?
(nullable ASTSymbol | fail Error) parseTemplateContents(Parser parser, LexicalContext lexicalContext) {
    // FIXME
    auto classDecl = parseClassDecl(parser, lexicalContext)?;
    if (ASTClassDecl classDecl = classDecl) {
        return classDecl;
    }
    auto intfDecl = parseIntfDecl(parser, lexicalContext)?;
    if (ASTIntfDecl intfDecl = intfDecl) {
        return intfDecl;
    }
    parser.begin;
    if (ASTDeclaration decl = lexicalContext.compiler.parseDeclaration(parser, lexicalContext)?) {
        // FIXME figure out how to converge ASTDeclaration and ASTSymbol
        // imports and structs are only "sort of" the same thing - maybe make
        // an ASTTypeDeclaration that can wrap an ASTSymbol?
        if (auto structDecl = decl.instanceOf(ASTStructDecl)) {
            parser.commit;
            return structDecl.struct_;
        }
        parser.revert;
        return null;
    }
    parser.revert;
    if (auto fun = parseFunction(parser, lexicalContext)?) {
        return fun;
    }
    if (ASTEnumDecl enumDecl = parseEnumDecl(parser, lexicalContext)?) {
        return enumDecl;
    }
    return null;
}
