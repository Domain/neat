module neat.pragmas;

macro import neat.macros.retfail;

import helpers;
import neat.base;
import neat.expr;
import neat.parser_base;
import neat.types;

(nullable ASTPragma | fail Error) parsePragma(Parser parser, LexicalContext lexicalContext)
{
    if (!parser.accept("pragma"))
        return null;
    parser.expect("(");
    auto name = parser.parseIdentifier;
    auto loc = parser.loc;
    mut ASTSymbol[] args;
    while (parser.accept(",")) {
        if (auto arg = retfail lexicalContext.compiler.parseExpression(parser, lexicalContext))
            args ~= arg;
        else parser.fail("Expected expression argument");
    }
    parser.expect(")");
    parser.expect(";");
    return new ASTPragma(loc, name, args);
}

class ASTPragma
{
    Loc loc;

    string name;

    ASTSymbol[] args;

    this(this.loc, this.name, this.args) { }

    FinishedSymbol compile(Context context) {
        if (this.name == "lib") {
            if (this.args.length != 1)
                this.loc.fail("Unexpected arguments for pragma(lib)");
            auto asStr = this.args[0].instanceOf(ASTStringLiteral);
            if (!asStr) this.loc.fail("Expected string as argument for pragma(lib)");
            return new PragmaLibHint(asStr.text);
        }
        // Note: We don't skip unknown pragmas, because we don't
        // care about cross-compiler compat. (what other compilers?)
        this.loc.fail("Unknown pragma '$name'");
    }
}

class PragmaLibHint : FinishedSymbol
{
    string library;

    this(this.library) { }

    override void emit(Generator generator) {
        generator.addLibrary(this.library);
    }

    override void hash(Hash hash) {
        hash.adds("pragma_lib");
        hash.adds(this.library);
    }
}
