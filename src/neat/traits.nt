// Very, very similar to neat.pragma. (Copypaste, why can't I quit you)
module neat.traits;

macro import neat.macros.listcomprehension;
macro import neat.macros.retfail;

import helpers;
import neat.base;
import neat.expr;
import neat.parser_base;
import neat.types;

(nullable ASTTrait | fail Error) parseTrait(Parser parser, LexicalContext lexicalContext)
{
    if (!parser.accept("__traits"))
        return null;
    parser.expect("(");
    auto trait = parser.parseIdentifier;
    auto loc = parser.loc;
    mut ASTSymbol[] args;
    while (parser.accept(",")) {
        if (auto arg = retfail lexicalContext.compiler.parseExpression(parser, lexicalContext))
            args ~= arg;
        else parser.fail("expected expression argument");
    }
    parser.expect(")");
    return new ASTTrait(loc, trait, args);
}

class ASTTrait : ASTSymbol
{
    Loc loc;

    string name;

    ASTSymbol[] args;

    this(this.loc, this.name, this.args) { }

    override (Symbol | fail Error) compile(Context context) {
        if (name == "hasMember") {
            this.loc.assert2s(args.length == 2, "__traits(hasMember) expected two arguments");
            return .hasMember(
                context, retfail args[0].compile(context), retfail args[1].compile(context), loc);
        }
        if (name == "versionSet") {
            this.loc.assert2s(args.length == 1, "__traits(versionSet) expected one argument");
            return .versionSet(
                context, retfail args[0].compile(context), loc);
        }
        this.loc.fail("unknown trait: \"$name\"");
    }
}

(Symbol | fail Error) hasMember(Context context, Symbol value, Symbol member, Loc loc) {
    auto valueExpr <- value.isExpressionImplCall(context, loc);
    auto stringLit = member.instanceOf(StringLiteral);
    loc.assert2s(!!valueExpr, "__traits(hasMember) expected expression as first argument");
    loc.assert2s(!!stringLit, "__traits(hasMember) expected string literal as second argument");
    auto valueExpr = valueExpr.notNull;
    auto stringLit = stringLit.notNull;
    auto sym = retfail valueExpr.type.accessMember(
        loc, context, valueExpr, stringLit.text, Protection.private_);

    return context.compiler.boolLiteral(!!sym);
}

Symbol versionSet(Context context, Symbol name, Loc loc) {
    auto nameLit = name.instanceOf(StringLiteral);
    loc.assert2s(!!nameLit, "__traits(versionSet) expected string literal as argument");
    auto nameLit = nameLit.notNull;
    bool isSet = [any a == nameLit.text for a in context.platform.versions];

    return context.compiler.boolLiteral(isSet);
}
