class TestBranchRecord {
    void* ptr;
    void resolveThen(int target) {
        _testBranchRecord_resolveThen(this.ptr, target);
    }
    void resolveElse(int target) {
        _testBranchRecord_resolveElse(this.ptr, target);
    }
}

class BackendFunction {
    void* ptr;
    int arg(int index) {
        return _backendFunction_arg(this.ptr, index);
    }
    int intLiteral(int value) {
        return _backendFunction_intLiteral(this.ptr, value);
    }
    int call(void* ret, char* name, void* args_ptr, int args_len) {
        return _backendFunction_call(this.ptr, ret, name, args_ptr, args_len);
    }
    void ret(int reg) {
        _backendFunction_ret(this.ptr, reg);
    }
    TestBranchRecord testBranch(int reg) {
        TestBranchRecord record = new TestBranchRecord;
        record.ptr = _backendFunction_testBranch(this.ptr, reg);
        return record;
    }
    int blockIndex()
    {
        return _backendFunction_blockIndex(this.ptr);
    }
}

class BackendModule {
    void* ptr;
    void* intType() {
        return _backendModule_intType(this.ptr);
    }
    BackendFunction define(void* ret, char* name, void* args_ptr, int args_len)
    {
        BackendFunction fun = new BackendFunction;
        fun.ptr = _backendModule_define(this.ptr, ret, name, args_ptr, args_len);
        return fun;
    }
    void call(char* name, void* ret_ptr, void* args_ptr, int args_len)
    {
        _backendModule_call(this.ptr, name, ret_ptr, args_ptr, args_len);
    }
    void dump()
    {
        _backendModule_dump(this.ptr);
    }
}

class Backend {
    void* ptr;
    BackendModule createModule() {
        BackendModule mod = new BackendModule;
        mod.ptr = _backend_createModule(this.ptr);
        return mod;
    }
}

Backend new_Backend()
{
    Backend backend = new Backend;
    backend.ptr = _backend();
    return backend;
}

/*int ack(int m, int n) {
    if (m == 0) return n + 1;
    if (n == 0) return ack(m - 1, 1);
    return ack(m - 1, ack(m, n - 1));
}*/

void main() {
    print("-----");
    Backend backend = new_Backend();
    BackendModule mod = backend.createModule();
    void* intType = mod.intType();

    void** ackArgs = _alloc(void*, 2);
    ackArgs[0] = intType;
    ackArgs[1] = intType;

    BackendFunction ack = mod.define("ack", intType, ackArgs, 2);
    int m = ack.arg(0);
    int n = ack.arg(1);
    int zero = ack.intLiteral(0);
    int one = ack.intLiteral(1);

    int* eq_args = _alloc(int, 2);
    eq_args[0] = m;
    eq_args[1] = zero;
    int if1_test_reg = ack.call(intType, "cxruntime_int_eq", eq_args, 2);
    TestBranchRecord if1_test_jumprecord = ack.testBranch(if1_test_reg);

    if1_test_jumprecord.resolveThen(ack.blockIndex());
    int* add_args = _alloc(int, 2);
    add_args[0] = n;
    add_args[1] = one;
    int add = ack.call(intType, "cxruntime_int_add", add_args, 2);
    ack.ret(add);

    if1_test_jumprecord.resolveElse(ack.blockIndex());
    int* eq2_args = _alloc(int, 2);
    eq2_args[0] = n;
    eq2_args[1] = zero;
    int if2_test_reg = ack.call(intType, "cxruntime_int_eq", eq2_args, 2);
    TestBranchRecord if2_test_jumprecord = ack.testBranch(if2_test_reg);

    if2_test_jumprecord.resolveThen(ack.blockIndex());
    int* sub_args = _alloc(int, 2);
    sub_args[0] = m;
    sub_args[1] = one;
    int sub = ack.call(intType, "cxruntime_int_sub", sub_args, 2);
    int* ack1_args = _alloc(int, 2);
    ack1_args[0] = sub;
    ack1_args[1] = one;
    int ackrec = ack.call(intType, "ack", ack1_args, 2);
    ack.ret(ackrec);

    if2_test_jumprecord.resolveElse(ack.blockIndex());
    int* sub2_args = _alloc(int, 2);
    sub2_args[0] = n;
    sub2_args[1] = one;
    int n1 = ack.call(intType, "cxruntime_int_sub", sub2_args, 2);
    int* ack2_args = _alloc(int, 2);
    ack2_args[0] = m;
    ack2_args[1] = n1;
    int ackrec1 = ack.call(intType, "ack", ack2_args, 2);
    int* sub3_args = _alloc(int, 2);
    sub3_args[0] = m;
    sub3_args[1] = one;
    int m1 = ack.call(intType, "cxruntime_int_sub", sub3_args, 2);
    int* ack3_args = _alloc(int, 2);
    ack3_args[0] = m1;
    ack3_args[1] = ackrec1;
    int ackrec2 = ack.call(intType, "ack", ack3_args, 2);
    ack.ret(ackrec2);

    mod.dump();

    int marg = 3;
    int narg = 8;
    void** ack_params = _alloc(void*, 2);
    ack_params[0] = &marg;
    ack_params[1] = &narg;
    int ret;
    mod.call("ack", &ret, ack_params, 2);
    assert(ret == 2045);
}
