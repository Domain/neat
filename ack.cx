module ack;

class TestBranchRecord {
    void* ptr;
    this(void* ptr) { this.ptr = ptr; }
    void resolveThen(int target) {
        _testBranchRecord_resolveThen(this.ptr, target);
    }
    void resolveElse(int target) {
        _testBranchRecord_resolveElse(this.ptr, target);
    }
}

class BackendFunction {
    void* ptr;
    this(void* ptr) { this.ptr = ptr; }
    int arg(int index) {
        return _backendFunction_arg(this.ptr, index);
    }
    int intLiteral(int value) {
        return _backendFunction_intLiteral(this.ptr, value);
    }
    int call(void* ret, char[] name, void*[] args) {
        return _backendFunction_call(this.ptr, ret, name, args.ptr, args.length);
    }
    void ret(int reg) {
        _backendFunction_ret(this.ptr, reg);
    }
    TestBranchRecord testBranch(int reg) {
        return new TestBranchRecord(_backendFunction_testBranch(this.ptr, reg));
    }
    int blockIndex()
    {
        return _backendFunction_blockIndex(this.ptr);
    }
}

class BackendModule {
    void* ptr;
    this(void* ptr) { this.ptr = ptr; }
    void* intType() {
        return _backendModule_intType(this.ptr);
    }
    BackendFunction define(void* ret, char[] name, void*[] args)
    {
        return new BackendFunction(_backendModule_define(this.ptr, name, ret, args.ptr, args.length));
    }
    void call(void* ret_ptr, char[] name, void*[] args)
    {
        _backendModule_call(this.ptr, ret_ptr, name, args.ptr, args.length);
    }
    void dump()
    {
        _backendModule_dump(this.ptr);
    }
}

class Backend {
    void* ptr;
    this() { this.ptr = _backend(); }
    BackendModule createModule() {
        return new BackendModule(_backend_createModule(this.ptr));
    }
}

/*int ack(int m, int n) {
    if (m == 0) return n + 1;
    if (n == 0) return ack(m - 1, 1);
    return ack(m - 1, ack(m, n - 1));
}*/

void main() {
    print("-----");
    Backend backend = new Backend();
    BackendModule mod = backend.createModule();
    void* intType = mod.intType();

    BackendFunction ack = mod.define(intType, "ack", [intType, intType]);
    int m = ack.arg(0);
    int n = ack.arg(1);
    int zero = ack.intLiteral(0);
    int one = ack.intLiteral(1);

    int if1_test_reg = ack.call(intType, "cxruntime_int_eq", [m, zero]);
    TestBranchRecord if1_test_jumprecord = ack.testBranch(if1_test_reg);

    if1_test_jumprecord.resolveThen(ack.blockIndex());
    int add = ack.call(intType, "cxruntime_int_add", [n, one]);
    ack.ret(add);

    if1_test_jumprecord.resolveElse(ack.blockIndex());
    int if2_test_reg = ack.call(intType, "cxruntime_int_eq", [n, zero]);
    TestBranchRecord if2_test_jumprecord = ack.testBranch(if2_test_reg);

    if2_test_jumprecord.resolveThen(ack.blockIndex());
    int sub = ack.call(intType, "cxruntime_int_sub", [m, one]);
    int ackrec = ack.call(intType, "ack", [sub, one]);
    ack.ret(ackrec);

    if2_test_jumprecord.resolveElse(ack.blockIndex());
    int n1 = ack.call(intType, "cxruntime_int_sub", [n, one]);
    int ackrec1 = ack.call(intType, "ack", [m, n1]);
    int m1 = ack.call(intType, "cxruntime_int_sub", [m, one]);
    int ackrec2 = ack.call(intType, "ack", [m1, ackrec1]);
    ack.ret(ackrec2);

    mod.dump();

    int marg = 3;
    int narg = 8;
    void* margp = &marg;
    void* nargp = &narg;
    int ret;
    mod.call(&ret, "ack", [margp, nargp]);
    assert(ret == 2045);
}
