module ack;

import backend.proxy;

extern(C) void print(char[]);
extern(C) void assert(int);

/*int ack(int m, int n) {
    if (m == 0) return n + 1;
    if (n == 0) return ack(m - 1, 1);
    return ack(m - 1, ack(m, n - 1));
}*/

void main(string[] args) {
    print("-----");
    Backend backend = new Backend();
    BackendModule mod = backend.createModule();
    Platform platform = new Platform;
    void* intType = platform.intType();

    void*[] ackArgs = new void*[](2);
    ackArgs[0] = intType; ackArgs[1] = intType;

    BackendFunction ack = mod.define("ack", intType, ackArgs);
    int m = ack.arg(0);
    int n = ack.arg(1);
    int zero = ack.intLiteral(0);
    int one = ack.intLiteral(1);

    int if1_test_reg = ack.binop("==", m, zero);
    TestBranchRecord if1_test_jumprecord = ack.testBranch(if1_test_reg);

    if1_test_jumprecord.resolveThen(ack.blockIndex());
    int add = ack.binop("+", n, one);
    ack.ret(add);

    if1_test_jumprecord.resolveElse(ack.blockIndex());
    int if2_test_reg = ack.binop("==", n, zero);
    TestBranchRecord if2_test_jumprecord = ack.testBranch(if2_test_reg);

    if2_test_jumprecord.resolveThen(ack.blockIndex());
    int sub = ack.binop("-", m, one);
    int[] recArgs = new int[](2);
    recArgs[0] = sub; recArgs[1] = one;
    int ackrec = ack.call(intType, "ack", recArgs);
    ack.ret(ackrec);

    if2_test_jumprecord.resolveElse(ack.blockIndex());
    int n1 = ack.binop("-", n, one);
    int[] rec1Args = new int[](2);
    rec1Args[0] = m; rec1Args[1] = n1;
    int ackrec1 = ack.call(intType, "ack", rec1Args);
    int m1 = ack.binop("-", m, one);
    int[] rec2Args = new int[](2);
    rec2Args[0] = m1; rec2Args[1] = ackrec1;
    int ackrec2 = ack.call(intType, "ack", rec2Args);
    ack.ret(ackrec2);

    mod.dump();

    int marg = 3;
    int narg = 8;
    void*[] args = new void*[](2);
    args[0] = &marg;
    args[1] = &narg;
    int ret;
    mod.call(&ret, "ack", args);
    assert(ret == 2045);
}
