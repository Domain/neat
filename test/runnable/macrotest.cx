module macrotest;

macro import cx.macros.assert;
macro import cx.macros.the;
macro import cx.macros.listcomprehension;
macro import cx.macros.once;

extern(C) void print(char[]);

int square(int) { return (the int) * the int; }

class A {
    this() { }
}

void listcotest() {
    int[] arr = [2, 3, 4];
    assert([a * 2 for a in arr] == [4, 6, 8]);
    int i;
    void foo() { i += 1; }
    [foo() for x in arr];
    assert(i == 3);

    assert([any a > 2 for a in arr]);
    assert(![any a > 4 for a in arr]);

    // equivalent
    assert([first true for a in arr where a > 2 else false]);
    assert(![first true for a in arr where a > 4 else false]);
    assert([first i for i, a in arr where a > 3 else -1] == 2);

    auto list = [[1, 2], [3, 4], [5, 6]];
    assert([first a[1] for a in list where a[0] > 1 else -1] == 4);

    assert([all a > 1 for a in arr]);
    assert(![all a > 2 for a in arr]);
}

class Object {
    int i;

    this(this.i) { }
}

void oncetest() {
    Object make(int i) { return once new Object(i); }
    Object o1 = make(1), o2 = make(2);
    assert(o1.i == 1 && o1 is o2);
}

void main(string[] args) {
    print("macrotest");
    A a = new A;
    assert(a); // this would not have worked before, because objects are not bools
    listcotest();
    oncetest();
    print("- success");
    assert(square(2) == 4);
}
