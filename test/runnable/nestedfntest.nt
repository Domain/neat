module nestedfntest;

macro import neat.macros.assert;

void callme(void delegate() dg) {
    dg();
}

class Class {
    int value;
    this(this.value) { }
}

// this was a bug that cost me a day.
void bugtest() {
    nullable Class a = new Class(5), b = new Class(6);
    if (auto a = a) {
        void test() {
            assert(a.value == 5);
        }
        test;
    }
}

void templatedNestedFnTest() {
    template foo(T) {
        T foo(T t) {
            return t;
        }
    }
    assert(foo!int(3) == 3);
    assert(foo!string("hello") == "hello");
}

void templatedNestedFnTest2() {
    int i = 3;
    template foo(T) {
        T foo(T t) {
            return t + i;
        }
    }
    void subfun() {
        assert(foo!int(4) == 7);
    }
    subfun;
}

void main() {
    mut int i = 1;
    void incr() { i += 1; }
    incr();
    assert(i == 2);
    callme(&incr);
    assert(i == 3);
    bugtest;
    templatedNestedFnTest;
    templatedNestedFnTest2;
}
