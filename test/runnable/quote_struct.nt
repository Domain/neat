module quote_struct;

macro import neat.macros.quasiquoting;

import package(compiler).helpers;
import package(compiler).neat.base;
import package(compiler).neat.parser;
import package(compiler).neat.parser_base;
import package(compiler).neat.statements;
import package(compiler).neat.struct_;
import package(compiler).neat.stuff ;

class ASTQuoteTest : ASTStatement
{
    ASTStatement child;

    this(this.child) { }

    override StatementCompileResult compile(Context context) {
        auto childExpr = context.compiler.astStatementExpression(
            [this.child], context.compiler.astIntLiteral(0, __HERE__), __HERE__);
        auto stmt = context.compiler.$stmt {
            struct Test
            {
                int i;
                int foo() { return i * i; }
            }
            $childExpr;
        };
        return stmt.compile(context);
    }
}

class QuoteTest : Macro
{
    this() { }
    override void apply(MacroArgs args) {
        auto args = args.instanceOf(ParseStatementArgs);
        if (args) {
            args.statement = this.parse(args.parser, args.lexicalContext);
        }
    }

    ASTStatement parse(Parser parser, LexicalContext lexicalContext) {
        auto compiler = lexicalContext.compiler;
        auto loc = parser.loc();

        parser.begin();
        if (!parser.accept("quotetest")) {
            parser.revert();
            return null;
        }
        parser.commit;
        auto stmt = compiler.parseStatement(parser, lexicalContext);
        return new ASTQuoteTest(stmt);
    }
}

void addTestMacro(MacroState macroState) {
    macroState.addMacro(new QuoteTest);
}

macro(addTestMacro);

void main() {
    quotetest {
        Test t = Test(5);
        assert(t.foo == 25);
    }
}
