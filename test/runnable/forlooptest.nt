module forlooptest;

macro import neat.macros.assert;

void extlooptest() {
    string[] array = ["foo", "bar"];
    for (a in array) { assert(a == "foo"); break; }
    for (auto a in array) { assert(a == "foo"); break; }
    for (i, a in array) { assert(a == "foo" && i == 0); break; }
    for (size_t i, string a in array) { assert(a == "foo" && i == 0); break; }
}

void main()
{
    {
        mut int k = 0;
        for (mut int i = 0; i < 10; i += 1) {
            k += 1;
        }
        assert(k == 10);
        for (mut int i = 10; i > 0; i -= 1) {
            k -= 1;
        }
        assert(k == 0);
    }
    // test: loop variable reinitialization
    for (mut int i = 0; i < 10; i += 1) {
        mut int l;
        assert(l == 0);
        l = 1;
    }
    {
        mut int i;
        for (mut int k = 0; k < 10; k += 1) {
            if (k < 3) continue;
            i += 1;
            if (k > 5) break;
        }
        assert(i == 4);
    }
    {
        mut int i;
        for (j in 0..10) {
            i += 1;
        }
        assert(i == 10);
    }
    {
        mut int sum;
        for (j in [2, 3, 4]) {
            sum += j;
        }
        assert(sum == 9);
    }

    extlooptest;
}
