module lifetime;

macro import cx.macros.assert;
extern(C) void print(string);

struct S
{
    int* copyctor;
    int* dtor;
    this(S* s)
    {
        // print("Construct.");
        copyctor = s.copyctor;
        dtor = s.dtor;
        *copyctor += 1;
    }
    ~this()
    {
        // print("Destruct.");
        *dtor += 1;
    }
}

void test_scope()
{
    // print("- scope");
    int copyctor = 0; int dtor = 0;
    { S s = S(&copyctor, &dtor); }
    assert(copyctor == 1);
    assert(dtor == 2);
}

void test_if()
{
    // print("- if");
    int copyctor = 0; int dtor = 0;
    if (true) S s = S(&copyctor, &dtor);
    assert(copyctor == 1);
    assert(dtor == 2);
}

void test_while()
{
    // print("- while");
    int copyctor = 0; int dtor = 0;
    bool called;
    bool once() { if (!called) { called = true; return true; } return false; }
    while (once()) S s = S(&copyctor, &dtor);
    assert(copyctor == 1);
    assert(dtor == 2);
}

void test_nested()
{
    // print("- nested");
    int copyctor = 0; int dtor = 0;
    void nest() S s = S(&copyctor, &dtor);
    nest();
    assert(copyctor == 1);
    assert(dtor == 2);
}

void test_discard()
{
    // print("- discard");
    int copyctor = 0; int dtor = 0;
    S(&copyctor, &dtor);
    assert(copyctor == 0);
    assert(dtor == 1);
}

void test_discard_variable()
{
    // print("- discard var");
    int copyctor = 0; int dtor = 0;
    {
        S s = S(&copyctor, &dtor);
        s;
    }
    assert(copyctor == 2);
    assert(dtor == 3);
}

void test_discard_return()
{
    // print("- discard var");
    int copyctor = 0; int dtor = 0;
    int calls;
    S test() { calls += 1; return S(&copyctor, &dtor); }
    {
        test();
    }
    assert(calls == 1);
    assert(copyctor == 2);
    assert(dtor == 3);
}

void test_call()
{
    // print("- call");
    int copyctor = 0; int dtor = 0;
    {
        auto s = S(&copyctor, &dtor);
        void foo(S s) { }
        foo(s);
    }
    // the function call does not create a copy
    // because it exists in the surrounding lifetime.
    assert(copyctor == 1);
    assert(dtor == 2);
}

void main()
{
    test_scope();
    test_if();
    test_while();
    test_nested();
    test_discard();
    test_discard_variable();
    test_discard_return();
    test_call();
}
