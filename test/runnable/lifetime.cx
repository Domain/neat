module lifetime;

macro import cx.macros.assert;
extern(C) void print(string);
extern(C) string cxruntime_itoa(int);

string itoa(int i) { return cxruntime_itoa(i); }

void dbg(string text)
{
    print(text);
}

struct S
{
    int* copyctor;
    int* dtor;
    this(S s)
    {
        dbg("Construct.");
        copyctor = s.copyctor;
        dtor = s.dtor;
        *copyctor += 1;
    }
    ~this()
    {
        dbg("Destruct.");
        *dtor += 1;
    }
}

void test_scope()
{
    dbg("- scope");
    int copyctor = 0; int dtor = 0;
    { S s = S(&copyctor, &dtor); }
    assert(copyctor == 0 && dtor == 1);
}

void test_if()
{
    dbg("- if");
    int copyctor = 0; int dtor = 0;
    if (true) S s = S(&copyctor, &dtor);
    assert(copyctor == 0 && dtor == 1);
}

void test_while()
{
    dbg("- while");
    int copyctor = 0; int dtor = 0;
    bool called;
    bool once() { if (!called) { called = true; return true; } return false; }
    while (once()) S s = S(&copyctor, &dtor);
    assert(copyctor == 0 && dtor == 1);
}

void test_nested()
{
    dbg("- nested");
    int copyctor = 0; int dtor = 0;
    void nest() S s = S(&copyctor, &dtor);
    nest();
    assert(copyctor == 0 && dtor == 1);
}

void test_discard()
{
    dbg("- discard");
    int copyctor = 0; int dtor = 0;
    S(&copyctor, &dtor);
    assert(copyctor == 0 && dtor == 1);
}

void test_discard_variable()
{
    dbg("- discard var");
    int copyctor = 0; int dtor = 0;
    {
        S s = S(&copyctor, &dtor);
        s; // this does nothing, because it's a non-temporary expression
    }
    assert(copyctor == 0 && dtor == 1);
}

void test_discard_return1()
{
    dbg("- discard return 1");
    int copyctor = 0; int dtor = 0;
    int calls;
    S test() { calls += 1; return S(&copyctor, &dtor); }
    {
        test();
    }
    assert(calls == 1 && copyctor == 0 && dtor == 1);
}

void test_discard_return2()
{
    dbg("- discard return 2");
    int copyctor = 0; int dtor = 0;
    int calls;
    S test() { calls += 1; S s = S(&copyctor, &dtor); return s; }
    {
        S s = test();
    }
    assert(calls == 1 && copyctor == 1 && dtor == 2);
}

void test_call1()
{
    dbg("- call 1");
    int copyctor = 0; int dtor = 0;
    {
        auto s = S(&copyctor, &dtor);
        void foo(S s) { }
        foo(s);
    }
    // the function call does not create a copy
    // because s exists in the surrounding lifetime.
    assert(copyctor == 0 && dtor == 1);
}

void test_call2()
{
    dbg("- call 2");
    int copyctor = 0; int dtor = 0;
    {
        void foo(S s) { }
        foo(S(&copyctor, &dtor));
    }
    // the function call still does not create a copy
    // S is cleaned up after the call,
    assert(copyctor == 0 && dtor == 1);
}

void test_array()
{
    dbg("- array");
    int copyctor = 0; int dtor = 0;
    {
        S[] array = [S(&copyctor, &dtor)];
        assert(copyctor == 0 && dtor == 0); // temporary initializing a literal
    }
    assert(copyctor == 0 && dtor == 1);
}

struct T
{
    S s;
}

void test_struct_field()
{
    dbg("- struct field");
    int copyctor = 0; int dtor = 0;
    {
        T t = T(S(&copyctor, &dtor));
        assert(copyctor == 1 && dtor == 1);
    }
    assert(copyctor == 1 && dtor == 2);
}

void main()
{
    test_scope();
    test_if();
    test_while();
    test_nested();
    test_discard();
    test_discard_variable();
    test_discard_return1();
    test_discard_return2();
    test_call1();
    test_call2();
    test_array();
    test_struct_field();
}
