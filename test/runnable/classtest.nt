module classtest;

macro import neat.macros.assert;

extern(C) void print(string);

void main()
{
    Class1 class1 = new Class1;
    assert(class1.getValue() == 5);
    Class2 class2 = new Class2(6);
    assert(class2.getValue() == 6);
    Class1 class2_as_1 = class2; // TODO new Class2(6)
    assert(class2_as_1 == class2);
    assert(class2_as_1.getValue() == 6);
    assert(!!class2_as_1.instanceOf(Class1));
    assert(!!class2_as_1.instanceOf(Class2));
    if (class2_as_1.instanceOf(Class3)) print("something is very wrong.");
    assert(!class2_as_1.instanceOf(Class3));
}

class Class1
{
    this() { }
    int value() { return 5; }
    int getValue() { return this.value(); }
}

class Class2 : Class1
{
    int a;
    this(this.a) { }
    override int value() { return this.a; }
}

class Class3 : Class2
{
    Class3 parent;
    this(this.a) { }
    override int value() { return super.value + 4; }
}

class Class4a { Class4b partner; }
class Class4b { Class4a partner; }

unittest
{
    assert((new Class3(5)).value == 9);
}

class Class5 {
    this() { }

    import std.string : replace;

    string test() { return "Hello World".replace(" ", "_"); }
}

unittest
{
    assert((new Class5).test == "Hello_World");
}
