module sparkline;

macro import cx.macros.assert;

extern(C) void print(char[]);

string sparkline(string[] ticks, int[] data) {
    assert(ticks.length > 0);
    assert(data.length > 0);

    int n = (cast(int) ticks.length) - 1;
    mut int min = data[0];
    mut int max = data[0];

    for (int point <- data) {
        if (point < min) min = point;
        if (point > max) max = point;
    }

    mut string sparkline = "";

    if (min == max) {
        // All points are the same.
        for (int _ <- data) {
            sparkline = sparkline ~ ticks[n / 2];
        }
    } else {
        for (int point <- data) {
            int i = n * (point - min) / (max - min);
            sparkline = sparkline ~ ticks[i];
        }
    }

    return sparkline;
}

void main() {
    string[] ticks = ["▁", "▂", "▃", "▄", "▅", "▆", "▇", "█"];

    int[] data1 = [9, 13, 5, 17, 1];
    int[] data2 = [0, 30, 55, 80, 33, 150];
    int[] data3 = [1, 1, 1, 1, 1];

    assert(sparkline(ticks, data1) == "▄▆▂█▁");
    assert(sparkline(ticks, data2) == "▁▂▃▄▂█");
    assert(sparkline(ticks, data3) == "▄▄▄▄▄");
}
