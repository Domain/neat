module destructor;

macro import cx.macros.assert;

struct S
{
    int* ip;
    ~this()
    {
        *ip += 1;
    }
}

void test1()
{
    int i = 0;
    { S s = S(&i); }
    assert(i == 1);
}

void test2()
{
    int i = 0;
    if (true) S s = S(&i);
    assert(i == 1);
}

void test3()
{
    int i = 0;
    bool called;
    bool once() { if (!called) { called = true; return true; } return false; }
    while (once()) S s = S(&i);
    assert(i == 1);
}

void test4()
{
    int i = 0;
    void nest() S s = S(&i);
    nest();
    assert(i == 1);
}

void main()
{
    test1();
    test2();
    test3();
    test4();
}
