module eithertest;

macro import cx.macros.assert;

extern(C) void print(string);
extern(C) string cxruntime_itoa(int);

string itoa(int i) { return cxruntime_itoa(i); }

void main() {
    (int | float) either1 = 5;
    string s = either1.case(int i: "int " ~ itoa(i), float: "float");
    // should be one ref
    // TODO
    // assert(*cast(size_t*) s.base == 1);
    assert(s == "int 5");

    float f = 2;
    (int | float) either2 = f;
    assert(either2.case(int i: "int", float: "float") == "float");

    mut (int, int | int) either3 = (2, 2);
    either3 = 5;

    int test() {
        (int, int) remainder = either3.case((int a, int b): (a, b), int i: return i);
        assert(false);
    }
    assert(test == 5);

    mut int count;
    (:a | :b) countCalls() { count += 1; return :a; }
    countCalls.case { (:a): {} (:b): {} }
    assert(count == 1);

    print("Success.");
}
