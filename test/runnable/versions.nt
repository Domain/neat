module versions;

macro import neat.macros.assert;

struct S {
    int a;
    version (generation1) int b;
    version (doesntExist) string c;
}

class C {
    int a;
    version (generation1) int b;
    version (doesntExist) string c;
    this(this.a, this.b) { }
}

version (doesNotExist) {
    int foo() { return 5; }
} else {
    import std.math : sin;
    int foo() { return 6; }
}

int bar() {
    version (doesNotExist) {
        int a = 5;
    } else {
        int a = 6;
    }
    return a;
}

void main() {
    S s = S(2, 3);
    C c = new C(2, 3);
    assert(foo == 6);
    sin(0.5f);
    assert(bar == 6);
}
