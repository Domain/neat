module eithertest;

macro import neat.macros.assert;

import std.string : itoa;

extern(C) void print(string);

(size_t | fail :notFound) find(string text, string marker) {
    for (i in 0 .. text.length - marker.length + 1) {
        if (text[i .. i + marker.length] == marker)
            return i;
    }
    return :notFound;
}

template quadtest(T) {
    bool[] quadtest() {
        (:a | :b | :c) a = :a;
        (:a | :b | :c) b = :b;
        (:a | :b | :c) c = :c;
        mut bool[] ret;
        if (T x <- a) ret ~= true; else ret ~= false;
        if (T x <- b) ret ~= true; else ret ~= false;
        if (T x <- c) ret ~= true; else ret ~= false;
        return ret;
    }
}

void main() {
    (int | float) either1 = 5;
    string s = either1.case(int i: "int " ~ itoa(i), float: "float");
    // should be one ref
    // TODO
    // assert(*cast(size_t*) s.base == 1);
    assert(s == "int 5");

    if (int i <- either1) assert(i == 5);
    else assert(false);
    if (float f <- either1) assert(false);

    float f = 2;
    (int | float) either2 = f;
    assert(either2.case(int i: "int", float: "float") == "float");

    mut (int, int | int) either3 = (2, 2);
    either3 = 5;

    int test() {
        (int, int) remainder = either3.case((int a, int b): (a, b), int i: return i);
        assert(false);
    }
    assert(test == 5);

    mut int count;
    (:a | :b) countCalls() { count += 1; return :a; }
    countCalls.case { (:a): {} (:b): {} }
    assert(count == 1);

    ((:a | :b), (:c | :d)) test = (:a, :c);

    assert(quadtest!(:a) == [true, false, false]);
    assert(quadtest!(:b) == [false, true, false]);
    assert(quadtest!((:a | :b)) == [true, true, false]);
    assert(quadtest!(:c) == [false, false, true]);
    assert(quadtest!((:a | :c)) == [true, false, true]);
    assert(quadtest!((:b | :c)) == [false, true, true]);
    assert(quadtest!((:a | :b | :c)) == [true, true, true]);

    if (auto pos <- "HelloWorld".find("oWo")) assert(pos == 4);
    else assert(false);

    if (auto pos <- "HelloWorld".find("uwu")) assert(false);

    (:notFound | :success) test1() {
        auto pos <- "HelloWorld".find("oWo");
        assert(pos == 4);
        return :success;
    }
    test1.case {
        (:notFound): assert(false);
        (:success): {}
    }

    :notFound test2() {
        auto pos <- "HelloWorld".find("uwu");
        assert(false);
    }
    test2;

    ((:a | :b), int | :c) test3 = (:a, 5);

    // TODO
    // assert(test3 == (:a, 5));

    (:a | :b) test4 = :a;
    assert(test4 == :a);

    print("Success.");
}
