void main() {
    assert(ack(3, 6) == 509);
    assert(whiletest(5) == 32);
    forLoopTest();
    malloctest();
    refTest();
    structTest();
    arrayTest();
    fpTest();
    manualClassTest();
    classTest();
}

int ack(int m, int n) {
    if (m == 0) { n = n + 1; return n; }
    if (n == 0) { int m1 = m - 1; return ack(m1, 1); }
    int m1 = m - 1; int n1 = n - 1;
    return ack(m1, ack(m, n1));
}

int whiletest(int k) {
    int i = 1;
    while (k > 0) {
        i = i * 2;
        k = k - 1;
    }
    return i;
}

void forLoopTest()
{
    int k = 0;
    for (int i = 0; i < 10; i = i + 1)
    {
        k = k + 1;
    }
    assert(k == 10);
    for (int i = 10; i > 0; i = i - 1)
    {
        k = k - 1;
    }
    assert(k == 0);
}

void malloctest() {
    int* ip = malloc(4);
    *ip = 3;
    assert(*ip == 3);
}

void refTest() {
    int i = 0;
    refTestSet(&i, 5);
    assert(i == 5);
}

void refTestSet(int* ip, int value) {
    *ip = value;
}

struct S
{
    int a;
    int b;
}

void structTest()
{
    S s;
    s.a = 3;
    int* ap = &s.a;
    assert(*ap == 3);

    void* mem = malloc(8);
    S* sp = mem;
    int* ip = mem;
    sp.a = 5;
    sp.b = 8;
    assert(sp.a == 5);
    assert(*ip == 5);
}

void arrayTest()
{
    int* ip = malloc(4 * 10);
    int i = 0;
    while (i < 10) {
        ip[i] = i;
        i = i + 1;
    }
    i = 0;
    int sum = 0;
    while (i < 10) {
        sum = sum + ip[i];
        i= i + 1;
    }
    assert(sum == 45);
}

int callFp(int function() fn) { return fn(); }

int returnFive() { return 5; }

void fpTest() {
    assert(callFp(&returnFive) == 5);
}

/*
class Class1
{
    abstract int value();
    int getValue()
    {
        return value();
    }
}

class Class2 : Class1
{
    int a;
    override int value()
    {
        return a;
    }
}

void classMethodTest()
{
    Class1 obj = new Class2(5);
    assert(obj1.getValue() == 5);
}
*/

struct Class1Body
{
    void* __classinfo;
}

struct Class1ClassInfo
{
    int function(void*) value;
    int function(void*) getValue;
}

int Class1_getValue(void* vthis) {
    Class1Body* this = vthis;
    Class1ClassInfo* classinfo = this.__classinfo;
    return classinfo.value(this);
}

struct Class2Body
{
    void* __classinfo;
    int a;
}

struct Class2ClassInfo
{
    int function(void*) value;
    int function(void*) getValue;
}

void* Class2_new(int a)
{
    void* mem = malloc(8 + 4);
    Class2Body* ret = mem;
    ret.a = a;
    ret.__classinfo = malloc(8 + 8);
    Class2ClassInfo* classinfo = ret.__classinfo;
    classinfo.getValue = &Class1_getValue;
    classinfo.value = &Class2_value;
    return ret;
}

int Class2_value(void* this)
{
    return 5;
}

void manualClassTest()
{
    Class1Body* class1 = Class2_new(5);
    Class1ClassInfo* classinfo = class1.__classinfo;
    assert(classinfo.getValue(class1) == 5);
}

class Class1
{
    int value() { return 5; }
    int getValue() { return this.value(); }
}

class Class2 : Class1
{
    int value() { return 6; }
}

void classTest()
{
    Class1 class1 = new Class1;
    assert(class1.getValue() == 5);
    Class2 class2 = new Class2;
    assert(class2.getValue() == 6);
    Class1 class2_as_1 = new Class2;
    assert(class2_as_1.getValue() == 6);
}
